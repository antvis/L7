import { PolygonLayer, LineLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.13618469238281, 30.247352897833554],
    zoom: 9,
  }),
});
scene.on('loaded', () => {
  fetch('https://mdn.alipayobjects.com/afts/file/A*nNheQL3Z-FUAAAAAAAAAAAAADrd2AQ/330100_full.json')
    .then((res) => res.json())
    .then((data) => {
      const fillLayer = new PolygonLayer({
        name: 'fill',
        autoFit: true,
      })
        .source(data)
        .shape('fill')
        .color('adcode', [
          '#f0f9e8',
          '#ccebc5',
          '#a8ddb5',
          '#7bccc4',
          '#43a2ca',
          '#0868ac',
        ]);

      const lineLayer = new LineLayer({
        zIndex: 1,
        name: 'line',
      })
        .source(data)
        .shape('line')
        .size(1)
        .color('#fff');

      const selectLayer = new LineLayer({
        zIndex: 2,
        name: 'select',
      })
        .source([])
        .shape('line')
        .size(2)
        .color('#f00');

      scene.addLayer(fillLayer);
      scene.addLayer(lineLayer);
      scene.addLayer(selectLayer);

      scene.enableBoxSelect(false);

      const onBoxSelect = (bbox, startEvent, endEvent) => {
        const { x: x1, y: y1 } = startEvent;
        const { x: x2, y: y2 } = endEvent;
        fillLayer.boxSelect(
          [
            Math.min(x1, x2),
            Math.min(y1, y2),
            Math.max(x1, x2),
            Math.max(y1, y2),
          ],
          (features) => {
            selectLayer.setData({
              type: 'FeatureCollection',
              features: features ?? [],
            });
          },
        );
      };

      scene.on('selecting', onBoxSelect);
      scene.on('selectend', onBoxSelect);
    });
});
import { PolygonLayer, LineLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 118.7368, 32.0560 ],
    zoom: 9
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/91247d10-585b-4406-b1e2-93b001e3a0e4.json'
  )
    .then(res => res.json())
    .then(data => {
      const filllayer = new PolygonLayer({
        name: 'fill'
      })
        .source(data)
        .shape('fill')
        .color('unit_price', [ '#f0f9e8', '#ccebc5', '#a8ddb5', '#7bccc4', '#43a2ca', '#0868ac' ]);
      const linelayer = new LineLayer({
        zIndex: 1,
        name: 'line'
      })
        .source(data)
        .shape('line')
        .size(0.5)
        .color('#fff')
        .style({
          opacity: 0.5
        });
      const hightLayer = new LineLayer({
        zIndex: 4, // 设置显示层级
        name: 'hightlight'
      })
        .source({
          type: 'FeatureCollection',
          features: [ ]
        })
        .shape('line')
        .size(2)
        .color('red');
      scene.addLayer(filllayer);
      scene.addLayer(linelayer);
      scene.addLayer(hightLayer);
      filllayer.on('click', feature => {
        console.log(feature);
        hightLayer.setData({
          type: 'FeatureCollection',
          features: [ feature.feature ]
        });
      });
    });
});
import { Scene, Marker, Popup } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 121.4316962, 31.26082325 ],
    zoom: 12.056
  })
});
scene.on('loaded', () => {
// 创建默认 marker
  const popup = new Popup({
    offsets: [ 0, 20 ]
  }).setText('hello');

  const marker = new Marker()
    .setLnglat([ 121.4316962, 31.26082325 ])
    .setPopup(popup);

  scene.addMarker(marker);
});
import { PointLayer, Scale, Scene, LayerSwitch, Zoom } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 121.4316962, 31.26082325 ],
    zoom: 15.056
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude'
          }
        })
        .shape('circle')
        .size('unit_price', [ 5, 25 ])
        .color('name', [ '#49B5AD', '#5B8FF9' ])
        .style({
          opacity: 0.3,
          strokeWidth: 1
        });

      scene.addLayer(pointLayer);
    });

    const layerSwitch = new LayerSwitch({
      position: 'rightcenter'
    })
    scene.addControl(layerSwitch);

    const zoomControl = new Zoom({
      position: 'rightcenter'
    });

    const scaleControl = new Scale({
      position: 'bottomright'
    });
    scene.addControl(zoomControl);
    scene.addControl(scaleControl);
});
import { Scene, GaodeMap } from '@antv/l7';
import { IconFontLayer } from '@antv/l7-composite-layers';

// 详情可见：https://l7plot.antv.antgroup.com/api/composite-layers/icon-font-layer

fetch('https://gw.alipayobjects.com/os/bmw-prod/9eb3f1b5-0c3b-49b2-8221-191d4ba8aa5e.json')
  .then((response) => response.json())
  .then((data) => {
    const scene = new Scene({
      id: 'map',
      map: new GaodeMap({
        pitch: 0,
        style: 'dark',
        zoom: 3,
        center: [120.19660949707033, 30.234747338474293],
      }),
    });
    scene.on('loaded', () => {
      const iconLayer = new IconFontLayer({
        id: 'iconImageLayer1',
        autoFit: true,
        source: {
          data,
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat',
          },
        },
        // color:{
        //   value:'red',
        // },
        iconAtlas: {
          fontFamily: 'iconfont',
          fontPath: '//at.alicdn.com/t/font_2534097_ao9soua2obv.woff2?t=1622021146076',
          iconFonts: [
            ['smallRain', '&#xe6f7;'],
            ['middleRain', '&#xe61c;'],
            ['hugeRain', '&#xe6a6;'],
            ['sun', '&#xe6da;'],
            ['cloud', '&#xe8da;'],
          ],
        },
        icon: {
          field: 'iconType',
          value: 'text',
        },
        iconStyle: {
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [-10, 10], // 文本相对锚点的偏移量 [水平, 垂直]
          fontFamily: 'iconfont',
          textAllowOverlap: true,
          iconfont: true,
        },
        fillColor: 'blue',
        radius: 40,
        opacity: 1,
        label: {
          visible: false,
          field: 'weather',
          style: {
            fill: '#fff',
            opacity: 0.6,
            fontSize: 12,
            textAnchor: 'top',
            textOffset: [0, 20],
            spacing: 1,
            padding: [5, 5],
            stroke: '#ffffff',
            strokeWidth: 0.3,
            strokeOpacity: 1.0,
          },
        },
        state: {
          active: {
            color: 'red',
          },
          select: {
            radius: 20,
            opacity: 1,
          },
        },
      });
      scene && iconLayer.addTo(scene);
    });
  });
import { GaodeMapV2, LayerPopup, Scene } from '@antv/l7';
import { FlowLayer } from '@antv/l7-composite-layers';

// 详情可见：https://l7plot.antv.antgroup.com/api/composite-layers/flow-layer

const scene = new Scene({
  id: 'map',
  map: new GaodeMapV2({
    pitch: 0,
    style: 'dark',
    center: [121.458794, 31.205302],
    zoom: 10.95,
  }),
});

scene.on('loaded', async () => {
  const response = await fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/f4f3e99a-1d6c-4ab0-b08f-ec730c576b62.json',
  );
  const data = await response.json();

  const flowLayer = new FlowLayer({
    source: {
      data,
      parser: {
        type: 'json',
        x: 'f_lon',
        y: 'f_lat',
        x1: 't_lon',
        y1: 't_lat',
        weight: 'weight',
      },
    },
  });

  flowLayer.on('circleLayer:click', (e) =>
    console.log('circle layer click', e),
  );
  flowLayer.on('lineLayer:click', (e) => console.log('line layer click', e));
  scene && flowLayer.addTo(scene);

  const layerPopup = new LayerPopup({
    items: [
      {
        layer: 'circleLayer',
        fields: ['id', 'weight'],
      },
      {
        layer: 'lineLayer',
        fields: ['id', 'weight'],
      },
    ],
  });
  scene.addPopup(layerPopup);
});
import { Scene, GaodeMap } from '@antv/l7';
import { IconImageLayer } from '@antv/l7-composite-layers';

// 详情可见：https://l7plot.antv.antgroup.com/api/composite-layers/icon-image-layer

fetch('https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json')
  .then((response) => response.json())
  .then((data) => {
    const scene = new Scene({
      id: 'map',
      map: new GaodeMap({
        pitch: 0,
        style: 'dark',
        zoom: 3,
        center: [120.19660949707033, 30.234747338474293],
      }),
    });
    scene.on('loaded', () => {
      const iconLayer = new IconImageLayer({
        id: 'iconImageLayer1',
        autoFit: true,
        source: {
          data,
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude',
          },
        },
        // color:{
        //   value:'red',
        // },
        iconAtlas: {
          icon1: 'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',
          icon2: 'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg',
        },
        icon: 'icon1',
        radius: {
          field: 'unit_price',
          value: [1, 20],
        },
        opacity: 1,
        label: {
          field: 'name',
          state: {
            active: {
              color: 'blue',
            },
          },
          style: {
            fill: '#fff',
            opacity: 0.6,
            fontSize: 12,
            textAnchor: 'top',
            textOffset: [0, -40],
            spacing: 1,
            padding: [5, 5],
            stroke: '#ffffff',
            strokeWidth: 0.3,
            strokeOpacity: 1.0,
          },
        },
        state: {
          active: false,
          select: {
            radius: 20,
            opacity: 1,
            icon: 'icon2',
          },
        },
      });
      scene && iconLayer.addTo(scene);
    });
  });
import { Scene, WindLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 105.732421875, 32.24997445586331 ],
    style: 'dark',
    zoom: 2,
  })
});

scene.on('loaded', () => {
  const layer = new WindLayer({});
  layer
    .source(
      'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*wcU8S5xMEDYAAAAAAAAAAAAAARQnAQ',
      {
        parser: {
          type: 'image',
          extent: [ -180, -85, 180, 85 ]
        }
      }
    )
    .animate(true)
    .style({
      uMin: -21.32,
      uMax: 26.8,
      vMin: -21.57,
      vMax: 21.42,
      numParticles: 35535,
      fadeOpacity: 0.996,
      sizeScale: 1.2,
      rampColors: {
        0.0: '#c6dbef',
        0.1: '#9ecae1',
        0.2: '#6baed6',
        0.3: '#4292c6',
        0.4: '#2171b5',
        0.5: '#084594'
      }
    });
  scene.addLayer(layer);
});
import { Scene, PolygonLayer, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.15, 30.246 ],
    zoom: 13.5,
    style: 'dark',
    pitchEnable: false,
    rotation: -90
  })
});

scene.on('loaded', () => {
  scene.addImage(
    'arrow',
    'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg'
  );

  fetch('https://gw.alipayobjects.com/os/bmw-prod/67130c6c-7f49-4680-915c-54e69730861d.json')
    .then(data => data.json())
    .then(({ lakeBorderData, lakeData, landData }) => {
      const lakeLayer = new PolygonLayer()
        .source(lakeData)
        .shape('fill')
        .color('#1E90FF')
        .style({
          opacity: 0.4,
          opacityLinear: {
            enable: true,
            dir: 'out' // in - out
          }
        });
      const landLayer = new PolygonLayer()
        .source(landData)
        .shape('fill')
        .color('#3CB371')
        .style({
          opacity: 0.4,
          opacityLinear: {
            enable: true,
            dir: 'in' // in - out
          }
        });

      const lakeBorderLayer = new PolygonLayer()
        .source(lakeBorderData)
        .shape('fill')
        .color('#ccc')
        .style({
          opacity: 0.5,
          opacityLinear: {
            enable: true,
            dir: 'in' // in - out
          }
        });

      scene.addLayer(lakeLayer);
      scene.addLayer(lakeBorderLayer);
      scene.addLayer(landLayer);

    });


  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/40ef2173-df66-4154-a8c0-785e93a5f18e.json'
  )
    .then(res => res.json())
    .then(data => {

      const layer = new LineLayer({})
        .source(data)
        .size(3)
        .shape('line')
        .texture('arrow')
        .color('rgb(22,119,255)')
        .animate({
          interval: 1, // 间隔
          duration: 1, // 持续时间，延时
          trailLength: 2 // 流线长度
        })
        .style({
          opacity: 0.6,
          lineTexture: true, // 开启线的贴图功能
          iconStep: 10, // 设置贴图纹理的间距
          borderWidth: 0.4, // 默认文 0，最大有效值为 0.5
          borderColor: '#fff' // 默认为 #ccc
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import { ThreeLayer, ThreeRender } from '@antv/l7-three';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

function getImageData(img) {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const { width, height } = img;
  canvas.width = width;
  canvas.height = height;

  ctx.drawImage(img, 0, 0, width, height);
  const imageData = ctx.getImageData(0, 0, width, height);

  return imageData;
}

function getLatData(data) {
  const size = Math.floor(Math.sqrt(data.length));

  const arr = [];
  const startLng = 110,
    lngStep = 5 / (size - 1);
  const startLat = 30,
    latStep = -5 / (size - 1);
  for (let i = 0; i < size; i++) {
    const arr2 = [];
    for (let j = 0; j < size; j++) {
      const index = i + j * size;
      const x = startLng + lngStep * i;
      const y = startLat + latStep * j;

      arr2.push([ x, y, data[index] ]);
    }
    arr.push(arr2);
  }
  return arr;
}

function getLngData(data) {
  const size = Math.floor(Math.sqrt(data.length));
  const arr = [];
  const startLng = 110,
    lngStep = 5 / (size - 1);
  const startLat = 30,
    latStep = -5 / (size - 1);

  for (let i = 0; i < size; i++) {
    const arr2 = [];
    for (let j = 0; j < size; j++) {
      const index = i * size + j;
      const x = startLng + lngStep * j;
      const y = startLat + latStep * i;

      arr2.push([ x, y, data[index] ]);
    }
    arr.push(arr2);
  }
  return arr;
}

function getR(data) {
  const arr = [];
  for (let i = 0; i < data.length; i += 4) {
    arr.push(data[i]);
  }
  return arr;
}

function setMaterial(object) {
  if (object.children && object.children.length && object.children.length > 0) {
    object.children.map(child => setMaterial(child));
  } else if (object.material) {
    object.material.wireframe = true;
    object.material.opacity = 0.6;
  }
}


const airPorts = [
  {
    name: '常德桃花源机场',
    lng: 111.641101,
    lat: 28.91165
  },
  {
    name: '芷江机场',
    lng: 109.709699,
    lat: 27.442172
  },
  {
    name: '铜仁凤凰机场',
    lng: 109.313971,
    lat: 27.880629
  },
  {
    name: '永州零陵机场',
    lng: 111.616049,
    lat: 26.335053
  },
  {
    name: '桂林两江国际机场',
    lng: 110.049256,
    lat: 25.210065
  },
  {
    name: '长沙黄花国际机场',
    lng: 113.216412,
    lat: 28.183613
  },
  {
    name: '井冈山机场',
    lng: 114.745845,
    lat: 26.852646
  }
];
const planeTarget = {
  lng2: 111.616049,
  lat2: 26.335053
};
const airLineData = [
  {
    name: '常德桃花源机场',
    lng: 111.641101,
    lat: 28.91165,
    ...planeTarget
  },
  {
    name: '芷江机场',
    lng: 109.709699,
    lat: 27.442172,
    ...planeTarget
  },
  {
    name: '铜仁凤凰机场',
    lng: 109.313971,
    lat: 27.880629,
    ...planeTarget
  },
  {
    name: '桂林两江国际机场',
    lng: 110.049256,
    lat: 25.210065,
    ...planeTarget
  },
  {
    name: '长沙黄花国际机场',
    lng: 113.216412,
    lat: 28.183613,
    ...planeTarget
  },
  {
    name: '井冈山机场',
    lng: 114.745845,
    lat: 26.852646,
    ...planeTarget
  }
];


const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 113, 29 ],
    pitch: 70,
    zoom: 7.5,
    rotation: 170,
    style: 'blank'
  })
});
scene.setBgColor('#000');

scene.registerRenderService(ThreeRender);

const threeJSLayer = new ThreeLayer({
  enableMultiPassRenderer: false,
  // @ts-ignore
  onAddMeshes: (threeScene, layer) => {
    threeScene.add(new THREE.AmbientLight(0xffffff));
    const sunlight = new THREE.DirectionalLight(0xffffff, 0.25);
    sunlight.position.set(0, 800000, 1000000);
    sunlight.matrixWorldNeedsUpdate = true;
    threeScene.add(sunlight);

    // 使用 Three.js glTFLoader 加载模型
    const loader = new GLTFLoader();
    loader.load(
      'https://gw.alipayobjects.com/os/bmw-prod/3ca0a546-92d8-4ba0-a89c-017c218d5bea.gltf',
      gltf => {
        const antModel = gltf.scene;
        setMaterial(antModel);
        layer.adjustMeshToMap(antModel);
        layer.setMeshScale(antModel, 2000, 2000, 2000);
        layer.setObjectLngLat(
          antModel,
          [ 113, 29 ],
          0
        );

        const animations = gltf.animations;
        if (animations && animations.length) {
          const mixer = new THREE.AnimationMixer(antModel);
          const animation = animations[1];
          const action = mixer.clipAction(animation);
          action.timeScale = 1;
          action.play();
          layer.addAnimateMixer(mixer);
        }
        antModel.rotation.y = Math.PI;
        threeScene.add(antModel);
        layer.render();
        return '';
      }
    );
  },
  zIndex: 1
});

scene.addImage(
  'plane',
  'https://gw.alipayobjects.com/zos/bmw-prod/96327aa6-7fc5-4b5b-b1d8-65771e05afd8.svg'
);
const airPrtsLayer = new PointLayer()
  .source(airPorts, {
    parser: {
      type: 'json',
      x: 'lng',
      y: 'lat'
    }
  })
  .shape('name', 'text')
  .color('rgb(22,119,255)')
  .size(10);

const airLineLayer = new LineLayer({ blend: 'normal' })
  .source(airLineData, {
    parser: {
      type: 'json',
      x: 'lng',
      y: 'lat',
      x1: 'lng2',
      y1: 'lat2'
    }
  })
  .shape('arc3d')
  .size(1)
  .color('#f00')
  .style({
    sourceColor: 'rgb(22,119,255)',
    targetColor: 'rgba(242,246,250,0.1)'
  });

const airPlaneLayer = new LineLayer({ blend: 'normal', zIndex: 1 })
  .source(airLineData, {
    parser: {
      type: 'json',
      x: 'lng2',
      y: 'lat2',
      x1: 'lng',
      y1: 'lat'
    }
  })
  .shape('arc3d')
  .texture('plane')
  .size(30)
  .color('#f00')
  .animate({
    duration: 0.2,
    interval: 0.2,
    trailLength: 0.2
  })
  .style({
    textureBlend: 'replace',
    lineTexture: true, // 开启线的贴图功能
    iconStep: 6 // 设置贴图纹理的间距
  });


fetch(
  'https://gw.alipayobjects.com/os/bmw-prod/ec5351c9-d22b-4918-ad6c-1838064d3a64.json'
)
  .then(res => res.json())
  .then(data => {
    const layer = new LineLayer({})
      .source(data)
      .size(10000)
      .shape('wall')
      .style({
        opacity: 0.4,
        sourceColor: '#0DCCFF',
        targetColor: 'rbga(255,255,255, 0)',
        heightfixed: true
      });
    scene.addLayer(layer);

    const nameLayer = new PointLayer({ zIndex: 3 })
      .source(data)
      .color('rgb(22,119,255)')
      .size(15)
      .shape('name', 'text');
    scene.addLayer(nameLayer);
  });

const img = new Image();
img.crossOrigin = 'none';
img.src =
      'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*UkvYRYS5jTAAAAAAAAAAAAAAARQnAQ';
img.onload = function() {
  const data = getImageData(img);
  const rData = getR(data.data);
  const d1 = getLngData(rData);
  const d2 = getLatData(rData);
  const geoData = {
    type: 'FeatureCollection',
    features: [
      {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'MultiLineString',
          coordinates: d1
        }
      },
      {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'MultiLineString',
          coordinates: d2
        }
      }
    ]
  };
  const layer = new LineLayer({})
    .source(geoData)
    .size(1)
    .shape('simple')
    .color('rgb(22, 119, 255)')
    .style({
      vertexHeightScale: 2000,
      opacity: 0.4
    });
  scene.addLayer(layer);
};
const pointData = [
  { lng: 113, lat: 29, size: 10000 },
  { lng: 113.5, lat: 29.5, size: 30000 },
  { lng: 110.23681640625, lat: 29.64509464986076, size: 74020.50373907911 }, 
  { lng: 115.01586914062499, lat: 26.88777988202911, size: 22908.885529976185 }, 
  { lng: 111.181640625, lat: 28.724313406473463, size: 73359.37302978932 }, 
  { lng: 112.686767578125, lat: 29.257648503615542, size: 18500.90838085843 }, 
  { lng: 114.664306640625, lat: 28.98892237190413, size: 20293.183968726793 }, 
  { lng: 113.90075683593749, lat: 28.17855984939698, size: 18051.412077639496 }, 
  { lng: 111.51123046875, lat: 27.45466493898314, size: 37645.94186119526 }, 
  { lng: 110.67626953125, lat: 28.004101830368654, size: 4214.588023703825 }, 
  { lng: 114.43359375, lat: 29.477861195816843, size: 61722.01580332115 }, 
  { lng: 110.445556640625, lat: 26.96124577052697, size: 70806.75519747598 }, 
  { lng: 113.75244140624999, lat: 27.88278388425912, size: 70930.24993464859 }
];
const waveLayer = new PointLayer({ zIndex: 2, blend: 'additive' })
  .source(pointData,
    {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat'
      }
    }
  )
  .shape('circle')
  .color('rgb(22, 119, 255)')
  .size('size', v => v)
  .animate(true)
  .style({
    unit: 'meter'
  });

const barLayer = new PointLayer({ zIndex: 2, depth: false })
  .source(pointData,
    {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat'
      }
    }
  )
  .shape('cylinder')
  .color('rgb(22, 119, 255)')
  .size('size', v => [ 5, 5, v / 350 ])
  .animate(true)
  .style({
    opacityLinear: {
      enable: true,
      dir: 'up'
    },
    lightEnable: false
  });

scene.on('loaded', () => {
  scene.addLayer(waveLayer);
  scene.addLayer(barLayer);
  scene.addLayer(threeJSLayer);

  scene.addLayer(airPrtsLayer);
  scene.addLayer(airLineLayer);
  scene.addLayer(airPlaneLayer);
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 7.65, 45.053 ],
    zoom: 12,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/98a5d9ec-be97-44bd-bff0-5742d929c003.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .shape('line')
        .color('highway', v => {
          switch (v) {
          case 'motorway':
            return '#F9D371';
          case 'motorway_link':
            return '#3DB2FF';
          case 'trunk':
            return 'green';
          case 'trunk_link':
            return '#6E85B2';
          case 'primary':
            return '#F47340';
          case 'primary_link':
            return '#F6A9A9';
          case 'secondary':
            return '#EF2F88';
          case 'secondary_link':
            return '#5F7A61';
          case 'tertiary':
            return '#1ee3cf';
          case 'tertiary_link':
            return '#C2F784';
          case 'pedestrian':
            return '#FFF89A';
          case 'residential':
            return 'rgba(22, 119, 255, .5)';
          case 'road':
            return '#93FFD8';
          case 'path':
            return '#BAFFB4';
          case 'unclassified':
            return '#D3DEDC';
          case 'service':
            return '#AEFEFF';
          case 'living_street':
            return '#9B0000';
          case 'track':
            return '#F5F5F5';
          case 'highway':
            return 'red';
          case 'rail':
            return '#08ffc8';
          default:
            return '#FFE3E3';
          }
        })
        .animate({
          interval: 1, // 间隔
          duration: 1, // 持续时间，延时
          trailLength: 2 // 流线长度
        });
      scene.addLayer(layer);
    });
});

import { Scene, CityBuildingLayer, LineLayer, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 120.145, 30.238915 ],
    pitch: 60,
    zoom: 13.2
  })
});
fetch(
  'https://gw.alipayobjects.com/os/rmsportal/ggFwDClGjjvpSMBIrcEx.json'
).then(async res => {
  const pointLayer = new CityBuildingLayer();
  pointLayer
    .source(await res.json())
    .size('floor', [ 0, 500 ])
    .color('rgba(242,246,250,1.0)')
    .animate({
      enable: true
    })
    .active({
      color: '#0ff',
      mix: 0.5
    })
    .style({
      opacity: 0.7,
      baseColor: 'rgb(16, 16, 16)',
      windowColor: 'rgb(30, 60, 89)',
      brightColor: 'rgb(255, 176, 38)',
      sweep: {
        enable: true,
        sweepRadius: 2,
        sweepColor: '#1990FF',
        sweepSpeed: 0.5,
        sweepCenter: [ 120.145319, 30.238915 ]
      }
    });
  scene.addLayer(pointLayer);
});

fetch(
  'https://gw.alipayobjects.com/os/bmw-prod/67130c6c-7f49-4680-915c-54e69730861d.json'
)
  .then(data => data.json())
  .then(
    ({
      lakeBorderData,
      lakeData,
      landData
    }) => {
      const lakeLayer = new PolygonLayer()
        .source(lakeData)
        .shape('fill')
        .color('#1E90FF')
        .style({
          opacity: 0.4,
          opacityLinear: {
            enable: true,
            dir: 'out' // in - out
          }
        });
      const landLayer = new PolygonLayer()
        .source(landData)
        .shape('fill')
        .color('#3CB371')
        .style({
          opacity: 0.4,
          opacityLinear: {
            enable: true,
            dir: 'in' // in - out
          }
        });

      const lakeBorderLayer = new PolygonLayer()
        .source(lakeBorderData)
        .shape('fill')
        .color('#ccc')
        .style({
          opacity: 0.5,
          opacityLinear: {
            enable: true,
            dir: 'in' // in - out
          }
        });

      scene.addLayer(lakeLayer);
      scene.addLayer(lakeBorderLayer);
      scene.addLayer(landLayer);
    }
  );

fetch(
  'https://gw.alipayobjects.com/os/basement_prod/40ef2173-df66-4154-a8c0-785e93a5f18e.json'
)
  .then(res => res.json())
  .then(data => {
    const layer = new LineLayer({
      zIndex: 0,
      depth: true
    })
      .source(data)
      .size(1)
      .shape('line')
      .color('#1990FF')
      .animate({
        interval: 1, // 间隔
        duration: 2, // 持续时间，延时
        trailLength: 2 // 流线长度
      });
    scene.addLayer(layer);
  });
/* eslint-disable no-eval */
import { Scene, LineLayer, PointLayer, PolygonLayer } from '@antv/l7';//
import { GaodeMap } from '@antv/l7-maps';


const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 110, 30 ],
    zoom: 2.5,
    style: 'dark'
  })
});
const originData = { // BJ -> CQ
  lng1: 116.5883553580003,
  lat1: 40.07680509701226,
  lng2: 106.06201171875,
  lat2: 30.164126343161097
};
const originData2 = { // BJ -> HK
  lng1: 116.5883553580003,
  lat1: 40.07680509701226,
  lng2: 114.3072509765625,
  lat2: 22.228090416784486
};
const originData3 = { // BJ -> HerBin
  lng1: 116.5883553580003,
  lat1: 40.07680509701226,
  lng2: 126.62841796875,
  lat2: 45.75219336063106
};
const originData4 = { // BJ -> Wulumuqi
  lng1: 116.5883553580003,
  lat1: 40.07680509701226,
  lng2: 87.57202148437499,
  lat2: 43.82660134505382
};
const originData5 = { // BJ -> 上海
  lng1: 116.5883553580003,
  lat1: 40.07680509701226,
  lng2: 121.26708984374999,
  lat2: 31.259769987394286
};

scene.on('loaded', () => {
  scene.addImage(
    'plane',
    'https://gw.alipayobjects.com/zos/bmw-prod/bea041d7-d6d4-4027-b422-a0bc321fbf14.svg'
  );

  Promise.all([
    fetch(
      'https://gw.alipayobjects.com/os/bmw-prod/2960e1fc-b543-480f-a65e-d14c229dd777.json'
    ).then(d => d.json())
  ]).then(function onLoad([ world ]) {

    const data = [];

    for (let i = 0; i < 99; i++) {
      data.push({
        thetaOffset: -1 / 2 + i * (1 / 99), // 设置曲线的偏移量
        ...originData
      });
    }

    for (let i = 0; i < 30; i++) {
      data.push({
        thetaOffset: -1 / 2 + i * (1 / 30), // 设置曲线的偏移量
        ...originData2
      });
    }

    for (let i = 0; i < 15; i++) {
      data.push({
        thetaOffset: -1 / 2 + i * (1 / 15), // 设置曲线的偏移量
        ...originData3
      });
    }

    for (let i = 0; i < 11; i++) {
      data.push({
        thetaOffset: -1 / 2 + i * (1 / 11), // 设置曲线的偏移量
        ...originData4
      });
    }

    for (let i = 0; i < 60; i++) {
      data.push({
        thetaOffset: -1 / 2 + i * (1 / 60), // 设置曲线的偏移量
        ...originData5
      });
    }

    const worldLine = new LineLayer()
      .source(world)
      .color('#1E90FF')
      .size(0.5)
      .style({
        opacity: 0.4
      });
    scene.addLayer(worldLine);

    const worldFill = new PolygonLayer({ blend: 'normal' })
      .source(world)
      .size('name', [ 0, 10000, 50000, 30000, 100000 ])
      .color('#1E90FF')
      .shape('fill')
      .active(true)

      .style({
        opacity: 0.2,
        opacityLinear: {
          enable: true,
          dir: 'out' // in - out
        }
      });
    scene.addLayer(worldFill);

    const jsonParserOotion = {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat'
      }
    };

    const jsonLineParserOotion = {
      parser: {
        type: 'json',
        x: 'lng1',
        y: 'lat1',
        x1: 'lng2',
        y1: 'lat2'
      }
    };

    const dotData = [
      { // CQ
        lng: 106.06201171875,
        lat: 30.164126343161097
      },
      { // BJ
        lng: 116.5883553580003,
        lat: 40.07680509701226
      },
      { // HK
        lng: 114.3072509765625,
        lat: 22.228090416784486
      },
      { // Herbin
        lng: 126.62841796875,
        lat: 45.75219336063106
      },
      { // shanghai
        lng: 121.26708984374999,
        lat: 31.259769987394286
      },
      { // Wulumuqi
        lng: 87.57202148437499,
        lat: 43.82660134505382
      }
    ];

    const dotPoint = new PointLayer({ zIndex: 2 })
      .source(dotData, jsonParserOotion)
      .shape('circle')
      .color('#00FFFF')
      .animate(true)
      .size(30);
    scene.addLayer(dotPoint);

    const layerPlaneLine = new LineLayer({ blend: 'normal' })
      .source(data, jsonLineParserOotion)
      .size(1)
      .shape('arc')
      .color('#87CEFA')
      .animate({
        interval: 1, // 间隔
        duration: 1, // 持续时间，延时
        trailLength: 2 // 流线长度
      })
      .style({
        opacity: 0.4,
        thetaOffset: 'thetaOffset'
      });
    scene.addLayer(layerPlaneLine);
  });
});

// {
//   "filename": "route_line.js",
//   "title": "航线图",
//   "screenshot":"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*NEKUR6HzXFEAAAAAAAAAAAAAARQnAQ"
// },import { Scene, LineLayer, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const mapWrap = document.getElementById('map');
const { left, top } = mapWrap.getBoundingClientRect();
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 110, 30 ],
    zoom: 2.5,
    style: 'dark',
    dragEnable: false
  })
});
const emptyFeatureCollextion = {
  type: 'FeatureCollection',
  features: []
};

function getSelectData(data) {
  return [
    Math.min(data[0], data[2]), // x1
    Math.min(data[1], data[3]), // y1
    Math.max(data[0], data[2]), // x2
    Math.max(data[1], data[3]) // y2
  ];
}

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/d6da7ac1-8b4f-4a55-93ea-e81aa08f0cf3.json')
    .then(res => res.json())
    .then(data => {
      const chinaPolygonLayer = new PolygonLayer({
        autoFit: true
      })
        .source(data)
        .color('name', [
          'rgb(239,243,255)',
          'rgb(189,215,231)',
          'rgb(107,174,214)',
          'rgb(49,130,189)',
          'rgb(8,81,156)'
        ])
        .shape('fill');

      //  图层边界
      const chinaBorderLineLayer = new LineLayer({
        zIndex: 2
      })
        .source(data)
        .color('rgb(93,112,146)')
        .size(0.6);

      const selectLineLayer = new LineLayer({
        zIndex: 2
      })
        .source(emptyFeatureCollextion)
        .color('#fff')
        .size(2);

      const boxLayer = new PolygonLayer({})
        .source(emptyFeatureCollextion)
        .color('#fff')
        .size(2)
        .style({
          opacity: 0.6,
          lineType: 'dash',
          dashArray: [ 5, 5 ]
        })
        .shape('line');

      chinaPolygonLayer.on('unclick', () => {
        selectLineLayer.setData(emptyFeatureCollextion);
      });

      scene.addLayer(chinaPolygonLayer);
      scene.addLayer(chinaBorderLineLayer);
      scene.addLayer(selectLineLayer);
      scene.addLayer(boxLayer);

      let startLngLat = { lng: 0, lat: 0, x: 0, y: 0 };
      const selectNames = '';

      scene.on('dragstart', e => {
        selectLineLayer.setData(emptyFeatureCollextion);
        startLngLat = {
          ...e.lngLat,
          x: e.target.x,
          y: e.target.y
        };
      });

      scene.on(
        'dragging',
        e => {
          const {
            lng: startLng,
            lat: startLat

          } = startLngLat;
          const { lng: endLng, lat: endLat } = e.lngLat;

          boxLayer.setData({
            type: 'FeatureCollection',
            features: [{
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'Polygon',
                coordinates: [
                  [
                    [ startLng, endLat ],
                    [ endLng, endLat ],
                    [ endLng, startLat ],
                    [ startLng, startLat ],
                    [ startLng, endLat ]
                  ]
                ]
              }
            }]
          });
        }
      );

      scene.on('dragend', e => {
        const {
          x: startX,
          y: startY
        } = startLngLat;
        const { x: endX, y: endY } = e.target;
        boxLayer.setData(emptyFeatureCollextion);
        const selectData = [ startX - left, startY - top, endX - left, endY - top ];
        chinaPolygonLayer.boxSelect(getSelectData(selectData),
          features => {
            const currentSelectNames = features
              .map(item => item.properties.name)
              .join(',');
            if (currentSelectNames !== selectNames) {
              selectLineLayer.setData({
                type: 'FeatureCollection',
                features: [ ...features ]
              });
            }
          }
        );

      });
    });
});

// {
//   "filename": "box_select.js",
//   "title": "框选要素",
//   "screenshot":"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*G1lyQ6e5gKAAAAAAAAAAAAAAARQnAQ"
// },/* eslint-disable no-eval */
import { Scene, LineLayer, PointLayer, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 40,
    center: [ 3.438, 40.16797 ],
    zoom: 1
  })
});
scene.setBgColor('#000');
scene.on('loaded', () => {
  scene.addImage(
    'plane',
    'https://gw.alipayobjects.com/zos/bmw-prod/96327aa6-7fc5-4b5b-b1d8-65771e05afd8.svg'
  );
  Promise.all([
    fetch(
      'https://gw.alipayobjects.com/os/bmw-prod/2960e1fc-b543-480f-a65e-d14c229dd777.json'
    ).then(d => d.json()),
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/4472780b-fea1-4fc2-9e4b-3ca716933dc7.json'
    ).then(d => d.text()),
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/a5ac7bce-181b-40d1-8a16-271356264ad8.json'
    ).then(d => d.text())
  ]).then(function onLoad([ world, dot, flyline ]) {
    const dotData = eval(dot);
    // @ts-ignore
    const flydata = eval(flyline).map(item => {
      // @ts-ignore
      const latlng1 = item.from.split(',').map(e => {
        return e * 1;
      });
      // @ts-ignore
      const latlng2 = item.to.split(',').map(e => {
        return e * 1;
      });
      return { coord: [ latlng1, latlng2 ] };
    });

    const worldLine = new LineLayer()
      .source(world)
      .color('rgb(22,119,255)')
      .size(0.5)
      .style({
        opacity: 0.4
      });
    const worldPolygon = new PolygonLayer()
      .source(world)
      .shape('fill')
      .color('rgb(22,119,255)')
      .size(0.5)
      .style({
        opacity: 0.4,
        opacityLinear: {
          enable: true,
          dir: 'in' // in - out
        }
      });
    const dotPoint = new PointLayer({ bland: 'additive' })
      .source(dotData, {
        parser: {
          type: 'json',
          x: 'lng',
          y: 'lat'
        }
      })
      .shape('circle')
      .color('rgb(22,119,255)')
      .animate(true)
      .size(40);
    const flyLine = new LineLayer({
      blend: 'additive',
      zIndex: 2
    })
      .source(flydata, {
        parser: {
          type: 'json',
          coordinates: 'coord'
        }
      })
      .color('rgb(22,119,255)')
      .texture('plane')
      .shape('arc3d')
      .size(25)
      .animate({
        duration: 1,
        interval: 0.5,
        trailLength: 0.05
      })
      .style({
        textureBlend: 'replace',
        lineTexture: true, // 开启线的贴图功能
        iconStep: 8, // 设置贴图纹理的间距
      });

    const flyLine2 = new LineLayer()
      .source(flydata, {
        parser: {
          type: 'json',
          coordinates: 'coord'
        }
      })
      .color('rgb(22,119,255)')
      .shape('arc3d')
      .size(1)
      .style({
        lineType: 'dash',
        dashArray: [ 5, 5 ],
        opacity: 0.5
      });
    scene.addLayer(worldLine);
    scene.addLayer(worldPolygon);
    scene.addLayer(dotPoint);
    scene.addLayer(flyLine2);
    scene.addLayer(flyLine);
  });
});

// {
//   "filename": "plane_animate.js",
//   "title": "航向图",
//   "screenshot":"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*8h-QSqDgzxYAAAAAAAAAAAAAARQnAQ"
// },import { Scene, PolygonLayer, LineLayer, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import { ThreeLayer, ThreeRender } from '@antv/l7-three';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { animate, easeInOut } from 'popmotion';

let isTravel = false;

function travel(
  mesh,
  path,
  duration,
  callback
) {
  if (path.length < 2 || isTravel) return;
  isTravel = true;
  let startIndex = 0;
  const len = path.length;
  const currentP = path[0],
    nextP = path[1];
  const t = duration / len;

  move(currentP, nextP);
  function move(currentP, nextP) {
    animate({
      from: {
        x: currentP.x,
        y: currentP.y,
        z: currentP.z
      },
      to: {
        x: nextP.x,
        y: nextP.y,
        z: nextP.z
      },
      ease: easeInOut,
      duration: t,
      repeatType: 'loop',
      onUpdate: o => {
        mesh.position.set(o.x, o.y, o.z);
      },
      onComplete: () => {
        startIndex++;
        if (startIndex < len - 1) {
          const currentP = path[startIndex],
            nextP = path[startIndex + 1];
          mesh.lookAt(nextP);

          move(currentP, nextP);
        } else {
          isTravel = false;
          callback && callback();
        }
      }
    });
  }
}

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 110, 35.39847 ],
    pitch: 20,
    style: 'dark',
    zoom: 3
  })
});

scene.on('loaded', () => {
  scene.registerRenderService(ThreeRender);

  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d2e0e930-fd44-4fca-8872-c1037b0fee7b.json'
  )
    .then(d => d.json())
    .then(data => {
      const textLayer = new PointLayer({ zIndex: 1 })
        .source(data)
        .color('rgb(22,119,255)')
        .size(12)
        .shape('name', 'text');


      const polygonlayer = new PolygonLayer({})
        .source(data)
        .color('rgb(22,119,255)')
        .shape('fill')
        .active({
          enable: true,
          blend: 0.5
        })
        .style({
          opacity: 0.6,
          opacityLinear: {
            enable: true,
            dir: 'out' // in - out
          }
        });

      const linelayer = new LineLayer({ })
        .source(data)
        .color('rgb(72,169,255)')
        .shape('line')
        .size(0.5)
        .style({
          opacity: 0.6
        });

      scene.addLayer(polygonlayer);
      scene.addLayer(textLayer);
      scene.addLayer(linelayer);
    });


  const threeJSLayer = new ThreeLayer({
    zIndex: 2,
    enableMultiPassRenderer: false,
    onAddMeshes: (threeScene, layer) => {
      // 添加光
      threeScene.add(new THREE.AmbientLight(0xffffff));
      const sunlight = new THREE.DirectionalLight(0xffffff, 0.25);
      sunlight.position.set(0, 80000000, 100000000);
      sunlight.matrixWorldNeedsUpdate = true;
      threeScene.add(sunlight);

      const lineData = [
        [ 116.71874999999999, 26.745610382199022 ],
        [ 117.3779296875, 28.8831596093235 ],
        [ 115.75195312499999, 31.466153715024294 ],
        [ 113.466796875, 33.32134852669881 ],
        [ 113.9501953125, 35.85343961959182 ],
        [ 115.400390625, 38.272688535980976 ],
        [ 116.5869140625, 40.3130432088809 ],
        [ 115.6201171875, 42.261049162113856 ],
        [ 112.236328125, 42.94033923363181 ],
        [ 109.3798828125, 41.04621681452063 ],
        [ 103.84277343749999, 39.80853604144591 ],
        [ 98.9208984375, 39.842286020743394 ],
        [ 95.2294921875, 40.713955826286046 ],
        [ 91.7138671875, 39.87601941962116 ],
        [ 90.8349609375, 37.125286284966805 ],
        [ 90.3076171875, 35.88905007936091 ],
        [ 90.703125, 33.284619968887675 ],
        [ 92.94433593749999, 31.98944183792288 ],
        [ 96.2841796875, 32.21280106801518 ],
        [ 98.87695312499999, 32.0639555946604 ],
        [ 102.919921875, 28.459033019728043 ],
        [ 107.9736328125, 28.497660832963472 ],
        [ 108.10546875, 24.206889622398023 ],
        [ 109.072265625, 23.039297747769726 ],
        [ 112.763671875, 24.44714958973082 ],
        [ 116.54296874999999, 25.958044673317843 ]
      ];

      const lineCoordData = lineData.map(d => {
        return layer.lnglatToCoord(d);
      });


      const rawPoints = [];
      lineCoordData.map(d => {
        rawPoints.push(new THREE.Vector3(d[0], d[1], 0));
        return '';
      });
      const curve = new THREE.CatmullRomCurve3(rawPoints);
      const points = curve.getPoints(200);
      const geometry = new THREE.BufferGeometry().setFromPoints(points);

      const material = new THREE.LineBasicMaterial({ color: new THREE.Color('rgb(22,119,255)') });

      const line = new THREE.LineLoop(geometry, material);
      threeScene.add(line);


      // 使用 Three.js glTFLoader 加载模型
      const loader = new GLTFLoader();
      loader.load(
        'https://gw.alipayobjects.com/os/antvdemo/assets/gltf/truck/CesiumMilkTruck.gltf', // Truck
        gltf => {
          // 根据 GeoJSON 数据放置模型
          const gltfScene = gltf.scene.clone();
          setMaterial(gltfScene);
          layer.getSource().data.dataArray.forEach(() => {
            layer.adjustMeshToMap(gltfScene);
            gltfScene.scale.set(500000, 500000, 500000);

            const animations = gltf.animations;
            if (animations && animations.length) {
              const mixer = new THREE.AnimationMixer(gltfScene);
              // @ts-ignore
              for (let i = 0; i < animations.length; i++) {
                const animation = animations[i];

                // There's .3333 seconds junk at the tail of the Monster animation that
                // keeps it from looping cleanly. Clip it at 3 seconds

                const action = mixer.clipAction(animation);

                action.play();
              }
              layer.addAnimateMixer(mixer);
            }

            // 向场景中添加模型
            threeScene.add(gltfScene);
          });

          travelLoop();
          function travelLoop() {
            travel(gltfScene, points, 5000, () => {
              travelLoop();
            });
          }
          // 重绘图层
          layer.render();
        }
      );
    }
  })
    .animate(true);
  scene.addLayer(threeJSLayer);
});

function setMaterial(object) {
  if (object.children && object.children.length && object.children.length > 0) {
    object.children.map(child => setMaterial(child));
  } else if (object.material) {
    object.material.side = THREE.DoubleSide;
  }
}


// {
//   "filename": "amap_car.js",
//   "title": "旅行轨迹",
//   "screenshot":"https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*ghmURqau13sAAAAAAAAAAAAAARQnAQ"
// },import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 121.417463, 31.215175 ],
    style: 'dark',
    zoom: 11
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/BElVQFEFvpAKzddxFZxJ.txt')
    .then(res => res.text())
    .then(data => {
      const pointLayer = new PointLayer({
        blend:'additive'
      })
        .source(data, {
          parser: {
            type: 'csv',
            y: 'lat',
            x: 'lng'
          }
        })
        .size(0.5)
        .color('#080298');

      scene.addLayer(pointLayer);
    });
});
import { PolygonLayer,PointLayer, Scene } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',
    map: new Map({
      pitch: 0,
      style: 'light',
      center: [118, 24.8],
      zoom: 6,
    }),
  });
  scene.on('loaded', async () => {

    scene.addImage(
      'province',
      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*hvqeQa9I6ccAAAAAAAAAAAAADmJ7AQ/original'
    );
    scene.addImage(
      'city',
      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*sBlgRp8Ah7sAAAAAAAAAAAAADmJ7AQ/original'
    );
    scene.addImage(
      'county',
      'https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ufrWTqCNCScAAAAAAAAAAAAADmJ7AQ/original'
    );
  // 获取数据
  const dataList = [
      // 市级行政区
      'https://mdn.alipayobjects.com/afts/file/A*jPjCTad_s24AAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA.json',
      // 市级行政区一级群列岛名
      'https://mdn.alipayobjects.com/afts/file/A*HW8yQb2joA8AAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E4%B8%80%E7%BA%A7%E7%BE%A4%E5%88%97%E5%B2%9B%E5%90%8D.json',
      ///市级行政区一级河流名.json
      'https://mdn.alipayobjects.com/afts/file/A*EjtNRrENGToAAAAAAAAAAAAADrd2AQ/市级行政区一级河流名.json',
      //市级行政区一级港湾名.json
      'https://mdn.alipayobjects.com/afts/file/A*lqxATobbMLwAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E4%B8%80%E7%BA%A7%E6%B8%AF%E6%B9%BE%E5%90%8D.json',
      //市级行政区一级岛屿名.json
      'https://mdn.alipayobjects.com/afts/file/A*xyeHRZCF8DsAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E4%B8%80%E7%BA%A7%E5%B2%9B%E5%B1%BF%E5%90%8D.json',
      //市级行政区县级行政中心.json
      'https://mdn.alipayobjects.com/afts/file/A*vrDfSrB8J4sAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%8E%BF%E7%BA%A7%E8%A1%8C%E6%94%BF%E4%B8%AD%E5%BF%83.json',
      //市级行政区县级行政区.json
      'https://mdn.alipayobjects.com/afts/file/A*lfffQ5ej7AEAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%8E%BF%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA.json',
      // 市级行政区省级行政中心.json
      'https://mdn.alipayobjects.com/afts/file/A*jtlsTqxTJkoAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E7%9C%81%E7%BA%A7%E8%A1%8C%E6%94%BF%E4%B8%AD%E5%BF%83.json',
      //市级行政区山峰.json
      'https://mdn.alipayobjects.com/afts/file/A*DRSfRqBs9qsAAAAAAAAAAAAADrd2AQ/市级行政区山峰.json',
      //市级行政区色带.json
      'https://mdn.alipayobjects.com/afts/file/A*KRD4QbjkZCMAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E8%89%B2%E5%B8%A6.json',
      //市级行政区面状水域.json
      'https://mdn.alipayobjects.com/afts/file/A*3e9nSJwXqu0AAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E9%9D%A2%E7%8A%B6%E6%B0%B4%E5%9F%9F.json',
      //市级行政区境界线.json
      'https://mdn.alipayobjects.com/afts/file/A*tA8nSqhulQQAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%A2%83%E7%95%8C%E7%BA%BF.json',
      //市级行政区河流.json
      'https://mdn.alipayobjects.com/afts/file/A*2vGmRrYpTjEAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E6%B2%B3%E6%B5%81.json',
      //市级行政区海岸线.json
      'https://mdn.alipayobjects.com/afts/file/A*juI9TpBcQ74AAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E6%B5%B7%E5%B2%B8%E7%BA%BF.json',
      //市级行政区二级群列岛名.json
      'https://mdn.alipayobjects.com/afts/file/A*E4ReSqdYq-cAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E4%BA%8C%E7%BA%A7%E7%BE%A4%E5%88%97%E5%B2%9B%E5%90%8D.json',
      //市级行政区地级市行政中心.json
      'https://mdn.alipayobjects.com/afts/file/A*I3HSQaYyQ_UAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%9C%B0%E7%BA%A7%E5%B8%82%E8%A1%8C%E6%94%BF%E4%B8%AD%E5%BF%83.json',
      //市级行政区大型水库名.json
      'https://mdn.alipayobjects.com/afts/file/A*xxXKTpte0VUAAAAAAAAAAAAADrd2AQ/%E5%B8%82%E7%BA%A7%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%A4%A7%E5%9E%8B%E6%B0%B4%E5%BA%93%E5%90%8D.json',
     


    ];



   const result = await Promise.all(dataList.map(async (url)=> await(await fetch(url)).json()))
   const cityLayer = new PolygonLayer({
    autoFit:true
   }).source(result[6]).shape('fill')
   .scale('COLOR',{
    type:'cat',
    domain:['Y','P','G','R'],
   })
   .color('COLOR',['#f7f6c6','#fceaea','#e0e7d5','#f3e4cf']);
   
   // 陆上轮廓
   const layer2 = new PolygonLayer().source(result[9]).shape('fill').color('#b4cad7');

  // 水域 
  const waterLayer = new PolygonLayer().source(result[10]).shape('fill').color('#bcebfe');
  // 面状河流线
  const waterLayerLine = new PolygonLayer().source(result[10]).shape('line').size(0.5).color('#50aac8');

  // 线河流线
  const river_Line = new PolygonLayer().source(result[12]).shape('line').size(0.5).color('#50aac8');
  // 群岛标注图层
  const island_name = new PointLayer({
    minZoom:8
  }).source(result[1]).shape('NAME','text').size(15).color('#3b474e');

    // 河流标注图层
  const river_name = new PointLayer({minZoom:5}).source(result[2]).shape('NAME','text').size(15).color('#4aa1bd').style({
    fontWeight:800,
  });
  // 港湾标注
  const gangwan_name = new PointLayer({
    minZoom:6
  }).source(result[3]).shape('NAME','text').size(15).color('#4eaed9').style({
    fontWeight:800,
  });
      // 群岛
  const island_name1= new PointLayer({
    minZoom:8
  }).source(result[4]).shape('NAME','text').size(15).color('#3b474e').style({
    fontWeight:600,
  });

  // 县界
  const county_Line = new PolygonLayer({
    minZoom:5
  }).source(result[11]).shape('line').size(0.3).color('#a59f97');
  // 城市界
  const city_Line = new PolygonLayer().source(result[0]).shape('line').size(0.5).color('#787269');
 
      // 海岸线
  const sea_Line = new PolygonLayer().source(result[13]).shape('line').size(0.5).color('#50aac8');

     // 城市标注
  const cityName = new PointLayer({
    maxZoom:8,
    minZoom:5
  }).source(result[15]).shape('NAME','text').size(14).color('#000').style({
    fontWeight:800,
    textAnchor:'top',
    textAllowOverlap:true,
    textOffset:[0,12]
  });

   // 城市点位

  const cityPoint = new PointLayer({
    maxZoom:7,
    minZoom:5
  }).source(result[15]).shape('city').size(5);

  // 省级市标注
  const provinceCityName = new PointLayer({
    minZoom:5,
    maxZoom:7,
  }).source(result[7]).shape('NAME','text').size(14).color('#000').style({
    fontWeight:800,
    textAnchor:'top',
    textOffset:[0,12]
  });

      // 省级市点位
  const provincePoint = new PointLayer({
    minZoom:5,
    maxZoom:7,
  }).source(result[7]).shape('province').size(5);

  // 县标注
  const countyName = new PointLayer({
    minZoom:8
  }).source(result[5]).shape('NAME','text').size(14).color('#333').style({
    fontWeight:600,
    textAnchor:'top',
    textOffset:[0,12]
  });7
  // 县点位
  const countyPoint = new PointLayer({
    minZoom:8
  }).source(result[5]).shape('county').size(5);
 
    // 县标注
  const mountainPoint = new PointLayer({
    minZoom:6
  }).source(result[8]).shape('triangle').size(6).color('#326648');

   
  // 山标注
  const mountainPoint_name = new PointLayer({
    minZoom:6
  }).source(result[8]).shape('NAME','text').size(14).color('#326648').style({
    fontWeight:800,
    textAnchor:'top',
    textOffset:[0,12]
  });




   scene.addLayer(cityLayer);
   scene.addLayer(layer2);
   scene.addLayer(waterLayer);
   scene.addLayer(waterLayerLine);
   scene.addLayer(river_Line);
   scene.addLayer(county_Line);

   scene.addLayer(city_Line);
   scene.addLayer(sea_Line);

   scene.addLayer(cityName);
   scene.addLayer(cityPoint);
   scene.addLayer(countyName);
   scene.addLayer(countyPoint);
   scene.addLayer(provinceCityName);
   scene.addLayer(provincePoint);
   scene.addLayer(island_name);
   scene.addLayer(island_name1);
   scene.addLayer(gangwan_name);
   scene.addLayer(river_name);
   scene.addLayer(mountainPoint);
   scene.addLayer(mountainPoint_name);
   console.log(result)

 
  });
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 43,
    center: [ 120.13383079335335, 29.651873105004427 ],
    zoom: 7.068989519212174
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/a1a8158d-6fe3-424b-8e50-694ccf61c4d7.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'hexagon',
              size: 2500,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .size('sum', sum => {
          return sum * 10;
        })
        .shape('hexagonColumn')
        .style({
          coverage: 0.8,
          angle: 0,
        })
        .color('sum', [
          '#094D4A',
          '#146968',
          '#1D7F7E',
          '#289899',
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#C3F9CC',
          '#DEFAC0',
          '#ECFFB1'
        ]);
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 107.77791556935472, 35.443286920228644 ],
    zoom: 2.9142882493605033
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({
        blend: 'additive'
      })
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng1',
            y: 'lat1',
            x1: 'lng2',
            y1: 'lat2'
          }
        })
        .size(1)
        .shape('arc')
        .color('#8C1EB2')
        .style({
          opacity: 0.8,
          blur: 0.99
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 103.83735604457024, 1.360253881403068 ],
    pitch: 4.00000000000001,
    zoom: 10.210275860702593,
    rotation: 19.313180925794313
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/ee07641d-5490-4768-9826-25862e8019e1.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            coordinates: 'path',
            type: 'json'
          }
        })
        .size('level', level => {
          return [ 1.0, level * 1 ];
        })
        .shape('line')
        .color(
          'level',
          [
            '#312B60',
            '#4A457E',
            '#615C99',
            '#816CAD',
            '#A67FB5',
            '#C997C7',
            '#DEB8D4',
            '#F5D4E6',
            '#FAE4F1',
            '#FFF3FC'
          ].slice(0, 8)
        );
      scene.addLayer(layer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 64.88,
    style: 'dark',
    center: [ 114.060288, 22.53684 ],
    zoom: 15.63
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/513add53-dcb2-4295-8860-9e7aa5236699.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data)
        .size(2)
        .color('h8', [
          '#0A3663',
          '#1558AC',
          '#3771D9',
          '#4D89E5',
          '#64A5D3',
          '#72BED6',
          '#83CED6',
          '#A6E1E0',
          '#B8EFE2',
          '#D7F9F0'
        ]);

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 35.210526315789465,
    style: 'dark',
    center: [ 104.288144, 31.239692 ],
    zoom: 4.4
  })
});
console.log('111');
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('cylinder')
        .size('t', function(level) {
          return [ 2, 2, level * 2 + 20 ];
        })
        .animate(true)
        .active(true)
        .color('t', [
          '#094D4A',
          '#146968',
          '#1D7F7E',
          '#289899',
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#CEF8D6'
        ])
      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer, PolygonLayer, RasterLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
        style: 'light',
        center: [121.268, 30.3628],
        zoom: 10
    })
});
scene.on('loaded', async () => {

    const googleurl = 'https://www.google.com/maps/vt?lyrs=s@820&gl=cn&x={x}&y={y}&z={z}';
    const gazafill = await (await fetch('https://mdn.alipayobjects.com/afts/file/A*7h8hS5hqXkcAAAAAAAAAAAAADrd2AQ/gaza.geo.json')).json()
    const gazacity = await (await fetch('https://mdn.alipayobjects.com/afts/file/A*3xTGQ6ZeTIcAAAAAAAAAAAAADrd2AQ/gazacity.json')).json()

    const fillLayer = new PolygonLayer({
        visible: false
    }).source(gazafill).shape('fill').color('red');

    const googleMap = new RasterLayer({
        zIndex: -1,
        maskLayers: [fillLayer],
        zoomOffset: 1,
        updateStrategy: 'overlap',
    }).source(googleurl, {
        parser: {
            type: 'rasterTile',
            tileSize: 256,
        },
    });



    const fillLine = new PolygonLayer({
        autoFit: true
    }).source(gazafill).shape('line').color('red').size(1);
    const cityLayer = new PointLayer().source(gazacity).shape('circle').size(5).color('#027aff').style({ opacity: 1, stroke: '#fff', strokeWidth: 2 });
    const cityLayerName = new PointLayer().source(gazacity).shape('city', 'text').size(12).color('#027aff').style({
        textAnchor: 'top', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
        spacing: 2, // 字符间距
        fontWeight: '800',
        textOffset: [0, 30],
        padding: [1, 1], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
        stroke: '#ffffff', // 描边颜色
        strokeWidth: 2, // 描边宽度
        textAllowOverlap: true
    });
    scene.addLayer(googleMap);
    scene.addLayer(fillLine);
    scene.addLayer(fillLayer);
    scene.addLayer(cityLayer);
    scene.addLayer(cityLayerName);
});
import { Scene, PolygonLayer, LineLayer, LayerPopup, Control, DOM } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const styleElement = document.createElement('style');

// 在<style>元素中添加样式规则
styleElement.textContent = `
            .info {
                padding: 6px 8px;
                font: 14px/16px Arial, Helvetica, sans-serif;
                background: white;
                background: rgba(255,255,255,0.8);
                box-shadow: 0 0 15px rgba(0,0,0,0.2);
                border-radius: 5px;
            }
            .info h4 {
                margin: 0 0 5px;
                color: #777;
            }
              .legend {
                line-height: 18px;
                color: #555;
            }
            .legend i {
                width: 40px;
                height: 20px;
                float: left;
                margin-top: 5px;
                margin-right: 0px;
                opacity: 1;
                color: #000;
                font-weight: bold;
            }
            `;

// 将<style>元素添加到<head>元素中，实现样式注入
document.head.appendChild(styleElement);

const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
        style: 'light',
        center: [116.368652, 39.93866],
        zoom: 0,
        maxZoom: 5,
        token: "6f025e700cbacbb0bb866712d20bb35c"
    })
});
function getColor(d, color) {
    return d > 100000 ? color[4] :
        d > 10000 ? color[3] :
            d > 5000 ? color[2] :
                d > 1000 ? color[1] :
                    d > 0 ? color[0] :
                        'rgba(0,0,0,0)'
}
scene.on('loaded', async () => {
    const data = await (await fetch('https://mdn.alipayobjects.com/afts/file/A*6dU9SL6RD8IAAAAAAAAAAAAADrd2AQ/world_gdp.json')).json();
    const data_line = await (await fetch('https://mdn.alipayobjects.com/afts/file/A*5NgLQrPivBgAAAAAAAAAAAAADrd2AQ/line_2.json')).json();

    const features_1 = data.features.filter(fe => fe.properties.flag === true)
    const features_2 = data.features.filter(fe => fe.properties.flag === false)
    const layer1 = new PolygonLayer({})
        .source({
            "type": "FeatureCollection",
            "features": features_1
        })
        .color(
            'gdp',
            ['#fdd49e', '#fdbb84', '#fc8d59', '#e34a33', '#b30000']
        )
        .shape('fill')
        .scale('gdp', {
            type: 'threshold',
            domain: [0, 1000, 5000, 10000, 100000, 300000],
        })
        .active(false)
        .style({
            opacity: 0.6
        })

    const layer2 = new PolygonLayer({})
        .source({
            "type": "FeatureCollection",
            "features": features_2
        })
        .color(
            'gdp',
            ['#c7e9b4', '#7fcdbb', '#41b6c4', '#2c7fb8', '#253494']
        )
        .shape('fill')
        // .filter('flag',flag=>!falg)
        .scale('gdp', {
            type: 'threshold',
            domain: [0, 1000, 5000, 10000, 100000, 300000],
        })
        .style({
            opacity: 0.6
        })

        .active(false);
    const lineLayer = new LineLayer().source(data_line).filter('type',(t)=>{
        return t === '11' || t === '1'
    }).color('#09f').size(0.6).shape('line').style({
        lineType: 'dash',
        dashArray: [3, 3]
    });

    const lineLayer2 = new LineLayer().source(data_line).filter('type',(t)=>{
        return t === '10'
    }).color('#09f').size(0.6).shape('line').style({
        lineType: 'dash',
        dashArray: [2, 2]
    });

    const lineLayer3 = new LineLayer().source(data_line).filter('type',(t)=>{
        return t === '0' || t === '9' || t ==='7' || t ==='2'
    }).color('type',(t)=>{
        return t === '0' 
        ? 'red' : t === '9' || t === '2' ? '#09f ' : '#fff';
    }).size(0.8).shape('line');

    // const lineLayer4 = new LineLayer().source(data_line).filter('type',(t)=>{
    //     return t === '0'
    // }).color('red').size(1).shape('line').style();
    const layerPopup1 = new LayerPopup({
        items: [
            {
                layer: layer1,
                fields: [
                    {
                        field: 'NAME_CHN',
                        formatField: () => '国家',
                    },
                    {
                        field: 'gdp',
                        formatField: () => 'GDP',
                        formatValue: (val) => {
                            return val < 0.00001 ? `${val * 10000 * 10000}美元` : `${val.toFixed(2)}亿美元`;

                        }
                    },
                    {
                        field: 'industries',
                        formatField: () => '行业',
                        formatValue: (val) => {
                            return val || '';

                        }
                    },
                    {
                        field: 'relations',
                        formatField: () => '关系',
                        formatValue: (val) => {
                            return val || '';

                        }
                    },
                ],
            },
        ],
    });
    const layerPopup2 = new LayerPopup({
        items: [
            {
                layer: layer2,
                fields: [
                    {
                        field: 'NAME_CHN',
                        formatField: () => '国家',
                    },
                    {
                        field: 'gdp',
                        formatField: () => 'GDP',
                        formatValue: (val) => {
                            return val < 0.00001 ? `${val * 10000 * 10000}美元` : `${val.toFixed(2)}亿美元`;

                        }

                    },
                ],
            },
        ],
    });


    scene.addPopup(layerPopup1);
    scene.addPopup(layerPopup2);

    scene.addLayer(layer1);
    scene.addLayer(layer2);
    scene.addLayer(lineLayer);
    scene.addLayer(lineLayer2);
    scene.addLayer(lineLayer3);


    const legend = new Control(
        { position: 'bottomright' }
    )
    // 0, 1000, 5000, 10000, 100000, 300000
    legend.onAdd = () => {
        var div = DOM.create('div', 'info legend'),
            grades = [0, 1000, 5000, 10000, 100000, -999],
            grades2 = [0, '1千', '5千', '1万', '10万', '30万/亿美元'];

        // loop through our density intervals and generate a label with a colored square for each interval



        for (var i = 0; i < grades.length; i++) {
            if (i < grades.length - 1) {
                div.innerHTML += '<i style="background:' + getColor(grades[i] + 1, ['#c7e9b4', '#7fcdbb', '#41b6c4', '#2c7fb8', '#253494']) + '"></i>';
            } else {

                div.innerHTML += '<i style=" width: 100px; margin-left: 10px; background:' + getColor(grades[i] + 1, ['#c7e9b4', '#7fcdbb', '#41b6c4', '#2c7fb8', '#253494']) + '">非一带一路国家</i>';

            }

        }
        div.innerHTML += '<br>'
        for (let i = 0; i < grades.length; i++) {
            if (i < grades.length - 1) {
                div.innerHTML += '<i style="background:' + getColor(grades[i] + 1, ['#fdd49e', '#fdbb84', '#fc8d59', '#e34a33', '#b30000']) + '"></i>';
            }
            else {

                div.innerHTML += '<i style=" width: 100px; margin-left: 10px; background:' + getColor(grades[i] + 1, ['#c7e9b4', '#7fcdbb', '#41b6c4', '#2c7fb8', '#253494']) + '">一带一路国家</i>';

            }
        }
        div.innerHTML += '<br>'

        for (let i = 0; i < grades2.length; i++) {
            if (i < grades.length - 1) {
                div.innerHTML += `<i>${grades2[i]}</>`
            } else {
                div.innerHTML += `<i style=" width: 100px;">${grades2[i]}</>`
            }

        }
        return div;
    }

    scene.addControl(legend)


});
import { Scene, PointLayer, LineLayer, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
        style: 'light',
        center: [60.268, 30.3628],
        zoom: 1.5
    })
});
scene.on('loaded', async () => {
    scene.addImage('local', 'https://gw.alipayobjects.com/zos/rmsportal/xZXhTxbglnuTmZEwqQrE.png');
    const belt = await (await fetch('https://gw.alipayobjects.com/os/rmsportal/UpapMomPYUeiBjbHNAma.json')).json();
    const line = await (await fetch('https://gw.alipayobjects.com/os/rmsportal/kwUdcXnxQtexeGRvTGtA.json')).json();
    const line2 = await (await fetch('https://gw.alipayobjects.com/os/rmsportal/dzpMOiLYBKxpdmsgBLoE.json')).json();
    const point = await (await fetch('https://gw.alipayobjects.com/os/rmsportal/opYqFyDGyGUAUXkLUhBV.json')).json();
    const fillLayer = new PolygonLayer({
        autoFit: false
    }).source(belt).color('cname', function (value) {
        return value == '中国' ? 'rgba(46,149,169,0.45)' : 'rgba(227,244,244,1)';
    }).shape('fill');

    const linelayer = new LineLayer().source(line).color('rgb(79,147,234)').size(1.5).shape('line');

    const linelayer2 = new LineLayer().source(line2).color('rgb(11,94,69)').size(1.5).shape('line').style({
        // 'lineType':'solid'
    })

    const pointlayer = new PointLayer({
    }).source(point).size(12.0).shape('local');

    const textlayer = new PointLayer({
    }).source(point).size(12.0).shape('name', 'text').color('#027aff').style({
        textOffset: [0, -42],
        stroke: '#fff',
        strokeWidth: 2,
        textAnchor: 'bottom', 

    })
    scene.addLayer(fillLayer)
    scene.addLayer(linelayer)
    scene.addLayer(linelayer2)
    scene.addLayer(pointlayer)
    scene.addLayer(textlayer)


});
import { Scene, PointLayer, Source } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.19382669582967, 30.258134 ],
    style: 'dark',
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/87e40417-a5da-4fdb-8313-c796ea15f982.csv')
    .then(res => res.text())
    .then(data => {
      const dataSource = new Source(data, {
        parser: {
          type: 'csv',
          x: 'lng',
          y: 'lat'

        },
        cluster: true
      });
      const pointLayer = new PointLayer({
        autoFit: true
      })
        .source(dataSource)
        .shape('circle')
        .scale('point_count', {
          type: 'quantile'
        })
        .size('point_count', [ 5, 10, 15, 20, 25 ])
        .active(true)
        .color('rgb(73,167,86)')
        .style({
          strokeWidth: 1,
          stroke: '#fff'
        });

      // 聚合图标注
      const pointLayerText = new PointLayer({
        autoFit: false
      })
        .source(dataSource)
        .shape('point_count', 'text')
        .size(15)
        .active(true)
        .color('#fff')
        .style({
          strokeWidth: 0,
          stroke: '#fff'
        });

      scene.addLayer(pointLayer);
      scene.addLayer(pointLayerText);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.19382669582967, 30.258134 ],
    style: 'dark',
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          cluster: true
        })
        .shape('circle')
        .scale('point_count', {
          type: 'quantile'
        })
        .size('point_count', [ 5, 10, 15, 20, 25 ])
        .active(true)
        .color('yellow')
        .style({
          opacity: 0.5,
          strokeWidth: 1
        });

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 121.417463, 31.215175 ],
    zoom: 11
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/BElVQFEFvpAKzddxFZxJ.txt')
    .then(res => res.text())
    .then(data => {
      const pointLayer = new PointLayer({
        blend: 'additive'
      })
        .source(data, {
          parser: {
            type: 'csv',
            y: 'lat',
            x: 'lng'
          }
        })
        .size(0.5)
        .color('#080298');

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 64.88,
    style: 'dark',
    center: [ 114.060288, 22.53684 ],
    zoom: 15.63
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/513add53-dcb2-4295-8860-9e7aa5236699.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data)
        .size(2)
        .color('h8', [
          '#0A3663',
          '#1558AC',
          '#3771D9',
          '#4D89E5',
          '#64A5D3',
          '#72BED6',
          '#83CED6',
          '#A6E1E0',
          '#B8EFE2',
          '#D7F9F0'
        ]);

      scene.addLayer(pointLayer);
    });
});
import { Scene, Marker } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as G2 from '@antv/g2';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [2.6125016864608597, 49.359131],
    zoom: 4.19
  })
});
scene.on('loaded', () => {
  addChart();
  scene.render();
});
function addChart() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/0b96cca4-7e83-449a-93d0-2a77053e74ab.json'
  )
    .then(res => res.json())
    .then(data => {
      data.nodes.forEach(function (item) {
        const el = document.createElement('div');
        const total =
          item.gdp.Agriculture + item.gdp.Industry + item.gdp.Service;

        const size = Math.min(parseInt(total / 30000, 10), 70);
        if (size < 30) {
          return;
        }
        const itemData = [
          {
            item: 'Agriculture',
            count: item.gdp.Agriculture,
            percent: item.gdp.Agriculture / total
          },
          {
            item: 'Industry',
            count: item.gdp.Industry,
            percent: item.gdp.Industry / total
          },
          {
            item: 'Service',
            count: item.gdp.Service,
            percent: item.gdp.Service / total
          }
        ];

        const chart = new G2.Chart({
          container: el,
          width: size,
          height: size,
          render: 'svg',
          padding: 0
        });
        console.log(chart)
        chart.legend(false);
        chart.data(itemData);
        chart.coord('theta', {
          innerRadius: 0.6
        });
        chart.tooltip(false);
        chart
          .interval()
          .adjust('stack')
          .position('percent').color('item', ['#5CCEA1', '#5D7092', '#5B8FF9'])
          .shape('sliceShape')
        chart.render();
        const marker = new Marker({
          element: el
        }).setLnglat({
          lng: item.coordinates[0],
          lat: item.coordinates[1]
        });
        scene.addMarker(marker);
      });
    });
}
import { Scene, CanvasLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
let x = 0;
function draw(option) {
  const { size, ctx, mapService } = option;
  const [ width, height ] = size;

  const radius = 30,
    rectWidth = radius * 2;
  const rectHeight = rectWidth;

  ctx.clearRect(0, 0, width, height);

  const points = [
    {
      lng: 108.544921875,
      lat: 30.977609093348686,
      level: 85,
      color: 'rgba(	220,20,60, 0.6)'
    },
    {
      lng: 110.654296875,
      lat: 31.090574094954192,
      level: 75,
      color: 'rgba(	255,140,0, 0.6)'
    },
    {
      lng: 112.5,
      lat: 29.80251790576445,
      level: 65,
      color: 'rgba(255,165,0, 0.6)'
    },
    {
      lng: 114.78515624999999,
      lat: 30.64867367928756,
      level: 40,
      color: 'rgba(30,144,255, 0.6)'
    },
    {
      lng: 116.49902343749999,
      lat: 29.84064389983441,
      level: 50,
      color: 'rgba(30,144,255, 0.6)'
    },
    {
      lng: 118.21289062499999,
      lat: 31.16580958786196,
      level: 20,
      color: 'rgba(	127,255,0, 0.6)'
    },
    {
      lng: 119.091796875,
      lat: 32.509761735919426,
      level: 50,
      color: 'rgba(30,144,255, 0.6)'
    },
    {
      lng: 121.0693359374999,
      lat: 31.80289258670676,
      level: 45,
      color: 'rgba(30,144,255, 0.6)'
    }
  ];
  ctx.fillStyle = 'rgb(35,75,225)';
  ctx.font = 'normal small-caps bold 14px arial';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';

  points.map(point => {
    const pixelCenter = mapService.lngLatToContainer([ point.lng, point.lat ]);
    pixelCenter.x *= window.devicePixelRatio;
    pixelCenter.y *= window.devicePixelRatio;
    const rectStartX = pixelCenter.x - radius;
    const rectStartY = pixelCenter.y - radius;

    ctx.save();

    ctx.fillText(point.level + '%', pixelCenter.x, pixelCenter.y);

    ctx.beginPath();
    ctx.arc(pixelCenter.x, pixelCenter.y, radius, 0, Math.PI * 2);
    ctx.fillStyle = 'rgba(135,206,250,0.2)';
    ctx.closePath();
    ctx.fill();
    ctx.clip();

    ctx.beginPath();
    ctx.fillStyle = point.color;
    ctx.moveTo(rectStartX, pixelCenter.y);

    const waterheight = rectStartY + ((100 - point.level) / 100) * rectHeight;
    for (let i = 0; i <= rectWidth; i += 10) {
      ctx.lineTo(
        rectStartX + i,
        waterheight + Math.sin(Math.PI * 2 * (i / rectWidth) + x) * 3 + 1
      );
    }

    ctx.lineTo(pixelCenter.x + radius, pixelCenter.y + radius);
    ctx.lineTo(rectStartX, pixelCenter.y + radius);
    ctx.lineTo(rectStartX, pixelCenter.y);
    ctx.closePath();

    ctx.fill();

    ctx.restore();
    return '';
  });
  return '';
}

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'fresh',
    center: [ 115, 31 ],
    zoom: 5.0
  })
});
scene.on('loaded', () => {
  const layer = new CanvasLayer({})
    .style({
      zIndex: 10,
      update: 'always',
      drawingOnCanvas: draw
    })
    .animate({
      enable: true
    });
  scene.addLayer(layer);

  setInterval(() => {
    x += 0.1;
    layer.style({
      drawingOnCanvas: draw
    });
    scene.render();
    return '';
  }, 30);
  return '';
});

import { Scene, CanvasLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'fresh',
    center: [ 90, 31 ],
    zoom: 2
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/337ddbb7-aa3f-4679-ab60-d64359241955.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new CanvasLayer({})
        .style({
          zIndex: 10,
          update: 'dragend',
          drawingOnCanvas: option => {
            const { size, ctx, mapService } = option;
            const [ width, height ] = size;

            ctx.clearRect(0, 0, width, height);
            ctx.fillStyle = 'rgba(0, 200, 0, 0.2)';
            data.features.map(feature => {
              const pixelCenter = mapService.lngLatToContainer(
                feature.geometry.coordinates
              );
              pixelCenter.x *= window.devicePixelRatio;
              pixelCenter.y *= window.devicePixelRatio;
              if (
                pixelCenter.x < 0 ||
                pixelCenter.y < 0 ||
                pixelCenter.x > width ||
                pixelCenter.y > height
              ) { return ''; }
              ctx.beginPath();
              ctx.arc(
                pixelCenter.x,
                pixelCenter.y,
                feature.properties.capacity / 200,
                0,
                Math.PI * 2
              );
              ctx.fill();
              ctx.closePath();
              return '';
            });
            return '';
          }
        });

      scene.addLayer(layer);
      return '';
    });
  return '';
});

import { Scene, Marker } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as G2 from '@antv/g2';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [2.6125016864608597, 49.359131],
    zoom: 4.19,
  }),
});
scene.on('loaded', () => {
  addChart();
  scene.render();
});
function addChart() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/0b96cca4-7e83-449a-93d0-2a77053e74ab.json',
  )
    .then((res) => res.json())
    .then((data) => {
      data.nodes.forEach(function (item) {
        const el = document.createElement('div');
        const total =
          item.gdp.Agriculture + item.gdp.Industry + item.gdp.Service;

        const size = Math.min(parseInt(total / 30000, 10), 70);
        if (size < 30) {
          return;
        }
        const itemData = [
          {
            item: 'Agriculture',
            count: item.gdp.Agriculture,
            percent: item.gdp.Agriculture / total,
          },
          {
            item: 'Industry',
            count: item.gdp.Industry,
            percent: item.gdp.Industry / total,
          },
          {
            item: 'Service',
            count: item.gdp.Service,
            percent: item.gdp.Service / total,
          },
        ];

        const chart = new G2.Chart({
          container: el,
          width: size,
          height: size,
          render: 'svg',
          padding: 0,
        });
        chart.legend(false);
        chart.data(itemData);
        chart.tooltip(false);

        chart.axis('count', false);
        chart.axis('item', false);
        chart
          .interval()
          .position('item*count')
          .color('item', ['#5CCEA1', '#5D7092', '#5B8FF9']);
        chart.render();
        const marker = new Marker({
          element: el,
        }).setLnglat({
          lng: item.coordinates[0],
          lat: item.coordinates[1],
        });
        scene.addMarker(marker);
      });
    });
}
import { Scene, PointLayer, Popup } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 70,
    style: 'dark',
    center: [ 105, 31.847 ],
    rotation: 0,
    zoom: 4.2
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({ depth: false })
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('cylinder')
        .size('t', function(level) {
          return [ 1, 1, level * 2 + 20 ];
        })
        .animate(true)
        .active(true)
        .color('#006CFF')
        .style({
          opacity: 0.8,
          sourceColor: 'red',
          targetColor: 'yellow',
          lightEnable: false
        });
      pointLayer.on('mousemove', e => {
        const popup = new Popup({
          offsets: [ 0, 0 ],
          closeButton: false
        })
          .setLnglat(e.lngLat)
          .setHTML(`<span>${e.feature.s}: ${e.feature.t}℃</span>`);
        scene.addPopup(popup);
      });
      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 66.02383,
    style: 'dark',
    center: [ 121.400257, 31.25287 ],
    zoom: 14.55,
    rotation: 134.95
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude'
          }
        })
        .animate(true)
        .active(true)
        .shape('name', [
          'cylinder',
          'triangleColumn',
          'hexagonColumn',
          'squareColumn'
        ])
        .size('unit_price', h => {
          return [ 6, 6, h / 500 ];
        })
        .color('name', [ '#739DFF', '#61FCBF', '#FFDE74', '#FF896F' ]);

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer, Popup } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 60,
    style: 'dark',
    center: [ 110, 31.847 ],
    rotation: 0,
    zoom: 4
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({ depth: false })
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('cylinder')
        .size('t', function(level) {
          return [ 1, 1, level * 2 + 20 ];
        })
        .active(true)
        .color('#006CFF')
        .style({
          opacity: 0.6,
          opacityLinear: {
            enable: true, // true - false
            dir: 'up' // up - down
          },
          lightEnable: false
        });
      pointLayer.on('mousemove', e => {
        const popup = new Popup({
          offsets: [ 0, 0 ],
          closeButton: false
        })
          .setLnglat(e.lngLat)
          .setHTML(`<span>${e.feature.s}: ${e.feature.t}℃</span>`);
        scene.addPopup(popup);
      });
      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 40,
    style: 'dark',
    center: [ 104.288144, 31.239692 ],
    zoom: 4.4
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('cylinder')
        .size('t', function(level) {
          return [ 2, 2, level * 2 + 20 ];
        })
        .animate(true)
        .active(true)
        .color('t', [
          '#094D4A',
          '#146968',
          '#1D7F7E',
          '#289899',
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#CEF8D6'
        ]);
      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 20,
    style: 'light',
    center: [ 120, 20 ],
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data)
        .shape('simple')
        .size(15)
        .color('mag', mag => {
          return mag > 4.5 ? '#5B8FF9' : '#5CCEA1';
        })
        .active(true)
        .style({
          opacity: 0.6,
          strokeWidth: 3
        });
      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 96.99215001469588, 29.281597225674773 ],
    zoom: 2.194613775109773,
    maxZoom: 10
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/337ddbb7-aa3f-4679-ab60-d64359241955.json'
  )
    .then(res => res.json())
    .then(data => {
      data.features = data.features.filter(item => {
        return item.properties.capacity > 800;
      });
      const pointLayer = new PointLayer({})
        .source(data)
        .shape('circle')
        .size('capacity', [ 0, 16 ])
        .color('capacity', [
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#CEF8D6'
        ])
        .active(true)
        .style({
          opacity: 0.5,
          strokeWidth: 0
        });

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap} from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 121.435159, 31.256971 ],
    zoom: 14.89,
    minZoom: 10
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude'
          }
        })
        .shape('name', [
          'circle',
          'triangle',
          'square',
          'pentagon',
          'hexagon',
          'octogon',
          'hexagram',
          'rhombus',
          'vesica'
        ])
        .size('unit_price', [ 10, 25 ])
        .active(true)
        .color('name', [ '#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452' ])
        .style({
          opacity: 0.3,
          strokeWidth: 2
        });

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 140.067171, 36.26186 ],
    zoom: 5.32,
    maxZoom: 10
  })
});
scene.on('loaded', () => {
  const plane = initPlane();
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data)
        .shape('circle')
        .size('mag', [ 1, 25 ])
        .color('mag', mag => {
          return mag > 4.5 ? '#5B8FF9' : '#5CCEA1';
        })
        .active(true)
        .style({
          opacity: 0.3,
          strokeWidth: 1
        });
      scene.addLayer(pointLayer);
      pointLayer.on('click', e => {
        const { lng, lat } = e.lngLat;
        scene.setCenter([ lng, lat ], {
          padding: {
            right: 120
          }
        });
        plane.style.right = '0px';
        plane.innerHTML = `
          <p>click info</>
          <p>featureId: ${e.featureId}</p>
          <p>lng: ${lng}</p>
          <p>lat: ${lat}</p>
        `;
      });
      pointLayer.on('unclick', () => {
        plane.style.right = '-120px';
        scene.setCenter([ 140.067171, 36.26186 ], {
          padding: {
            right: 0
          }
        });
      });
    });
});

function initPlane() {
  const el = document.createElement('div');
  el.style.background = '#fff';
  el.style.position = 'absolute';
  el.style.padding = '10px';
  el.style.top = '0';
  el.style.right = '-120px';
  el.style.width = '100px';
  el.style.height = '100%';
  el.style.zIndex = '10';
  el.style.transition = '0.5s';
  // el.innerText = '123'
  const wrap = document.getElementById('map');
  wrap.appendChild(el);
  return el;
}
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    version:'2.1.0',
    center: [ 112, 23.69 ],
    zoom: 2.5
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/9078fd36-ce8d-4ee2-91bc-605db8315fdf.csv'
  )
    .then(res => res.text())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'Longitude',
            y: 'Latitude'
          }
        })
        .shape('circle')
        .active(true)
        .animate(true)
        .size(56)
        .color('#4cfd47');

      scene.addLayer(pointLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 116.276227, 35.256776 ],
    zoom: 6
  })
});
scene.addImage(
  'marker',
  'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*BJ6cTpDcuLcAAAAAAAAAAABkARQnAQ'
);
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/e2fc6e0a-af2a-4320-96e5-d9f5a5fda442.json'
  )
    .then(res => res.json())
    .then(data => {
      
      const imageLayer = new PointLayer()
        .source(data)
        .shape('marker')
        .size(12);
      scene.addLayer(imageLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 120.5969, 29.7918 ],
    pitch: 35,
    zoom: 7,
    rotation: 4.183582
  })
});
scene.on('loaded', () => {
  scene.addImage(
    '00',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*kzTMQqS2QdUAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '01',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*jH1XRb7F7hMAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '02',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*YaKSTr3L5i8AAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '04',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*dmniQrDpCYwAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '11',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*YaKSTr3L5i8AAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '15',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*YNlXQYCIzroAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '07',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*DccRTI6ZRLoAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '16',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*iQKoS6I-rO8AAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '06',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*f-wyS7ad5p0AAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '08',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*lHhzQrOW4AQAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '17',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*9Q0QS4GdaYcAAAAAAAAAAABkARQnAQ'
  );
  scene.addImage(
    '05',
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*LyuVRowl6nAAAAAAAAAAAABkARQnAQ'
  );
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/c6042c6b-45fd-4e2e-adf8-fdbf060441e8.json'
  )
    .then(res => res.json())
    .then(data => {
      const imageLayer = new PointLayer()
        .source(data)
        .shape('w', function(w) {
          return w;
        })
        .size(15);
      scene.addLayer(imageLayer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 121.434765, 31.256735 ],
    zoom: 14.83
  })
});
scene.addImage(
  '00',
  'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg'
);
scene.addImage(
  '01',
  'https://gw.alipayobjects.com/zos/basement_prod/30580bc9-506f-4438-8c1a-744e082054ec.svg'
);
scene.addImage(
  '02',
  'https://gw.alipayobjects.com/zos/basement_prod/7aa1f460-9f9f-499f-afdf-13424aa26bbf.svg'
);
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
  )
    .then(res => res.json())
    .then(data => {
      const imageLayer = new PointLayer()
        .source(data, {
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude'
          }
        })
        .shape('name', [ '00', '01', '02' ])
        .size(10);
      const imageLayerText = new PointLayer()
        .source(data, {
          parser: {
            type: 'json',
            x: 'longitude',
            y: 'latitude'
          }
        })
        .shape('name', 'text')
        .color('#f00')
        .size(25)
        .style({
          textOffset:[ 0, 20]
        })
        ;
      scene.addLayer(imageLayer);
      scene.addLayer(imageLayerText);
    });
});
import { Scene, PointLayer, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 105, 35 ],
    zoom: 2.5
  })
});


scene.addImage(
  'arrRed',
  'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*KWGqT6Oz50EAAAAAAAAAAAAAARQnAQ'
);
scene.addImage(
  'arrBlue',
  'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*ZKhURq53OgIAAAAAAAAAAAAAARQnAQ'
);

scene.on('loaded', () => {

  fetch('https://gw.alipayobjects.com/os/bmw-prod/4c02515b-cb7a-47be-93cf-5596731ef982.json')
    .then(res => res.json())
    .then(monsoon => {
      const { data, borderData } = monsoon;
      const imageLayer = new PointLayer(
        
      )
        .source(data)
        .shape('wind', wind => {
          if (wind === 'up') {
            return 'arrBlue';
          }
          return 'arrRed';

        })
        .size(15)
        .style({
          rotation: {
            field:'r',
            value: [ 0, 90, 180, 270 ]
          },
          billboard:false, // 图片图层只有非精灵模式支持旋转
        });
      scene.addLayer(imageLayer);


      const border = new LineLayer()
        .source(borderData)
        .size(1.5)
        .color('#575757')
        .style({
          lineType: 'dash',
          dashArray: [ 5, 5 ]
        });
      scene.addLayer(border);

      const text = new PointLayer({ zIndex: 2 })
        .source([
          { lng: 90, lat: 35, n: '非季风区' },
          { lng: 125, lat: 30, n: '季风区' }
        ], {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('n', 'text')
        .size(25)
        .color('#575757')
        .style({
          spacing: 20
        });

      scene.addLayer(text);
    });


});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120, 30 ],
    zoom: 13
  })
});

const layer = new PointLayer()
  .source(
    [
      {
        lng: 120,
        lat: 30
      }
    ],
    {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat'
      }
    }
  )
  .shape('radar')
  .size(100)
  .color('#d00')
  .style({
    speed: 5
  })
  .animate(true);

scene.on('loaded', () => {
  scene.addLayer(layer);
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 112, 30.267069 ],
    style: 'dark',
    zoom: 6
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/450b2d95-006c-4bad-8269-15729269e142.json')
    .then(res => res.json())
    .then(data => {
      const layer = new PointLayer()
        .source(data, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('circle')
        .color('color')
        .size('value', v => 5 + 15 * v)
        .style({
          stroke: {
            field: 'strokeColor',
          },
          strokeWidth: 1,
          strokeOpacity: 1,
          opacity: {
            field: 'opacity',
          }
        })
        .active(true);
      scene.addLayer(layer);
    });

});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 112, 23.69 ],
    zoom: 2.5
  })
});

fetch(
  'https://gw.alipayobjects.com/os/basement_prod/9078fd36-ce8d-4ee2-91bc-605db8315fdf.csv'
)
  .then(res => res.text())
  .then(data => {
    const pointLayer = new PointLayer({})
      .source(data, {
        parser: {
          type: 'csv',
          x: 'Longitude',
          y: 'Latitude'
        }
      })
      .shape('circle')
      .active(true)
      .animate(true)
      .size(40)
      .color('#ffa842')
      .style({
        offsets: [ 40, 40 ]
      });
    const pointLayer2 = new PointLayer({})
      .source(data, {
        parser: {
          type: 'csv',
          x: 'Longitude',
          y: 'Latitude'
        }
      })
      .shape('circle')
      .active(true)
      .animate(true)
      .size(50)
      .color('#f00');

    scene.addLayer(pointLayer);
    scene.addLayer(pointLayer2);
  });
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 112, 30.267069 ],
    style: 'dark',
    zoom: 3.8
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/450b2d95-006c-4bad-8269-15729269e142.json')
    .then(res => res.json())
    .then(data => {
      const layer = new PointLayer({ blend: 'additive' })
        .source(data, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('circle')
        .color('#f00')
        .size('value', v => 15 + 15 * v)
        .style({
          blur: 2.5,
          opacity: {
            field: 'opacity',
          }
        })
        .active(true);
      scene.addLayer(layer);
    });

});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ -121.24357, 37.58264 ],
    zoom: 6.45
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/6c4bb5f2-850b-419d-afc4-e46032fc9f94.csv'
  )
    .then(res => res.text())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'Longitude',
            y: 'Latitude'
          }
        })
        .shape('circle')
        .size(4)
        .active(true)
        .color('Magnitude', [
          '#0A3663',
          '#1558AC',
          '#3771D9',
          '#4D89E5',
          '#64A5D3',
          '#72BED6',
          '#83CED6',
          '#A6E1E0',
          '#B8EFE2',
          '#D7F9F0'
        ])
        .style({
          opacity: 0.5,
          strokeWidth: 0
        });

      scene.addLayer(pointLayer);
    });
});
import { Scene, PolygonLayer,LineLayer,PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 40,
    center: [ 118.8, 32.056 ],
    zoom: 12.5
  })
});
const fontFamily = 'iconfont';
const fontPath =
  '//at.alicdn.com/t/font_2534097_x6rsov3i1g.woff2?t=1622107341225';
scene.addIconFont('icon', '&#xe69e;');
scene.addFontFace(fontFamily, fontPath);

const colors = [
  '#87CEFA',
  '#00BFFF',

  '#7FFFAA',
  '#00FF7F',
  '#32CD32',

  '#F0E68C',
  '#FFD700',

  '#FF7F50',
  '#FF6347',
  '#FF0000'
];

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/94763191-2816-4c1a-8d0d-8bcf4181056a.json')
    .then(res => res.json())
    .then(data => {

      const filllayer = new PolygonLayer({
        name: 'fill',
        zIndex: 3
      })
        .source(data)
        .shape('fill')
        .color('count', [ '#f2f0f7', '#dadaeb', '#bcbddc', '#9e9ac8', '#756bb1', '#54278f' ])
        .style({
          opacity: 0.6,
          opacityLinear: {
            enable: true,
            dir: 'out' // in - out
          }
        });
      scene.addLayer(filllayer);

      const linelayer = new LineLayer({
        zIndex: 5,
        name: 'line2'
      })
        .source(data)
        .shape('line')
        .size(1)
        .color('#fff')
        .style({
          opacity: 0.3
        });
      scene.addLayer(linelayer);

      const pointLayer = new PointLayer({
        zIndex: 10
      })
        .source(data)
        .shape('icon', 'text')
        .size(25)
        .color('count', t => {
          const c = Number(t.replace('℃', ''));
          return colors[Math.floor(((c - 18) / 16) * 10)];
        })
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ -25, 15 ],
          padding: [ 2, 2 ],
          fontFamily,
          iconfont: true,
          textAllowOverlap: true
        });
      scene.addLayer(pointLayer);

      const tempertureLayer = new PointLayer({
        zIndex: 10
      })
        .source(data)
        .shape('count', 'text')
        .size(12)
        .color('count', t => {
          const c = Number(t.replace('℃', ''));
          return colors[Math.floor(((c - 18) / 16) * 10)];
        })
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 35, 30 ],
          padding: [ 1, 1 ]
        });
      scene.addLayer(tempertureLayer);

    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 110, 30 ],
    style: 'amap://styles/453e2f8e11603fc8f7548fe18959e9e9',
    zoom: 5
  })
});
const fontFamily = 'iconfont';
const fontPath = '//at.alicdn.com/t/font_2534097_fcae9o2mxbv.woff2?t=1622200439140';
scene.addFontFace(fontFamily, fontPath);
scene.addIconFont('icon1', '&#xe6d4;');

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/70408903-80db-4278-a318-461604acb2df.json'
  )
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('icon', 'text')
        .size(20)
        .color('w', [ '#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99' ])
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          padding: [ 0, 0 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          fontFamily,
          iconfont: true,
          textAllowOverlap: true
        });
      scene.addLayer(pointLayer);
    });
});
import { Scene, ImageLayer, PointLayer } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [ 500, 500 ],
    zoom: 3,
    version: 'SIMPLE',
    mapSize: 1000,
    maxZoom: 5,
    minZoom: 2,
    pitchEnabled: false,
    rotateEnabled: false
  })
});
scene.setBgColor('rgb(94, 182, 140)');

const imagelayer = new ImageLayer({}).source(
  'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*I0X5R4jAUQ4AAAAAAAAAAAAAARQnAQ',
  {
    parser: {
      type: 'image',
      extent: [ 360, 400, 640, 600 ]
    }
  }
);

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/7dc0d454-fabc-4461-a5d5-d404dadb49a9.json')
    .then(res => res.json())
    .then(data => {
      const textlayer = new PointLayer({ zIndex: 2 })
        .source(
          data,
          {
            parser: {
              type: 'json',
              x: 'x',
              y: 'y'
            }
          }
        )
        .shape('t', 'text')
        .size(12)
        .active({
          color: '#00f',
          mix: 0.9
        })
        .color('rgb(86, 156, 214)')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          spacing: 2, // 字符间距
          fontWeight: '800',
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          strokeWidth: 2, // 描边宽度
          textAllowOverlap: true
        });
      scene.addLayer(textlayer);
    });

  scene.addLayer(imagelayer);

});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.5, 30.2 ],
    style: 'dark',
    zoom: 7.5,
    zooms: [ 8, 10 ]
  })
});

const fontFamily = 'iconfont';
const fontPath =
  '//at.alicdn.com/t/font_2534097_ao9soua2obv.woff2?t=1622021146076';
scene.addIconFonts([
  [ 'smallRain', '&#xe6f7;' ],
  [ 'middleRain', '&#xe61c;' ],
  [ 'hugeRain', '&#xe6a6;' ],
  [ 'sun', '&#xe6da;' ],
  [ 'cloud', '&#xe8da;' ]
]);
scene.addFontFace(fontFamily, fontPath);
scene.on('loaded', () => {

  fetch('https://gw.alipayobjects.com/os/bmw-prod/f7d083e2-ad55-44fd-b324-15e1b549948a.json')
    .then(res => res.json())
    .then(data => {
      const pointIconFontLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('iconType', 'text')
        .size(30)
        .color('red')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          // textOffset: 'textOffset', // 文本相对锚点的偏移量 [水平, 垂直]
          fontFamily,
          iconfont: true,
          textAllowOverlap: true
        });
      scene.addLayer(pointIconFontLayer);

      const textLayer = new PointLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('weather', 'text')
        .size(16)
        .color('#fff')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 0, 0 ], // 文本相对锚点的偏移量 [水平, 垂直]
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          fontFamily: 'Times New Roman',
          textAllowOverlap: true
        });
      scene.addLayer(textLayer);
    });

});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 110, 36 ],
    style: 'dark',
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/oVTMqfzuuRFKiDwhPSFL.json')
    .then(res => res.json())
    .then(data => {
      const pointLayer = new PointLayer({})
        .source(data.list, {
          parser: {
            type: 'json',
            x: 'j',
            y: 'w'
          }
        })
        .shape('m', 'text')
        .size(12)
        .color('#084081')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 0, 0 ], // 文本相对锚点的偏移量 [水平, 垂直]
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          strokeWidth: 2, // 描边宽度
          strokeOpacity: 1.0,
          // rotation: 60, // 常量旋转
          rotation:{ // 字段映射旋转
            field: 't',
            value:[30,270]
          }

        });

      scene.addLayer(pointLayer);
    });

});
import { Scene, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ -96, 37.8 ],
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d36ad90e-3902-4742-b8a2-d93f7e5dafa2.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new PolygonLayer({})
        .source(data)
        .color('blue')
        .shape('name', 'text')
        .size(18)
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 0, 0 ], // 文本相对锚点的偏移量 [水平, 垂直]
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          strokeWidth: 0.3, // 描边宽度
          strokeOpacity: 1.0
        });
      scene.addLayer(layer);
    });
});
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.5, 30.2 ],
    style: 'dark',
    zoom: 8.5,
    zooms: [ 8, 10 ]
  })
});
const fontFamily = 'iconfont';
const fontPath = '//at.alicdn.com/t/font_2534097_ao9soua2obv.woff2?t=1622021146076';
scene.addFontFace(fontFamily, fontPath);
scene.addIconFonts([
  [ 'smallRain', '&#xe6f7;' ],
  [ 'middleRain', '&#xe61c;' ],
  [ 'hugeRain', '&#xe6a6;' ],
  [ 'sun', '&#xe6da;' ],
  [ 'cloud', '&#xe8da;' ]
]);

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/9eb3f1b5-0c3b-49b2-8221-191d4ba8aa5e.json')
    .then(res => res.json())
    .then(originData => {
      const layer = new PointLayer()
        .source(originData, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('circle')
        .color('backgoundColor')
        .size(42);
      scene.addLayer(layer);

      const pointIconFontLayer = new PointLayer({})
        .source(originData, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        }
        )
        .shape('iconType', 'text')
        .size(30)
        .color('iconColor')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ -10, 10 ], // 文本相对锚点的偏移量 [水平, 垂直]
          fontFamily,
          iconfont: true,
          textAllowOverlap: true
        });
      scene.addLayer(pointIconFontLayer);

      const textLayer = new PointLayer({})
        .source(originData,
          {
            parser: {
              type: 'json',
              x: 'lng',
              y: 'lat'
            }
          }
        )
        .shape('temperature', 'text')
        .size(10)
        .color('#ffffff')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 5, -55 ], // 文本相对锚点的偏移量 [水平, 垂直]
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          strokeWidth: 0.3, // 描边宽度
          strokeOpacity: 1.0,
          fontFamily: 'Times New Roman',
          textAllowOverlap: true
        });
      scene.addLayer(textLayer);

      const textLayer2 = new PointLayer({})
        .source(originData,
          {
            parser: {
              type: 'json',
              x: 'lng',
              y: 'lat'
            }
          }
        )
        .shape('weather', 'text')
        .size(14)
        .color('#ffffff')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          textOffset: [ 5, -15 ], // 文本相对锚点的偏移量 [水平, 垂直]
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#ffffff', // 描边颜色
          strokeWidth: 0.3, // 描边宽度
          strokeOpacity: 1.0,
          fontFamily: 'Times New Roman',
          textAllowOverlap: true
        });
      scene.addLayer(textLayer2);
    });


});
import { Scene, WindLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 90, 32.24997445586331 ],
    style: 'dark',
    zoom: 2
  })
});

scene.on('loaded', () => {
  const layer = new WindLayer({});
  layer
    .source(
      'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*wcU8S5xMEDYAAAAAAAAAAAAAARQnAQ',
      {
        parser: {
          type: 'image',
          extent: [ -180, -85, 180, 85 ]
        }
      }
    )
    .animate(true)
    .style({
      uMin: -21.32,
      uMax: 26.8,
      vMin: -21.57,
      vMax: 21.42,
      numParticles: 35535,
      fadeOpacity: 0.996,
      sizeScale: 1.2,
      rampColors: {
        0.0: '#3288bd',
        0.1: '#66c2a5',
        0.2: '#abdda4',
        0.3: '#e6f598',
        0.4: '#fee08b',
        0.5: '#fdae61',
        0.6: '#f46d43',
        1.0: '#d53e4f'
      }
    });
  scene.addLayer(layer);
});
import { Scene, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 114.050008, 22.529272 ],
    zoom: 14.1
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/972566c5-a2b9-4a7e-8da1-bae9d0eb0117.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new PolygonLayer({})
        .source(data)
        .shape('extrude')
        .size('h20', [ 100, 120, 160, 200, 260, 500 ])
        .color('h20', [
          '#816CAD',
          '#A67FB5',
          '#C997C7',
          '#DEB8D4',
          '#F5D4E6',
          '#FAE4F1',
          '#FFF3FC'
        ]);
      scene.addLayer(layer);
    });
});
import { Scene, PolygonLayer, LineLayer, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 120, 29.732983 ],
    zoom: 6.2,
    pitch: 60
  })
});
scene.on('loaded', () => {
  let lineDown,
    lineUp,
    textLayer;

  fetch('https://gw.alipayobjects.com/os/bmw-prod/ecd1aaac-44c0-4232-b66c-c0ced76d5c7d.json')
    .then(res => res.json())
    .then(data => {
      const texts = [];

      data.features.map(option => {
        const { name, center } = option.properties;
        const [ lng, lat ] = center;
        texts.push({ name, lng, lat });
        return '';
      });

      textLayer = new PointLayer({ zIndex: 2 })
        .source(texts, {
          parser: {
            type: 'json',
            x: 'lng',
            y: 'lat'
          }
        })
        .shape('name', 'text')
        .size(14)
        .color('#0ff')
        .style({
          textAnchor: 'center', // 文本相对锚点的位置 center|left|right|top|bottom|top-left
          spacing: 2, // 字符间距
          padding: [ 1, 1 ], // 文本包围盒 padding [水平，垂直]，影响碰撞检测结果，避免相邻文本靠的太近
          stroke: '#0ff', // 描边颜色
          strokeWidth: 0.2, // 描边宽度
          raisingHeight: 200000 + 150000 + 10000,
          textAllowOverlap: true
        });
      scene.addLayer(textLayer);

      lineDown = new LineLayer()
        .source(data)
        .shape('line')
        .color('#0DCCFF')
        .size(1)
        .style({
          raisingHeight: 200000
        });

      lineUp = new LineLayer({ zIndex: 1 })
        .source(data)
        .shape('line')
        .color('#0DCCFF')
        .size(1)
        .style({
          raisingHeight: 200000 + 150000
        });

      scene.addLayer(lineDown);
      scene.addLayer(lineUp);
      return '';
    });

  fetch('https://gw.alipayobjects.com/os/bmw-prod/d434cac3-124e-4922-8eed-ccde01674cd3.json')
    .then(res => res.json())
    .then(data => {
      const lineLayer = new LineLayer()
        .source(data)
        .shape('wall')
        .size(150000)
        .style({
          heightfixed: true,
          opacity: 0.6,
          sourceColor: '#0DCCFF',
          targetColor: 'rbga(255,255,255, 0)'
        });
      scene.addLayer(lineLayer);

      const provincelayer = new PolygonLayer({})
        .source(data)
        .size(150000)
        .shape('extrude')
        .color('#0DCCFF')
        .active({
          color: 'rgb(100,230,255)'
        })
        .style({
          heightfixed: true,
          pickLight: true,
          raisingHeight: 200000,
          opacity: 0.8
        });

      scene.addLayer(provincelayer);

      provincelayer.on('mousemove', () => {
        provincelayer.style({
          raisingHeight: 200000 + 100000
        });
        lineDown.style({
          raisingHeight: 200000 + 100000
        });
        lineUp.style({
          raisingHeight: 200000 + 150000 + 100000
        });
        textLayer.style({
          raisingHeight: 200000 + 150000 + 10000 + 100000
        });
      });

      provincelayer.on('unmousemove', () => {
        provincelayer.style({
          raisingHeight: 200000
        });
        lineDown.style({
          raisingHeight: 200000
        });
        lineUp.style({
          raisingHeight: 200000 + 150000
        });
        textLayer.style({
          raisingHeight: 200000 + 150000 + 10000
        });
      });
      return '';
    });
  return '';
});
import { Scene, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 50,
    center: [ 118.8, 32.056 ],
    zoom: 10
  })
});
const colors = [
  '#87CEFA',
  '#00BFFF',

  '#7FFFAA',
  '#00FF7F',
  '#32CD32',

  '#F0E68C',
  '#FFD700',

  '#FF7F50',
  '#FF6347',
  '#FF0000'
];
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/94763191-2816-4c1a-8d0d-8bcf4181056a.json'
  )
    .then(res => res.json())
    .then(data => {
      const filllayer = new PolygonLayer({
        name: 'fill',
        zIndex: 3
      })
        .source(data)
        .shape('extrude')
        .color('unit_price', colors)
        .size('unit_price', unit_price => unit_price * 50)
        .style({
          opacity: {
            field: 'unit_price',
            value:[ 0, 1 ]
          }
        })
        .active(true);
      scene.addLayer(filllayer);
    });
});
import { Scene, PolygonLayer } from '@antv/l7';
import { Mapbox } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Mapbox({
    style: 'dark',
    center: [120, 29.732983],
    zoom: 6.2,
    pitch: 60,
    token:"pk.eyJ1IjoiZmFrZXVzZXJnaXRodWIiLCJhIjoiY2pwOGlneGI4MDNnaDN1c2J0eW5zb2ZiNyJ9.mALv0tCpbYUPtzT7YysA2g"
  }),
});

scene.on('loaded', () => {

  fetch('https://mdn.alipayobjects.com/afts/file/A*CGKZTL6s_ywAAAAAAAAAAAAADrd2AQ/indoor-3d-map.json')
    .then((res) => res.json())
    .then((data) => {
      

      const provincelayerSide = new PolygonLayer({
          autoFit: true,
      })
        .source(data)
        .size('height')
        .shape('extrusion')
        .color('color')
        .style({
          extrusionBase:{
            field:'base_height',
          },
          opacity: 1.0,
        });
      scene.addLayer(provincelayerSide);

    });
});import { Scene, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ -44.40673828125, -18.375379094031825 ],
    zoom: 13
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/67130c6c-7f49-4680-915c-54e69730861d.json'
  )
    .then(data => data.json())
    .then(({ lakeData }) => {
      const lakeLayer = new PolygonLayer({ autoFit: true })
        .source(lakeData)
        .shape('water')
        .color('#1E90FF')
        .style({
          speed: 0.4
          // waterTexture: 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*EojwT4VzSiYAAAAAAAAAAAAAARQnAQ'
        })
        .animate(true);

      scene.addLayer(lakeLayer);
    });
});
import { Scene, PolygonLayer, LineLayer, Popup } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ -96, 37.8 ],
    zoom: 3
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d36ad90e-3902-4742-b8a2-d93f7e5dafa2.json'
  )
    .then(res => res.json())
    .then(data => {
      const color = [ 'rgb(255,255,217)', 'rgb(237,248,177)', 'rgb(199,233,180)', 'rgb(127,205,187)', 'rgb(65,182,196)', 'rgb(29,145,192)', 'rgb(34,94,168)', 'rgb(12,44,132)' ];
      const layer = new PolygonLayer({})
        .source(data)
        .scale('density', {
          type: 'quantile'
        })
        .color(
          'density', color
        )
        .shape('fill')
        .active(true);
      const layer2 = new LineLayer({
        zIndex: 2
      })
        .source(data)
        .color('#fff')
        .active(true)
        .size(1)
        .style({
          lineType: 'dash',
          dashArray: [ 2, 2 ],
        });
      scene.addLayer(layer);
      scene.addLayer(layer2);

      layer.on('mousemove', e => {
        const popup = new Popup({
          offsets: [ 0, 0 ],
          closeButton: false
        })
          .setLnglat(e.lngLat)
          .setHTML(`<span>${e.feature.properties.name}: ${e.feature.properties.density}</span>`);
        scene.addPopup(popup);
      });
    });
});
import { Scene, PolygonLayer, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 116.368652, 39.93866 ],
    zoom: 10.07
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/1d27c363-af3a-469e-ab5b-7a7e1ce4f311.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new PolygonLayer({})
        .source(data)
        .color(
          'unit_price',
          [
            '#1A4397',
            '#2555B7',
            '#3165D1',
            '#467BE8',
            '#6296FE',
            '#7EA6F9',
            '#98B7F7',
            '#BDD0F8',
            '#DDE6F7',
            '#F2F5FC'
          ].reverse()
        )
        .shape('fill')
        .active(true);
      const layer2 = new LineLayer({
        zIndex: 2
      })
        .source(data)
        .color('#fff')
        .size(0.8);

      scene.addLayer(layer);
      scene.addLayer(layer2);
    });
});
import { Scene, PolygonLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ -44.40673828125, -18.375379094031825 ],
    zoom: 13
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/67130c6c-7f49-4680-915c-54e69730861d.json'
  )
    .then(data => data.json())
    .then(({ lakeData }) => {
      const lakeLayer = new PolygonLayer({ autoFit: true })
        .source(lakeData)
        .shape('ocean')
        .color('#1E90FF')
        .style({
          watercolor: '#6D99A8'
          // watercolor: '#0f0',
        })
        .animate(true);

      scene.addLayer(lakeLayer);
    });
});
import * as G2 from '@antv/g2';
import { GaodeMap, LayerPopup, PointLayer, Scene } from '@antv/l7';

const data: any[] = [
  {
    lng: 120.132235,
    lat: 30.250868,
    value: 34.71314604052238,
    name: '坐标点1',
  },
  {
    lng: 120.156236,
    lat: 30.260268,
    value: 96.807880210153,
    name: '坐标点2',
  },
  {
    lng: 120.163014,
    lat: 30.251297,
    value: 29.615472482876815,
    name: '坐标点3',
  },
  {
    lng: 120.15394,
    lat: 30.231489,
    value: 49.90316258911784,
    name: '坐标点4',
  },
  {
    lng: 120.154596,
    lat: 30.24065,
    value: 45.788587061188466,
    name: '坐标点5',
  },
  {
    lng: 120.150223,
    lat: 30.235078,
    value: 29.741111717098544,
    name: '坐标点6',
  },
  {
    lng: 120.143992,
    lat: 30.229411,
    value: 40.241555782182935,
    name: '坐标点7',
  },
  {
    lng: 120.136995,
    lat: 30.237439,
    value: 86.5369792415296,
    name: '坐标点8',
  },
];

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
  logoVisible: false,
});
scene.on('loaded', () => {
  const pointLayer = new PointLayer({});
  pointLayer
    .source(data, {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat',
      },
    })
    .color('value', ['#FFCCC6', '#CF1421'])
    .size(10)
    .shape('circle');
  scene.addLayer(pointLayer);

  const div = document.createElement('div');
  const chart = new G2.Chart({
    container: div,
    autoFit: true,
    width: 200,
    height: 200,
  });
  // 新建一个 view 用来单独渲染Annotation
  chart.coordinate('theta', {
    radius: 0.75,
    innerRadius: 0.5,
  });

  chart.scale('percent', {
    formatter: (val) => {
      val = val * 100 + '%';
      return val;
    },
  });

  chart.tooltip(false);

  // 声明需要进行自定义图例字段： 'item'
  chart.legend(false);

  chart
    .interval()
    .adjust('stack')
    .position('percent')
    .color('item', ['#5B8FF9', '#797979'])
    .style({
      fillOpacity: 1,
    });

  const layerPopup = new LayerPopup({
    items: [
      {
        layer: pointLayer,
        customContent: (e) => {
          const otherValue = 100 - e.value;
          chart.data([
            { item: '值', count: e.value, percent: e.value / 100 },
            { item: '', count: otherValue, percent: otherValue / 100 },
          ]);
          chart.render();
          return div;
        },
      },
    ],
  });

  scene.addPopup(layerPopup);
});
// @ts-ignore
import { PointLayer, Scene, Popup } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

async function initMap() {
    const response = await fetch(
        'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json',
    );
    const scene = new Scene({
        id: 'map',
        map: new GaodeMap({
            center: [121.4, 31.258134],
            zoom: 12,
            pitch: 0,
            style: 'normal',
        }),
    });
    scene.addImage(
        '00',
        'https://gw.alipayobjects.com/mdn/rms_fcd5b3/afts/img/A*g8cUQ7pPT9YAAAAAAAAAAAAAARQnAQ',
    );
    scene.addImage(
        '01',
        'https://gw.alipayobjects.com/mdn/rms_fcd5b3/afts/img/A*LTcXTLBM7kYAAAAAAAAAAAAAARQnAQ',
    );
    scene.addImage(
        '02',
        'https://gw.alipayobjects.com/zos/bmw-prod/904d047a-16a5-461b-a921-98fa537fc04a.svg',
    );
    const data = await response.json();
    const newData = data.map((item: any) => {
        item.type = ['00', '01', '02'][Math.floor(Math.random() * 3)];
        return item;
    });
    const imageLayer = new PointLayer({
    })
        .source(newData, {
            parser: {
                type: 'json',
                x: 'longitude',
                y: 'latitude',
            },
        })
        .shape('type', (v: any) => {
            return v;
        })
        .active(false)
        .size(20);
    scene.addLayer(imageLayer);
    imageLayer.on('mousedown', (e) => {
        console.log('mousedown', e);
    });
    const popup = new Popup({
    });

    scene.addPopup(popup);
    imageLayer.on('click', (e) => {
        console.log(e)
        const { lng, lat } = e.lngLat

        popup.setOptions({
            title: e.feature.name,
            html: e.feature.name,
            lngLat: {
                lng,
                lat,
            },
        });

    });
}

initMap();import { Scene, GaodeMap, Popup } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
  logoVisible: false,
});
scene.on('loaded', () => {
  const popup = new Popup({
    title: '自定义标题',
    html: '<p>Popup 示例的自定义内容</p>',
    lngLat: {
      lng: 120.154672,
      lat: 30.241095,
    },
  });

  scene.addPopup(popup);
});
import { Scene, GaodeMap, LayerPopup, PointLayer } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
  logoVisible: false,
});
scene.on('loaded', () => {
  const pointLayer = new PointLayer({});
  pointLayer
    .source(
      [
        {
          lng: 120.132235,
          lat: 30.250868,
          value: 34.71314604052238,
          name: '坐标点1',
        },
        {
          lng: 120.156236,
          lat: 30.260268,
          value: 96.807880210153,
          name: '坐标点2',
        },
        {
          lng: 120.163014,
          lat: 30.251297,
          value: 29.615472482876815,
          name: '坐标点3',
        },
        {
          lng: 120.15394,
          lat: 30.231489,
          value: 49.90316258911784,
          name: '坐标点4',
        },
        {
          lng: 120.154596,
          lat: 30.24065,
          value: 45.788587061188466,
          name: '坐标点5',
        },
        {
          lng: 120.150223,
          lat: 30.235078,
          value: 29.741111717098544,
          name: '坐标点6',
        },
        {
          lng: 120.143992,
          lat: 30.229411,
          value: 40.241555782182935,
          name: '坐标点7',
        },
        {
          lng: 120.136995,
          lat: 30.237439,
          value: 86.5369792415296,
          name: '坐标点8',
        },
      ],
      {
        parser: {
          type: 'json',
          x: 'lng',
          y: 'lat',
        },
      },
    )
    .color('value', ['#FFCCC6', '#CF1421'])
    .size(10)
    .shape('circle');
  scene.addLayer(pointLayer);
  const layerPopup = new LayerPopup({
    items: [
      {
        layer: pointLayer,
        fields: [
          {
            field: 'name',
            formatField: () => '名称',
          },
          {
            field: 'value',
            formatField: () => '权值',
            formatValue: (val) => val.toFixed(2),
          },
          'lng',
          'lat',
        ],
      },
    ],
  });

  scene.addPopup(layerPopup);
});
import { Scene, Marker } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 105.790327, 36.495636 ],
    zoom: 4
  })
});
scene.on('loaded', () => {
  addMarkers();
  scene.render();
});
function addMarkers() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/67f47049-8787-45fc-acfe-e19924afe032.json'
  )
    .then(res => res.json())
    .then(nodes => {
      for (let i = 0; i < nodes.length; i++) {
        if (nodes[i].g !== '1' || nodes[i].v === '') {
          continue;
        }
       
        const marker = new Marker().setLnglat({ lng: nodes[i].x * 1, lat: nodes[i].y });
        scene.addMarker(marker);
      }
    });
}

import { Scene, Marker, MarkerLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 105.790327, 30 ],
    zoom: 2
  })
});
scene.on('loaded', () => {
  addMarkers();
  scene.render();
});
function addMarkers() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json'
  )
    .then(res => res.json())
    .then(nodes => {
      const markerLayer = new MarkerLayer({
        cluster: true
      });
      for (let i = 0; i < nodes.features.length; i++) {
        const { coordinates } = nodes.features[i].geometry;
        const marker = new Marker().setLnglat({
          lng: coordinates[0],
          lat: coordinates[1]
        });
        markerLayer.addMarker(marker);
      }
      scene.addMarkerLayer(markerLayer);
    });
}
import { Scene, Marker } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 105.790327, 36.495636 ],
    zoom: 4
  })
});
scene.on('loaded', () => {
  addMarkers();
  scene.render();
});
function addMarkers() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/67f47049-8787-45fc-acfe-e19924afe032.json'
  )
    .then(res => res.json())
    .then(nodes => {
      for (let i = 0; i < nodes.length; i++) {
        if (nodes[i].g !== '1' || nodes[i].v === '') {
          continue;
        }
        const el = document.createElement('label');
        el.className = 'labelclass';
        el.textContent = nodes[i].v + '℃';
        el.style.background = getColor(nodes[i].v);
        el.style.borderColor = getColor(nodes[i].v);
        const marker = new Marker({
          element: el
        }).setLnglat({ lng: nodes[i].x * 1, lat: nodes[i].y });
        scene.addMarker(marker);
      }
    });
}

function getColor(v) {
  return v > 50
    ? '#800026'
    : v > 40
      ? '#BD0026'
      : v > 30
        ? '#E31A1C'
        : v > 20
          ? '#FC4E2A'
          : v > 10
            ? '#FD8D3C'
            : v > 5
              ? '#FEB24C'
              : v > 0
                ? '#FED976'
                : '#FFEDA0';
}
import { Scene, Marker, MarkerLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 105.790327, 36.495636 ],
    zoom: 4
  })
});
scene.on('loaded', () => {
  addMarkers();
  scene.render();
});
function addMarkers() {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/67f47049-8787-45fc-acfe-e19924afe032.json'
  )
    .then(res => res.json())
    .then(nodes => {
      const markerLayer = new MarkerLayer();
      for (let i = 0; i < nodes.length; i++) {
        if (nodes[i].g !== '1' || nodes[i].v === '') {
          continue;
        }
        const el = document.createElement('label');
        el.className = 'labelclass';
        el.textContent = nodes[i].v + '℃';
        el.style.background = getColor(nodes[i].v);
        el.style.borderColor = getColor(nodes[i].v);
        const marker = new Marker({
          element: el
        }).setLnglat({ lng: nodes[i].x * 1, lat: nodes[i].y });
        markerLayer.addMarker(marker);
      }
      scene.addMarkerLayer(markerLayer);
    });
}

function getColor(v) {
  const colors = [ '#ffffe5', '#f7fcb9', '#d9f0a3', '#addd8e', '#78c679', '#41ab5d', '#238443', '#005a32' ];
  return v > 50
    ? colors[7]
    : v > 40
      ? colors[6]
      : v > 30
        ? colors[5]
        : v > 20
          ? colors[4]
          : v > 10
            ? colors[3]
            : v > 5
              ? colors[2]
              : v > 0
                ? colors[1]
                : colors[0];
}
import { Scene, GaodeMap, GeoLocate } from '@antv/l7';
import gcoord from 'gcoord';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const geoLocate = new GeoLocate({
    transform: (position) => {
      // 将获取到基于 WGS84 地理坐标系 的坐标转成 GCJ02 坐标系
      return gcoord.transform(position, gcoord.WGS84, gcoord.GCJ02);
    },
  });
  scene.addControl(geoLocate);
});
import { Scene, GaodeMap, Scale } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
  logoVisible: false,
});
scene.on('loaded', () => {
  const scale = new Scale();
  scene.addControl(scale);
});
import { Scene, GaodeMap, ExportImage, PolygonLayer } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
    WebGLParams: {
      preserveDrawingBuffer: true,
    },
  }),
});
scene.on('loaded', () => {
  const polygonLayer = new PolygonLayer({});
  polygonLayer
    .source({
      type: 'FeatureCollection',
      features: [
        {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'Polygon',
            coordinates: [
              [
                [120.143575, 30.239811],
                [120.143575, 30.247856],
                [120.151213, 30.247856],
                [120.151213, 30.239811],
                [120.143575, 30.239811],
              ],
            ],
          },
        },
      ],
    })
    .color('#ff0000')
    .style({
      opacity: 0.5,
    });
  scene.addLayer(polygonLayer);
  const exportImage = new ExportImage({
    onExport: (base64) => {
      alert(base64);
    },
  });
  scene.addControl(exportImage);
});
import { Scene, GaodeMap, Fullscreen } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const fullscreen = new Fullscreen();
  scene.addControl(fullscreen);
});
import {
  Scene,
  GaodeMap,
  PolygonLayer,
  LayerSwitch,
  LineLayer,
} from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const polygonLayer = new PolygonLayer({
    name: '填充图层',
  });
  polygonLayer
    .source({
      type: 'FeatureCollection',
      features: [
        {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'Polygon',
            coordinates: [
              [
                [120.143575, 30.239811],
                [120.143575, 30.247856],
                [120.151213, 30.247856],
                [120.151213, 30.239811],
                [120.143575, 30.239811],
              ],
            ],
          },
        },
      ],
    })
    .color('#ff0000')
    .style({
      opacity: 0.5,
    });
  scene.addLayer(polygonLayer);

  const lineLayer = new LineLayer({
    name: '边框图层',
  });
  lineLayer
    .source({
      type: 'FeatureCollection',
      features: [
        {
          type: 'Feature',
          properties: {},
          geometry: {
            type: 'Polygon',
            coordinates: [
              [
                [120.143575, 30.239811],
                [120.143575, 30.247856],
                [120.151213, 30.247856],
                [120.151213, 30.239811],
                [120.143575, 30.239811],
              ],
            ],
          },
        },
      ],
    })
    .color('#700000')
    .size(2);
  scene.addLayer(lineLayer);

  const layerSwitch = new LayerSwitch({
    layers: [polygonLayer, lineLayer],
  });
  scene.addControl(layerSwitch);
});
import { Scene, GaodeMap, Logo } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
  // 关闭默认 L7 Logo
  logoVisible: false,
});
scene.on('loaded', () => {
  const logo = new Logo();
  scene.addControl(logo);
});
import { Scene, GaodeMap, MouseLocation } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const mouseLocation = new MouseLocation({
    position: 'bottomright',
  });
  scene.addControl(mouseLocation);
});
import { Scene, GaodeMap, MapTheme } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const mapTheme = new MapTheme();
  scene.addControl(mapTheme);
});
import { Scene, GaodeMap, Zoom } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const zoom = new Zoom();
  scene.addControl(zoom);
});
import { GaodeMap, LayerSwitch, RasterLayer, Scene } from '@antv/l7';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 0,
    style: 'normal',
    center: [120.154672, 30.241095],
    zoom: 12,
  }),
});
scene.on('loaded', () => {
  const url1 =
    'https://gac-geo.googlecnapps.cn/maps/vt?lyrs=s&gl=CN&x={x}&y={y}&z={z}';
  const rasterLayer1 = new RasterLayer({
    zIndex: 1,
  }).source(url1, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      zoomOffset: 0,
    },
  });

  const url2 =
    'https://gac-geo.googlecnapps.cn/maps/vt?lyrs=h&gl=CN&x={x}&y={y}&z={z}';
  const rasterLayer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      zoomOffset: 0,
    },
  });

  scene.addLayer(rasterLayer1);
  scene.addLayer(rasterLayer2);

  const layerSwitch = new LayerSwitch({
    layers: [
      {
        layer: rasterLayer1,
        name: '遥感影像图层',
        img: 'https://mdn.alipayobjects.com/huamei_k6sfo0/afts/img/A*fG9HQpyNuv0AAAAAAAAAAAAADjWqAQ/original',
      },
      {
        layer: rasterLayer2,
        name: '文字标注图层',
        img: 'https://mdn.alipayobjects.com/huamei_k6sfo0/afts/img/A*CP5pQY_8Q_YAAAAAAAAAAAAADjWqAQ/original',
      },
    ],
  });
  scene.addControl(layerSwitch);
});
// @ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [113.270854, 23.141717],
    zoom: 5,
  }),
});

const url1 =
  'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const url2 =
  'https://tiles{1-3}.geovisearth.com/base/v1/cia/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
  },
});

const layer2 = new RasterLayer({
  zIndex: 1,
}).source(url2, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
  },
});

scene.on('loaded', () => {
  scene.addLayer(layer1);
  scene.addLayer(layer2);
});
import { Scene, RasterLayer,TileDebugLayer } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [ 90.268, 40.3628 ],
    minZoom:2,
    zoom: 3
  })
});

scene.on('loaded', () => {
  const layer = new RasterLayer();
  layer.source(
    'https://webrd0{1-3}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',
    {
      parser: {
        type: 'rasterTile',
        tileSize: 256,
        minZoom: 2,
        maxZoom: 18,
      }
    }
  );
  scene.addLayer(layer);
  // 显示瓦片信息
  const debugerLayer = new TileDebugLayer();
  scene.addLayer(debugerLayer);
});
import { Scene, RasterLayer } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [ 90.268, 40.3628 ],
    zoom: 3
  })
});

scene.on('loaded', () => {
  const layer = new RasterLayer();
  layer.source(
    'https://webrd0{1-3}.is.autonavi.com/appmaptile?lang=zh_cn&size=1&scale=1&style=8&x={x}&y={y}&z={z}',
    {
      parser: {
        type: 'rasterTile',
        tileSize: 256,
        minZoom: 2,
        maxZoom: 18,
      }
    }
  );
  scene.addLayer(layer);
});
// @ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [114.061677, 22.54899],
    zoom: 11,
  }),
});
const url1 =
  'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const url2 =
  'https://tiles{1-3}.geovisearth.com/base/v1/cia/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
  },
});

const layer2 = new RasterLayer({
  zIndex: 1,
}).source(url2, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
  },
});
// WMS 底图 BBOX获取数据
const url =
  'https://pnr.sz.gov.cn/d-suplicmap/dynamap_1/rest/services/LAND_CERTAIN/MapServer/export?F=image&FORMAT=PNG32&TRANSPARENT=true&layers=show:1&SIZE=256,256&BBOX={bbox}&BBOXSR=4326&IMAGESR=3857&DPI=90';

const layer = new RasterLayer({
  zIndex: 3,
}).source(url, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
    zoomOffset: 0,
  },
});

scene.on('loaded', () => {
  scene.addLayer(layer1);
  scene.addLayer(layer2);
  scene.addLayer(layer);

});
// @ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [113.270854, 23.141717],
    zoom: 11,
  }),
});

const url1 =
  'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';
const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
    wmtsOptions: {
      layer: 'img',
      tileMatrixset: 'w',
      format: 'tiles',
    },
  },
});



scene.on('loaded', () => {
  scene.addLayer(layer1);
});
//@ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
//@ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130, 30],
    pitch: 0,
    zoom: 1.5,
  }),
});
scene.on('loaded', () => {
  const layer = new RasterLayer()
    .source(
      'https://tiles{1-3}.geovisearth.com/base/v1/terrain_rgb/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
      {
        parser: {
          type: 'rasterTile',
          dataType: 'terrainRGB',
          tileSize: 256,
          zoomOffset: 0,
        },
      },
    )
    .style({
      clampLow: false,
      clampHigh: false,
      domain: [0, 7000],
      rampColors: {
        colors: ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91cf60', '#1a9850'],
        positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
      }
    });

  scene.addLayer(layer);
});

import { Scene, RasterLayer } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [ 90.268, 40.3628 ],
    zoom: 3
  })
});

scene.on('loaded', () => {
  // 影像底图服务
  const baseLayer = new RasterLayer({
    zIndex: 1
  });
  baseLayer.source(
    'https://webst0{1-4}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',
    {
      parser: {
        type: 'rasterTile',
        tileSize: 256,
        // minZoom: 6,
        // maxZoom: 15,
        zoomOffset: 0
        // extent: [-180, -85.051129, 179, 85.051129],
      }
    }
  );

  // 影像注记服务
  const annotionLayer = new RasterLayer({
    zIndex: 2
  });
  annotionLayer.source(
    'https://webst0{1-3}.is.autonavi.com/appmaptile?style=8&x={x}&y={y}&z={z}',
    {
      parser: {
        type: 'rasterTile',
        tileSize: 256,
        // minZoom: 6,
        // maxZoom: 15,
        zoomOffset: 0
        // extent: [-180, -85.051129, 179, 85.051129],
      }
    }
  );

  scene.addLayer(baseLayer);
  scene.addLayer(annotionLayer);
});
// @ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [113.270854, 23.141717],
    zoom: 5,
  }),
});

const url1 =
  'https://tiles{1-3}.geovisearth.com/base/v1/vec/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';

const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
    zoomOffset: 0,
  },
});

scene.on('loaded', () => {
  scene.addLayer(layer1);
});
// @ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [113.270854, 23.141717],
    zoom: 5,
  }),
});

const url1 =
  'https://tiles{1-3}.geovisearth.com/base/v1/ter/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const url2 =
  'https://tiles{1-3}.geovisearth.com/base/v1/cat/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788';
const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
    zoomOffset: 0,
  },
});

const layer2 = new RasterLayer({
  zIndex: 1,
}).source(url2, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
    zoomOffset: 0,
  },
});
scene.addLayer(layer1);
scene.addLayer(layer2);
import { Scene, RasterLayer } from '@antv/l7';
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [ 120, 30 ],
    zoom: 6.5
  })
});

scene.on('loaded', () => {

  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/ecd1aaac-44c0-4232-b66c-c0ced76d5c7d.json'
  )
    .then(res => res.json())
    .then(data => {
      // 影像底图服务
      const baseLayer = new RasterLayer({
        zIndex: 1,
        mask: true,
        maskfence: data
      });
      baseLayer.source(
        'https://webst0{1-3}.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}',
        {
          parser: {
            type: 'rasterTile',
            tileSize: 256,
            zoomOffset: 0
          }
        }
      );

      scene.addLayer(baseLayer);
    });


  // 影像注记服务
  const annotionLayer = new RasterLayer({
    zIndex: 2
  });
  annotionLayer.source(
    'https://webst0{1-3}.is.autonavi.com/appmaptile?style=8&x={x}&y={y}&z={z}',
    {
      parser: {
        type: 'rasterTile',
        tileSize: 256,
      }
    }
  );


  scene.addLayer(annotionLayer);
});
// @ts-ignore
import { Scene, RasterLayer, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [112, 30],
    // zoom: 12,
    zoom: 3,
  }),
});

const mask = new PolygonLayer({
  sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
}).source(
  'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
  {
    parser: {
      type: 'mvt',
      tileSize: 256,
      maxZoom: 9,
    },
  },
).shape('fill');

const layer = new RasterLayer({
  zIndex: 1,
  maskLayers: [mask],
}).source(
  'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
  {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
    },
  },
);

scene.on('loaded', () => {
  scene.addLayer(mask);
  scene.addLayer(layer);
});
import { Scene, RasterLayer, Source } from '@antv/l7';
import { Map } from '@antv/l7-maps';
import * as Lerc from 'lerc';

const colorList = [ '#fff7fb', '#ece7f2', '#d0d1e6', '#a6bddb', '#74a9cf', '#3690c0', '#0570b0', '#045a8d', '#023858' ];
const positions = [ 0, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 1.0 ];
const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [ 90.268, 35.3628 ],
    zoom: 3
  })
});

scene.on('loaded', () => {
  const layer = new RasterLayer();
  const tileSource = new Source('https://elevation3d.arcgis.com/arcgis/rest/services/WorldElevation3D/Terrain3D/ImageServer/tile/{z}/{y}/{x}',
    {
      parser: {
        type: 'rasterTile',
        dataType: 'arraybuffer',
        tileSize: 256,
        format: async data => {
          const image = Lerc.decode(data);
          return {
            rasterData: image.pixels[0],
            width: image.width,
            height: image.height
          };
        }
      }
    });

  layer.source(tileSource)
    .style({
      domain: [ 0, 1024 ],
      clampLow: true,
      rampColors: {
        colors: colorList,
        positions
      }
    });

  scene.addLayer(layer);
  return '';
});

const wrap = document.getElementById('map');
const legend = document.createElement('div');

const data = [];
for (let i = 0; i < colorList.length; i++) {
  data.push({
    color: colorList[i],
    text: positions[i]
  });
}
const strArr = [];
data.map(({ color, text }) => {
  strArr.push(`  <div style="display:inline-block;background:#fff;padding:5px;">
  <div style="fontSize:12px;lineHeight:12px;">
    ${text}
  </div>
  <div style="width: 30px;height:8px; background: ${color};"></div>
  </div>`);
  return '';
});
legend.innerHTML = strArr.join('');
legend.style.position = 'absolute';
legend.style.left = '10px';
legend.style.bottom = '30px';
legend.style.background = '#fff';
legend.style.zIndex = 10;

wrap.appendChild(legend);
import { Scene, RasterLayer, PolygonLayer, Source } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';

const colorList = [
  '#419bdf', // Water

  '#358221', // Tree

  '#88b053', // Grass


  '#7a87c6', // vegetation


  '#e49635', // Crops


  '#dfc35a', // shrub


  '#ED022A', // Built Area


  '#EDE9E4', // Bare ground
 

  '#F2FAFF', // Snow

  '#C8C8C8', // Clouds
];
const positions = [
  1,2,3,4,5,6,7,8,9,10,11,
];

const scene = new Scene({
  id: 'map',
 
  map: new GaodeMap({
    center: [ 116, 27 ],
    zoom: 6,
    style: 'dark'
  })
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/fccd80c0-2611-49f9-9a9f-e2a4dd12226f.json'
  )
    .then(res => res.json())
    .then(maskData => {
      const maskPolygon = new PolygonLayer({
        visible: false,// 隐藏maskPolygon
        
      }).source(maskData)
      .shape('fill')
      .color('#f00')
      .style({
        opacity: 0.5
      });
      const layer = new RasterLayer({
        maskLayers:[maskPolygon]
      });

      const tileSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',
        {
          parser: {
            type: 'rasterTile',
            dataType: 'arraybuffer',
            tileSize: 256,
            maxZoom: 13.1,
            format: async data => {
              const tiff = await GeoTIFF.fromArrayBuffer(data);
              const image = await tiff.getImage();
              const width = image.getWidth();
              const height = image.getHeight();
              const values = await image.readRasters();
              return { rasterData: values[0], width, height };
            }
          }
        });

      layer.source(tileSource)
        .style({
          domain: [ 0, 255],// 枚举类型domain 必须为0-255
          clampLow: false,
          rampColors: {
            type:'cat',
            colors: colorList,
            positions
          }
        });

      scene.addLayer(layer);
      scene.addLayer(maskPolygon);
      return '';
    });
  return '';
});

const wrap = document.getElementById('map');
const legend = document.createElement('div');

const data = [];
for (let i = 0; i < colorList.length; i += 1) {
  data.push({
    color: colorList[i],
    text: [
      'Water',
      'Trees',
      'Grass',
      'Vegetation',
      'Crops',
      'Shrub',
      'Built Area',
      'Bare ground',
      'Snow',
      'Clouds'
    ][i]
  });
}
const strArr = [];
data.map(({ color, text }) => {
  strArr.push(`  <div style="display:inline-block;background:#fff:padding:5px;">
  <div style="fontSize:12px;lineHeight:12px;color: #fff">
    ${text}
  </div>
  <div style="height:8px; background: ${color};"></div>
  </div>`);
  return '';
});
legend.innerHTML = strArr.join('');
legend.style.position = 'absolute';
legend.style.left = '10px';
legend.style.bottom = '30px';
legend.style.zIndex = 10;

wrap.appendChild(legend);

//@ts-ignore
import { Scene, RasterLayer } from '@antv/l7';
//@ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130, 30],
    pitch: 0,
    zoom: 1.5,
  }),
});
scene.on('loaded', () => {
  const layer = new RasterLayer()
    .source(
      'https://tiles{1-3}.geovisearth.com/base/v1/terrain_rgb/{z}/{x}/{y}?format=png&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
      {
        parser: {
          type: 'rasterTile',
          dataType: 'terrainRGB',
          tileSize: 256,
          zoomOffset: 0,
        },
      },
    )
    .style({
      clampLow: false,
      clampHigh: false,
      domain: [0, 7000],
      rampColors: {
        colors: ['#d73027', '#fc8d59', '#fee08b', '#d9ef8b', '#91cf60', '#1a9850'],
        positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
      }
    });

  scene.addLayer(layer);
});

// @ts-ignore
import { Scene, LineLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new GaodeMap({
    style:"light",
    center: [112, 30],
    zoom: 6,
  }),
});

const layer = new LineLayer({
  featureId: 'COLOR',
  sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
});
layer
  .source(
    'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
      parser: {
        type: 'mvt',
        tileSize: 256,
        zoomOffset: 0,
        maxZoom: 9,
      },
    },
  )
  .shape('simple')
  .color('COLOR')
  .size(1)
  .select(true);
scene.on('loaded', () => {
  scene.addLayer(layer);
});
export const data = [{ "name": "美国", "qz": "82404" }, { "name": "格陵兰（丹）", "qz": "18" }, { "name": "中国", "qz": "79404" }, { "name": "意大利", "qz": "80539" }, { "name": "西班牙", "qz": "56188" }, { "name": "德国", "qz": "36508" }, { "name": "伊朗", "qz": "29406" }, { "name": "法国", "qz": "29155" }, { "name": "英国", "qz": "11658" }, { "name": "韩国", "qz": "9232" }, { "name": "瑞士", "qz": "8789" }, { "name": "荷兰", "qz": "7431" }, { "name": "比利时", "qz": "6235" }, { "name": "奥地利", "qz": "5888" }, { "name": "土耳其", "qz": "3629" }, { "name": "加拿大", "qz": "3409" }, { "name": "葡萄牙", "qz": "2995" }, { "name": "挪威", "qz": "2916" }, { "name": "澳大利亚", "qz": "2799" }, { "name": "瑞典", "qz": "2510" }, { "name": "巴西", "qz": "2433" }, { "name": "以色列", "qz": "2369" }, { "name": "马来西亚", "qz": "2031" }, { "name": "爱尔兰", "qz": "1819" }, { "name": "丹麦", "qz": "1724" }, { "name": "捷克", "qz": "1654" }, { "name": "卢森堡", "qz": "1453" }, { "name": "日本", "qz": "1313" }, { "name": "厄瓜多尔", "qz": "1211" }, { "name": "智利", "qz": "1142" }, { "name": "巴基斯坦", "qz": "1057" }, { "name": "波兰", "qz": "1051" }, { "name": "泰国", "qz": "1045" }, { "name": "罗马尼亚", "qz": "906" }, { "name": "沙特阿拉伯", "qz": "900" }, { "name": "印度尼西亚", "qz": "893" }, { "name": "芬兰", "qz": "880" }, { "name": "俄罗斯", "qz": "840" }, { "name": "希腊", "qz": "821" }, { "name": "冰岛", "qz": "737" }, { "name": "钻石公主号邮轮", "qz": "712" }, { "name": "南非", "qz": "709" }, { "name": "印度", "qz": "694" }, { "name": "菲律宾", "qz": "636" }, { "name": "新加坡", "qz": "631" }, { "name": "巴拿马", "qz": "558" }, { "name": "卡塔尔", "qz": "537" }, { "name": "斯洛文尼亚", "qz": "528" }, { "name": "阿根廷", "qz": "502" }, { "name": "秘鲁", "qz": "480" }, { "name": "墨西哥", "qz": "478" }, { "name": "哥伦比亚", "qz": "470" }, { "name": "埃及", "qz": "456" }, { "name": "巴林", "qz": "419" }, { "name": "克罗地亚", "qz": "418" }, { "name": "爱沙尼亚", "qz": "404" }, { "name": "多米尼加共和国", "qz": "392" }, { "name": "塞尔维亚", "qz": "384" }, { "name": "黎巴嫩", "qz": "368" }, { "name": "伊拉克", "qz": "346" }, { "name": "阿拉伯联合酋长国", "qz": "333" }, { "name": "亚美尼亚", "qz": "290" }, { "name": "立陶宛", "qz": "290" }, { "name": "新西兰", "qz": "262" }, { "name": "匈牙利", "qz": "261" }, { "name": "阿尔及利亚", "qz": "246" }, { "name": "保加利亚", "qz": "242" }, { "name": "摩洛哥", "qz": "225" }, { "name": "拉脱维亚", "qz": "221" }, { "name": "乌拉圭", "qz": "217" }, { "name": "斯洛伐克", "qz": "216" }, { "name": "安道尔共和国", "qz": "213" }, { "name": "圣马力诺", "qz": "208" }, { "name": "科威特", "qz": "208" }, { "name": "哥斯达黎加", "qz": "201" }, { "name": "北马其顿共和国", "qz": "177" }, { "name": "阿尔巴尼亚", "qz": "174" }, { "name": "波斯尼亚和黑塞哥维那", "qz": "173" }, { "name": "突尼斯", "qz": "173" }, { "name": "约旦", "qz": "172" }, { "name": "乌克兰", "qz": "156" }, { "name": "摩尔多瓦", "qz": "149" }, { "name": "布基纳法索", "qz": "146" }, { "name": "越南", "qz": "141" }, { "name": "塞浦路斯", "qz": "132" }, { "name": "法罗群岛", "qz": "132" }, { "name": "马耳他", "qz": "129" }, { "name": "文莱", "qz": "109" }, { "name": "委内瑞拉", "qz": "107" }, { "name": "塞内加尔", "qz": "105" }, { "name": "斯里兰卡", "qz": "102" }, { "name": "阿曼", "qz": "99" }, { "name": "柬埔寨", "qz": "98" }, { "name": "哈萨克斯坦", "qz": "97" }, { "name": "阿塞拜疆", "qz": "93" }, { "name": "白俄罗斯", "qz": "86" }, { "name": "留尼汪岛", "qz": "83" }, { "name": "阿富汗", "qz": "80" }, { "name": "科特迪瓦", "qz": "80" }, { "name": "格鲁吉亚", "qz": "77" }, { "name": "瓜德罗普", "qz": "76" }, { "name": "喀麦隆", "qz": "72" }, { "name": "科索沃地区", "qz": "71" }, { "name": "加纳", "qz": "68" }, { "name": "马提尼克", "qz": "66" }, { "name": "乌兹别克斯坦", "qz": "65" }, { "name": "巴勒斯坦", "qz": "64" }, { "name": "特立尼达和多巴哥", "qz": "60" }, { "name": "古巴", "qz": "57" }, { "name": "黑山", "qz": "52" }, { "name": "洪都拉斯", "qz": "52" }, { "name": "波多黎各", "qz": "51" }, { "name": "刚果（金）", "qz": "51" }, { "name": "列支敦士登", "qz": "51" }, { "name": "毛里求斯", "qz": "47" }, { "name": "尼日利亚", "qz": "46" }, { "name": "吉尔吉斯斯坦", "qz": "44" }, { "name": "巴拉圭", "qz": "41" }, { "name": "卢旺达", "qz": "41" }, { "name": "玻利维亚", "qz": "39" }, { "name": "孟加拉国", "qz": "39" }, { "name": "关岛", "qz": "37" }, { "name": "马约特岛", "qz": "35" }, { "name": "肯尼亚", "qz": "31" }, { "name": "根西岛", "qz": "30" }, { "name": "法属圭亚那", "qz": "28" }, { "name": "牙买加", "qz": "26" }, { "name": "直布罗陀", "qz": "26" }, { "name": "法属玻利尼西亚", "qz": "25" }, { "name": "危地马拉", "qz": "24" }, { "name": "多哥", "qz": "23" }, { "name": "马恩岛", "qz": "23" }, { "name": "摩纳哥", "qz": "23" }, { "name": "阿鲁巴岛", "qz": "19" }, { "name": "马达加斯加", "qz": "19" }, { "name": "巴巴多斯", "qz": "18" }, { "name": "泽西岛", "qz": "18" }, { "name": "美属维尔京群岛", "qz": "17" }, { "name": "新喀里多尼亚", "qz": "14" }, { "name": "乌干达", "qz": "14" }, { "name": "马尔代夫", "qz": "13" }, { "name": "坦桑尼亚", "qz": "13" }, { "name": "萨尔瓦多", "qz": "13" }, { "name": "吉布提", "qz": "12" }, { "name": "埃塞俄比亚", "qz": "12" }, { "name": "赤道几内亚", "qz": "11" }, { "name": "法属圣马丁岛", "qz": "11" }, { "name": "蒙古", "qz": "10" }, { "name": "海地", "qz": "8" }, { "name": "开曼群岛", "qz": "8" }, { "name": "塞舌尔", "qz": "7" }, { "name": "百慕大群岛", "qz": "7" }, { "name": "苏里南", "qz": "7" }, { "name": "加蓬", "qz": "6" }, { "name": "库拉索", "qz": "6" }, { "name": "圭亚那", "qz": "5" }, { "name": "叙利亚", "qz": "5" }, { "name": "格林兰岛", "qz": "5" }, { "name": "中非共和国", "qz": "5" }, { "name": "莫桑比克", "qz": "5" }, { "name": "斐济", "qz": "5" }, { "name": "贝宁", "qz": "5" }, { "name": "纳米比亚", "qz": "5" }, { "name": "巴哈马", "qz": "5" }, { "name": "缅甸", "qz": "5" }, { "name": "几内亚", "qz": "5" }, { "name": "史瓦帝尼", "qz": "4" }, { "name": "斯威士兰", "qz": "4" }, { "name": "厄立特里亚", "qz": "4" }, { "name": "梵蒂冈", "qz": "4" }, { "name": "刚果（布）", "qz": "4" }, { "name": "尼日尔", "qz": "4" }, { "name": "老挝", "qz": "3" }, { "name": "安提瓜和巴布达", "qz": "3" }, { "name": "圣卢西亚", "qz": "3" }, { "name": "圣巴泰勒米岛", "qz": "3" }, { "name": "尼泊尔", "qz": "3" }, { "name": "乍得", "qz": "3" }, { "name": "苏丹", "qz": "3" }, { "name": "利比里亚", "qz": "3" }, { "name": "佛得角", "qz": "3" }, { "name": "赞比亚", "qz": "3" }, { "name": "毛里塔尼亚", "qz": "2" }, { "name": "索马里", "qz": "2" }, { "name": "尼加拉瓜", "qz": "2" }, { "name": "马里", "qz": "2" }, { "name": "几内亚比绍", "qz": "2" }, { "name": "多米尼克", "qz": "2" }, { "name": "圣基茨和尼維斯", "qz": "2" }, { "name": "蒙特塞拉特", "qz": "2" }, { "name": "冈比亚", "qz": "2" }, { "name": "伯利兹", "qz": "2" }, { "name": "安哥拉", "qz": "2" }, { "name": "津巴布韦", "qz": "2" }, { "name": "不丹", "qz": "2" }, { "name": "荷属圣马丁", "qz": "2" }, { "name": "圣文森特和格林纳丁斯", "qz": "1" }, { "name": "东帝汶", "qz": "1" }, { "name": "格林纳达", "qz": "1" }, { "name": "特克斯和凯科斯群岛", "qz": "1" }, { "name": "利比亚", "qz": "1" }, { "name": "巴布亚新几内亚", "qz": "1" }];// @ts-ignore
import {
  Scene,
  Source,
  PolygonLayer,
  PointLayer,
  LineLayer,
} from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const colors = {};
const GDPSpeed = {
  '520000': 10, //贵州
  '540000': 10, //西藏
  '530000': 8.5, //云南
  '500000': 8.5, //重庆
  '360000': 8.5, //江西
  '340000': 8.0, //安徽
  '510000': 7.5, //四川
  '350000': 8.5, //福建
  '430000': 8.0, //湖南
  '420000': 7.5, //湖北
  '410000': 7.5, //河南
  '330000': 7.0, //浙江
  '640000': 7.5, //宁夏
  '650000': 7.0, //新疆
  '440000': 7.0, //广东
  '370000': 7.0, //山东
  '450000': 7.3, //广西
  '630000': 7.0, //青海
  '320000': 7.0, //江苏
  '140000': 6.5, //山西
  '460000': 7, // 海南
  '310000': 6.5, //上海
  '110000': 6.5, // 北京
  '130000': 6.5, // 河北
  '230000': 6, // 黑龙江
  '220000': 6, // 吉林
  '210000': 6.5, //辽宁
  '150000': 6.5, //内蒙古
  '120000': 5, // 天津
  '620000': 6, // 甘肃
  '610000': 8.5, // 甘肃
  '710000': 6.64, //台湾
  '810000': 6.0, //香港
  '820000': 6.7, //澳门
};
const getColorByDGP = function (adcode) {
  if (!colors[adcode]) {
    const gdp = GDPSpeed[adcode];
    if (!gdp) {
      colors[adcode] = 'rgb(227,227,227)';
    } else {
      const rg = 255 - Math.floor(((gdp - 5) / 5) * 255);
      colors[adcode] = 'rgb(' + rg + ',' + rg + ',255)';
    }
  }
  return colors[adcode];
};

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [112, 30],

    // zoom: 12,
    zoom: 3,
  }),
});

const url =
  'https://mvt.amap.com/district/CHN2/{z}/{x}/{y}/4096?key=309f07ac6bc48160e80b480ae511e1e9&version=';
const source = new Source(url, {
  parser: {
    type: 'mvt',
    tileSize: 256,
    warp: false,
  },
});

scene.on('loaded', () => {
  // 绿地
  const fill = new PolygonLayer({
    sourceLayer: 'CHN_Cities',
  })
    .source(source)
    .shape('fill')
    .color('adcode_pro', getColorByDGP);

  const line = new LineLayer({
    sourceLayer: 'CHN_Cities_L',
  })
    .source(source)
    .shape('line')
    .color('#FFA500');

  const line2 = new LineLayer({
    sourceLayer: 'CHN_L',
  })
    .source(source)
    .shape('line')
    .size(0.6)
    .color('#053061');

  const text = new PointLayer({
    sourceLayer: 'CHN_Cities',
    blend: 'normal',
  })
    .source(source)
    .shape('id', 'text')
    .size(12)
    .color('#000');
  scene.addLayer(fill);
  scene.addLayer(line);
  scene.addLayer(line2);
  scene.addLayer(text);
});
// @ts-ignore
import { Scene, PointLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [112, 30],
    zoom: 3,
  }),
});

const layer = new PointLayer({
  featureId: 'COLOR',
  sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
  blend: 'normal',
});
layer
  .source(
    'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
      parser: {
        type: 'mvt',
        tileSize: 256,
        zoomOffset: 0,
        maxZoom: 9,
        extent: [-180, -85.051129, 179, 85.051129],
      },
    },
  )
  .shape('COLOR', 'text')
  .color('COLOR')
  // .color('#000')
  .size(10)
  .select(true);

scene.on('loaded', () => {
  scene.addLayer(layer);
});
// @ts-ignore
import { Scene, TileDebugLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMapV2 } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new GaodeMapV2({
    center: [120, 30],
    // zoom: 12,
    zoom: 12,
  }),
});

const debugerLayer = new TileDebugLayer();
scene.addLayer(debugerLayer);
 
// @ts-ignore
import { Scene, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [121.268, 30.3628],
    pitch: 0,
    zoom: 4,
  }),
});

fetch(
  'https://gw.alipayobjects.com/os/bmw-prod/2b7aae6e-5f40-437f-8047-100e9a0d2808.json',
)
  .then((d) => d.json())
  .then((data) => {
    const source = new Source(data, {
      parser: {
        type: 'geojsonvt',
        tileSize: 256,
        zoomOffset: 0,
        maxZoom: 9,
        // extent: [-180, -85.051129, 179, 85.051129],
      },
    });

    const polygon = new PolygonLayer({
      featureId: 'COLOR',
    })
      .source(source)
      .color('COLOR')
      .shape('fill')
      // .active(true)
      // .select(true)
      .style({
        opacity: 0.6,
      });
    scene.addLayer(polygon);

  });
// @ts-ignore
import { Scene, PointLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [112, 30],
    zoom: 3,
    style:'normal'
  }),
});

const layer = new PointLayer({
  featureId: 'COLOR',
  sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
});
layer
  .source(
    'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
      parser: {
        type: 'mvt',
        tileSize: 256,
        zoomOffset: 0,
        maxZoom: 9,
        extent: [-180, -85.051129, 179, 85.051129],
      },
    },
  )
  .shape('circle')
  .color('COLOR')
  .size(10);
// .select(true);

scene.on('loaded', () => {
  scene.addLayer(layer);
});
// @ts-ignore
import {
  Scene,
  Source,
  PolygonLayer,
  RasterLayer,
  LineLayer,
  PointLayer,
} from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [-95.7548387434569, 44.82687715672517],
    zoom: 9,
  }),
});

const url1 =
  'https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}.webp?sku=101ifSAcKcVFs&access_token=pk.eyJ1IjoidW5mb2xkZWRpbmMiLCJhIjoiY2s5ZG90MjMzMDV6eDNkbnh2cDJvbHl4NyJ9.BT2LAvHi31vNNEplsgxucQ';
const layer1 = new RasterLayer({
  zIndex: 1,
}).source(url1, {
  parser: {
    type: 'rasterTile',
    tileSize: 256,
  },
});

const source = new Source(
  'https://cdn.unfolded.ai/indigo/hexify_v5/{z}/{x}/{y}.pbf',
  {
    parser: {
      type: 'mvt',
      tileSize: 256,
      // minZoom: 9,
    },
  },
);

const layer = new LineLayer({
  featureId: 'id',
  zIndex: 3,
  minZoom: 9,
  sourceLayer: 'state_s10_27', // woods hillshade contour ecoregions ecoregions2 city
})
  .source(source)
  .shape('simple')
  .color('#000')
  .size(0.3)
  .style({
    opacity: 1,
  });

const layer2 = new PolygonLayer({
  featureId: 'id',
  zIndex: 2,
  minZoom: 9,
  sourceLayer: 'state_s10_27', // woods hillshade contour ecoregions ecoregions2 city
})
  .source(source)
  .shape('fill')
  .scale('croptype', {
    type: 'quantize',
    domain: [0, 4],
  })
  .color('croptype', [
    '#C1C9CC',
    '#DFB02F',
    '#7F8120',
    '#DCD0A4',
    '#AD5633',
  ])
  .style({
    opacity: 1,
  });

const layer3 = new PointLayer({
  featureId: 'id',
  zIndex: 2,
  maxZoom: 9,
  mask: true,
  sourceLayer: 'parcel_pointgeojsonl', // woods hillshade contour ecoregions ecoregions2 city
})
  .source(source)
  .shape('hexagon')
  .size(2)
  .scale('croptype', {
    type: 'quantize',
    domain: [0, 4],
  })
  .color('croptype', [
    '#C1C9CC',
    '#DFB02F',
    '#7F8120',
    '#DCD0A4',
    '#AD5633',
  ])
  .style({
    opacity: 1,
  });

scene.on('loaded', () => {
  scene.addLayer(layer);
  scene.addLayer(layer1);
  scene.addLayer(layer2);
  scene.addLayer(layer3);
});
// @ts-ignore
import { Scene, PolygonLayer, PointLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new GaodeMap({
    center: [112, 30],
    zoom: 3,
  }),
});

const layer = new PolygonLayer({
  featureId: 'COLOR',
  sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
});
layer
  .source(
    'https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
      parser: {
        type: 'mvt',
        tileSize: 256,
        maxZoom: 9,
        extent: [-180, -85.051129, 179, 85.051129],
      },
    },
  )
  // .shape('line')
  .color('COLOR')
  // .active(true)
  .size(10)
  .select(true)

  .style({
    // opacity: 0.3
  });

const point = new PointLayer({ zIndex: 1 })
  .source(
    [
      {
        lng: 120,
        lat: 30,
      },
    ],
    {
      parser: {
        type: 'json',
        x: 'lng',
        y: 'lat',
      },
    },
  )
  .shape('circle')
  .size(40)
  .active(true)
  .color('#f00');

scene.on('loaded', () => {
  scene.addLayer(layer);

  setTimeout(() => {
    point.setData([
      {
        lng: 123,
        lat: 30,
      },
    ]);

    point.color('#ff0');
    scene.render();
    console.log('update');
  }, 3000);
  // layer.on('inited', () => {
  //   console.log(
  //     'layer.getLayerConfig().enableHighlight',
  //     layer.getLayerConfig().enableHighlight,
  //   );
  // });

  layer.on('click', (e) => {
    console.log('click');
    console.log(e);
  });

  scene.addLayer(point);
});
// @ts-ignore
import { Scene, Source, PolygonLayer, LineLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
 
  map: new Map({
    zoom: 4.5,
    center: [116.412427, 39.303573],
  }),
});

const url =
  'https://mvt.amap.com/district/CHN3/{z}/{x}/{y}/4096?key=309f07ac6bc48160e80b480ae511e1e9&version=';
const source = new Source(url, {
  parser: {
    type: 'mvt',
    tileSize: 256,
    warp: false,
  },
});

scene.on('loaded', () => {
  const colors = {};
  const getColorByAdcode = function (adcode) {
    if (!colors[adcode]) {
      const gb = Math.floor(Math.random() * 155 + 50);
      colors[adcode] = 'rgb(' + gb + ',' + gb + ',255)';
    }

    return colors[adcode];
  };
  // 绿地
  const fill = new PolygonLayer({
    sourceLayer: 'CHN_Districts',
  })
    .source(source)
    .shape('fill')
    .color('adcode', getColorByAdcode);

  const line = new LineLayer({
    sourceLayer: 'CHN_Districts_L',
  })
    .source(source)
    .shape('simple')
    .color('#fee0d2');

  const line2 = new LineLayer({
    sourceLayer: 'CHN_Citys_L',
  })
    .source(source)
    .shape('line')
    .size(0.6)
    .color('#fc9272');

  const line3 = new LineLayer({
    sourceLayer: 'CHN_Provinces_L',
  })
    .source(source)
    .shape('line')
    .size(0.6)
    .color('#de2d26');

  scene.addLayer(fill);
  scene.addLayer(line);
  scene.addLayer(line2);
  scene.addLayer(line3);
  //   scene.addLayer(line2);
  // const debugerLayer = new TileDebugLayer({ usage: 'basemap' });
  // scene.addLayer(debugerLayer);
});
// @ts-ignore
import {
  Scene,
  Source,
  PolygonLayer,
  LineLayer,
  PointLayer
} from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

const data = [{ "name": "美国", "qz": "82404" }, { "name": "格陵兰（丹）", "qz": "18" }, { "name": "中国", "qz": "79404" }, { "name": "意大利", "qz": "80539" }, { "name": "西班牙", "qz": "56188" }, { "name": "德国", "qz": "36508" }, { "name": "伊朗", "qz": "29406" }, { "name": "法国", "qz": "29155" }, { "name": "英国", "qz": "11658" }, { "name": "韩国", "qz": "9232" }, { "name": "瑞士", "qz": "8789" }, { "name": "荷兰", "qz": "7431" }, { "name": "比利时", "qz": "6235" }, { "name": "奥地利", "qz": "5888" }, { "name": "土耳其", "qz": "3629" }, { "name": "加拿大", "qz": "3409" }, { "name": "葡萄牙", "qz": "2995" }, { "name": "挪威", "qz": "2916" }, { "name": "澳大利亚", "qz": "2799" }, { "name": "瑞典", "qz": "2510" }, { "name": "巴西", "qz": "2433" }, { "name": "以色列", "qz": "2369" }, { "name": "马来西亚", "qz": "2031" }, { "name": "爱尔兰", "qz": "1819" }, { "name": "丹麦", "qz": "1724" }, { "name": "捷克", "qz": "1654" }, { "name": "卢森堡", "qz": "1453" }, { "name": "日本", "qz": "1313" }, { "name": "厄瓜多尔", "qz": "1211" }, { "name": "智利", "qz": "1142" }, { "name": "巴基斯坦", "qz": "1057" }, { "name": "波兰", "qz": "1051" }, { "name": "泰国", "qz": "1045" }, { "name": "罗马尼亚", "qz": "906" }, { "name": "沙特阿拉伯", "qz": "900" }, { "name": "印度尼西亚", "qz": "893" }, { "name": "芬兰", "qz": "880" }, { "name": "俄罗斯", "qz": "840" }, { "name": "希腊", "qz": "821" }, { "name": "冰岛", "qz": "737" }, { "name": "钻石公主号邮轮", "qz": "712" }, { "name": "南非", "qz": "709" }, { "name": "印度", "qz": "694" }, { "name": "菲律宾", "qz": "636" }, { "name": "新加坡", "qz": "631" }, { "name": "巴拿马", "qz": "558" }, { "name": "卡塔尔", "qz": "537" }, { "name": "斯洛文尼亚", "qz": "528" }, { "name": "阿根廷", "qz": "502" }, { "name": "秘鲁", "qz": "480" }, { "name": "墨西哥", "qz": "478" }, { "name": "哥伦比亚", "qz": "470" }, { "name": "埃及", "qz": "456" }, { "name": "巴林", "qz": "419" }, { "name": "克罗地亚", "qz": "418" }, { "name": "爱沙尼亚", "qz": "404" }, { "name": "多米尼加共和国", "qz": "392" }, { "name": "塞尔维亚", "qz": "384" }, { "name": "黎巴嫩", "qz": "368" }, { "name": "伊拉克", "qz": "346" }, { "name": "阿拉伯联合酋长国", "qz": "333" }, { "name": "亚美尼亚", "qz": "290" }, { "name": "立陶宛", "qz": "290" }, { "name": "新西兰", "qz": "262" }, { "name": "匈牙利", "qz": "261" }, { "name": "阿尔及利亚", "qz": "246" }, { "name": "保加利亚", "qz": "242" }, { "name": "摩洛哥", "qz": "225" }, { "name": "拉脱维亚", "qz": "221" }, { "name": "乌拉圭", "qz": "217" }, { "name": "斯洛伐克", "qz": "216" }, { "name": "安道尔共和国", "qz": "213" }, { "name": "圣马力诺", "qz": "208" }, { "name": "科威特", "qz": "208" }, { "name": "哥斯达黎加", "qz": "201" }, { "name": "北马其顿共和国", "qz": "177" }, { "name": "阿尔巴尼亚", "qz": "174" }, { "name": "波斯尼亚和黑塞哥维那", "qz": "173" }, { "name": "突尼斯", "qz": "173" }, { "name": "约旦", "qz": "172" }, { "name": "乌克兰", "qz": "156" }, { "name": "摩尔多瓦", "qz": "149" }, { "name": "布基纳法索", "qz": "146" }, { "name": "越南", "qz": "141" }, { "name": "塞浦路斯", "qz": "132" }, { "name": "法罗群岛", "qz": "132" }, { "name": "马耳他", "qz": "129" }, { "name": "文莱", "qz": "109" }, { "name": "委内瑞拉", "qz": "107" }, { "name": "塞内加尔", "qz": "105" }, { "name": "斯里兰卡", "qz": "102" }, { "name": "阿曼", "qz": "99" }, { "name": "柬埔寨", "qz": "98" }, { "name": "哈萨克斯坦", "qz": "97" }, { "name": "阿塞拜疆", "qz": "93" }, { "name": "白俄罗斯", "qz": "86" }, { "name": "留尼汪岛", "qz": "83" }, { "name": "阿富汗", "qz": "80" }, { "name": "科特迪瓦", "qz": "80" }, { "name": "格鲁吉亚", "qz": "77" }, { "name": "瓜德罗普", "qz": "76" }, { "name": "喀麦隆", "qz": "72" }, { "name": "科索沃地区", "qz": "71" }, { "name": "加纳", "qz": "68" }, { "name": "马提尼克", "qz": "66" }, { "name": "乌兹别克斯坦", "qz": "65" }, { "name": "巴勒斯坦", "qz": "64" }, { "name": "特立尼达和多巴哥", "qz": "60" }, { "name": "古巴", "qz": "57" }, { "name": "黑山", "qz": "52" }, { "name": "洪都拉斯", "qz": "52" }, { "name": "波多黎各", "qz": "51" }, { "name": "刚果（金）", "qz": "51" }, { "name": "列支敦士登", "qz": "51" }, { "name": "毛里求斯", "qz": "47" }, { "name": "尼日利亚", "qz": "46" }, { "name": "吉尔吉斯斯坦", "qz": "44" }, { "name": "巴拉圭", "qz": "41" }, { "name": "卢旺达", "qz": "41" }, { "name": "玻利维亚", "qz": "39" }, { "name": "孟加拉国", "qz": "39" }, { "name": "关岛", "qz": "37" }, { "name": "马约特岛", "qz": "35" }, { "name": "肯尼亚", "qz": "31" }, { "name": "根西岛", "qz": "30" }, { "name": "法属圭亚那", "qz": "28" }, { "name": "牙买加", "qz": "26" }, { "name": "直布罗陀", "qz": "26" }, { "name": "法属玻利尼西亚", "qz": "25" }, { "name": "危地马拉", "qz": "24" }, { "name": "多哥", "qz": "23" }, { "name": "马恩岛", "qz": "23" }, { "name": "摩纳哥", "qz": "23" }, { "name": "阿鲁巴岛", "qz": "19" }, { "name": "马达加斯加", "qz": "19" }, { "name": "巴巴多斯", "qz": "18" }, { "name": "泽西岛", "qz": "18" }, { "name": "美属维尔京群岛", "qz": "17" }, { "name": "新喀里多尼亚", "qz": "14" }, { "name": "乌干达", "qz": "14" }, { "name": "马尔代夫", "qz": "13" }, { "name": "坦桑尼亚", "qz": "13" }, { "name": "萨尔瓦多", "qz": "13" }, { "name": "吉布提", "qz": "12" }, { "name": "埃塞俄比亚", "qz": "12" }, { "name": "赤道几内亚", "qz": "11" }, { "name": "法属圣马丁岛", "qz": "11" }, { "name": "蒙古", "qz": "10" }, { "name": "海地", "qz": "8" }, { "name": "开曼群岛", "qz": "8" }, { "name": "塞舌尔", "qz": "7" }, { "name": "百慕大群岛", "qz": "7" }, { "name": "苏里南", "qz": "7" }, { "name": "加蓬", "qz": "6" }, { "name": "库拉索", "qz": "6" }, { "name": "圭亚那", "qz": "5" }, { "name": "叙利亚", "qz": "5" }, { "name": "格林兰岛", "qz": "5" }, { "name": "中非共和国", "qz": "5" }, { "name": "莫桑比克", "qz": "5" }, { "name": "斐济", "qz": "5" }, { "name": "贝宁", "qz": "5" }, { "name": "纳米比亚", "qz": "5" }, { "name": "巴哈马", "qz": "5" }, { "name": "缅甸", "qz": "5" }, { "name": "几内亚", "qz": "5" }, { "name": "史瓦帝尼", "qz": "4" }, { "name": "斯威士兰", "qz": "4" }, { "name": "厄立特里亚", "qz": "4" }, { "name": "梵蒂冈", "qz": "4" }, { "name": "刚果（布）", "qz": "4" }, { "name": "尼日尔", "qz": "4" }, { "name": "老挝", "qz": "3" }, { "name": "安提瓜和巴布达", "qz": "3" }, { "name": "圣卢西亚", "qz": "3" }, { "name": "圣巴泰勒米岛", "qz": "3" }, { "name": "尼泊尔", "qz": "3" }, { "name": "乍得", "qz": "3" }, { "name": "苏丹", "qz": "3" }, { "name": "利比里亚", "qz": "3" }, { "name": "佛得角", "qz": "3" }, { "name": "赞比亚", "qz": "3" }, { "name": "毛里塔尼亚", "qz": "2" }, { "name": "索马里", "qz": "2" }, { "name": "尼加拉瓜", "qz": "2" }, { "name": "马里", "qz": "2" }, { "name": "几内亚比绍", "qz": "2" }, { "name": "多米尼克", "qz": "2" }, { "name": "圣基茨和尼維斯", "qz": "2" }, { "name": "蒙特塞拉特", "qz": "2" }, { "name": "冈比亚", "qz": "2" }, { "name": "伯利兹", "qz": "2" }, { "name": "安哥拉", "qz": "2" }, { "name": "津巴布韦", "qz": "2" }, { "name": "不丹", "qz": "2" }, { "name": "荷属圣马丁", "qz": "2" }, { "name": "圣文森特和格林纳丁斯", "qz": "1" }, { "name": "东帝汶", "qz": "1" }, { "name": "格林纳达", "qz": "1" }, { "name": "特克斯和凯科斯群岛", "qz": "1" }, { "name": "利比亚", "qz": "1" }, { "name": "巴布亚新几内亚", "qz": "1" }];

const counts = [10000, 5000, 1000, 500, 100];
const color = ['#fcfbfd','#efedf5','#dadaeb','#bcbddc','#9e9ac8','#807dba','#6a51a3','#4a1486'].reverse();
const scene = new Scene({
  id: 'map',
 
  map: new GaodeMap({
    center: [100, 30],
    minZoom: 0,
    zoom: 2,
  }),
});

const url =
  'https://mvt.amap.com/district/WLD/{z}/{x}/{y}/4096?key=309f07ac6bc48160e80b480ae511e1e9&version=';
const source = new Source(url, {
  parser: {
    type: 'mvt',
    tileSize: 256,
    warp: false,
  },
});
function unicode2Char(name) {
  const code = name
    .split('/')
    .slice(1)
    .map((c) => {
      return String.fromCharCode('0x' + c);
    });
  return code.join('');
}

scene.on('loaded', () => {
  // 绿地
  const water_surface = new PolygonLayer({
    sourceLayer: 'WLD',
    zIndex: 1,
  })
    .source(source)
    .select(true)
    .active(false)
    .shape('fill')
    // .color('red')
    .color('NAME_CHN', (NAME_CHN) => {
      const namestr = unicode2Char(NAME_CHN);
      const country = data.find((c) => {
        return c.name == namestr;
      });
      if (!country) {
        return '#ffff33';
      }
      const qz = ((country.qz as unknown) as number) * 1;
      if (qz > counts[0]) {
        return color[0];
      } else if (qz > counts[1]) {
        return color[1];
      } else if (qz > counts[2]) {
        return color[2];
      } else if (qz > counts[3]) {
        return color[3];
      } else {
        return color[4];
      }
    });

  const line = new LineLayer({
    sourceLayer: 'WLD_L',
    zIndex: 2,
  })
    .source(source)
    .shape('line')
    .size(0.6)
    .color('type', (t) => {
      if (t === '0') {
        return 'red';
      }
      if (t === '2') {
        return '#09f';
      }
      return '#fc9272';
    });


  // water_surface.on('click', (e) => {
  //   console.log(e);
  // });


  scene.addLayer(water_surface);
  scene.addLayer(line);
});
// @ts-ignore
import { Scene, PolygonLayer, PointLayer, Source } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';
import { Protocol } from "pmtiles";
const protocol = new Protocol();
Scene.addProtocol('pmtiles',protocol.tile);
const scene = new Scene({
    id: 'map',
    map: new Map({
      center: [11.2438, 43.7799],
      zoom: 12,
    }),
  });

  


  const source = new Source('pmtiles://https://mdn.alipayobjects.com/afts/file/A*HYvHSZ-wQmIAAAAAAAAAAAAADrd2AQ/protomaps(vector)ODbL_firenze.bin', {
      parser: {
        type: 'mvt',
        tileSize: 256,
        maxZoom: 14,
        extent: [-180, -85.051129, 179, 85.051129],
      },
    })


  const layer = new PolygonLayer({
  //   featureId: 'COLOR',
    sourceLayer: 'earth', // woods hillshade contour ecoregions ecoregions2 city
  });
  layer
    .source(source)
    .color('#f7f7f7')

    .style({
      opacity: 0.5
    });
    const boundaries = new PolygonLayer({
      //   featureId: 'COLOR',
        sourceLayer: 'boundaries', // woods hillshade contour ecoregions ecoregions2 city
      })
        .source(source)
        .color('#ffffbf')
        .shape('line')
        .size(1)
        .style({
          opacity: 1
        });

    const buildings = new PolygonLayer({
      //   featureId: 'COLOR',
        sourceLayer: 'buildings', // woods hillshade contour ecoregions ecoregions2 city
      })
        .source(source)
        .color('#f1b6da')
        .shape('fill')
        .style({
          opacity: 1
        });

        const natural = new PolygonLayer({
          //   featureId: 'COLOR',
            sourceLayer: 'natural', // woods hillshade contour ecoregions ecoregions2 city
          })
            .source(source)
            .color('#e6f5d0')
            .shape('fill')
      
            .style({
              opacity: 1
            });
          
            const water = new PolygonLayer({
              //   featureId: 'COLOR',
                sourceLayer: 'water', // woods hillshade contour ecoregions ecoregions2 city
              })
                .source(source)
                .color('#92c5de')
                .shape('fill')
          
                .style({
                  opacity: 1
                });
            const roads = new PolygonLayer({
              //   featureId: 'COLOR',
                  sourceLayer: 'roads', // woods hillshade contour ecoregions ecoregions2 city
              })
                  .source(source)
                  .color('#bababa')
                  .shape('line')
                  .size(0.5)
                  .style({
                  opacity: 1
                  });
          const transit = new PolygonLayer({
          //   featureId: 'COLOR',
              sourceLayer: 'transit', // woods hillshade contour ecoregions ecoregions2 city
          })
              .source(source)
              .color('#542788')
              .shape('line')
              .size(0.5)
              .style({
              opacity: 1
              });

              const point = new PointLayer({
                  //   featureId: 'COLOR',
                      sourceLayer: 'places', // woods hillshade contour ecoregions ecoregions2 city
                  })
                  .source(source)
                  .color('#542788')
                  .shape('circle')
                  .size(5)
                  .style({
                  opacity: 1
                  });
  
  scene.on('loaded', () => {
    scene.addLayer(layer);
    scene.addLayer(boundaries);
    scene.addLayer(natural);
    scene.addLayer(buildings);
    scene.addLayer(transit);
    scene.addLayer(roads);
    scene.addLayer(water);
    scene.addLayer(point);
  });// @ts-ignore
import { Scene, RasterLayer, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',

    map: new Map({
        center: [110, 30],
        // zoom: 12,
        zoom: 3,
    }),
});
const worldSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
        parser: {
            type: 'mvt',
            tileSize: 256,
            maxZoom: 9,
            extent: [-180, -85.051129, 179, 85.051129],
        },
    })
const maskData = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            99.70402975806178,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            36.598520593127276
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
};
const maskData2 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            109.50019979654019,
                            32.46162165361247
                        ],
                        [
                            125.99460575876572,
                            29.37353862575138
                        ],
                        [
                            127.50170884160855,
                            39.24004564990585
                        ],
                        [
                            114.69133263744305,
                            41.22139040282963
                        ],
                        [
                            109.50019979654019,
                            32.46162165361247
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}
const maskData3 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            111.67712647175739,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            27.533314060876805
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}

const maskLayer1 = new PolygonLayer({
    visible: false,
    maskOperation: 'or',
    zIndex: 4
}).source(maskData).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer2 = new PolygonLayer({ visible: false, maskOperation: 'or',zIndex: 4}).source(maskData2).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer3 = new PolygonLayer({ visible: false, maskOperation: 'or', zIndex: 4}).source(maskData3).shape('fill').color('#f00').style({ opacity: 0.4 });


const layer = new RasterLayer({
    zIndex: 5,
    maskLayers: [maskLayer1, maskLayer2,maskLayer3],
    enableMask: true,
    maskInside: false, // 并集取反 notALL
}).source(
    'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
    {
        parser: {
            type: 'rasterTile',
            tileSize: 256,
        },
    },
).style({
    opacity: 1
});

scene.on('loaded', () => {


    scene.addLayer(maskLayer1);
    scene.addLayer(maskLayer2);
    scene.addLayer(maskLayer3);
    scene.addLayer(layer);
});// @ts-ignore
import { Scene, RasterLayer, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';

import * as GeoTIFF from 'geotiff';

async function getTiffData() {
    const response = await fetch(
        'https://gw.alipayobjects.com/os/rmsportal/XKgkjjGaAzRyKupCBiYW.dat',
        // 'https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tiff',
    );
    const arrayBuffer = await response.arrayBuffer();
    const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
    const image = await tiff.getImage();
    const width = image.getWidth();
    const height = image.getHeight();
    const values = await image.readRasters();
    return {
        data: values[0],
        width,
        height,
        min: 0,
        max: 8000,
    };
}


const scene = new Scene({
    id: 'map',

    map: new GaodeMap({
        center: [120.165, 30.26],
        pitch: 0,
        zoom: 2,
        style: 'dark',
    }),
});
scene.addImage(
    '00',
    'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',
);

fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d2e0e930-fd44-4fca-8872-c1037b0fee7b.json',
)
    .then((res) => res.json())
    .then(async (maskData) => {
        const tiffdata = await getTiffData();
        const polygonLayer = new PolygonLayer({
            visible: false
        }).source(maskData).shape('fill').color('#f00').style({ opacity: 0.5 });
        const layer = new RasterLayer({
            maskLayers: [polygonLayer]
        });
        const mindata = -0;
        const maxdata = 8000;
        layer
            .source(tiffdata.data, {
                parser: {
                    type: 'raster',
                    width: tiffdata.width,
                    height: tiffdata.height,
                    extent: [
                        73.482190241,
                        3.82501784112,
                        135.106618732,
                        57.6300459963,
                    ],
                },
            })
            .style({
                opacity: 0.8,
                domain: [mindata, maxdata],
                clampLow: true,
                rampColors: {
                    colors: [
                        'rgb(166,97,26)',
                        'rgb(223,194,125)',
                        'rgb(245,245,245)',
                        'rgb(128,205,193)',
                        'rgb(1,133,113)',
                    ],
                    positions: [0, 0.25, 0.5, 0.75, 1.0],
                },
            });
        scene.addLayer(layer);
        scene.addLayer(polygonLayer);
    });
// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { RasterLayer, Scene } from '@antv/l7';
import { Map } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';
const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [105, 37.5],
    zoom: 2.5,
  }),
});
scene.on('loaded', async () => {
  const tiffdata = await getTiffData();

  const masklayer = new RasterLayer({
    zIndex: 3,
    visible: false,
  });
  masklayer
    .source(tiffdata.data, {
      parser: {
        type: 'raster',
        width: tiffdata.width,
        height: tiffdata.height,
        extent: [
          73.4821902409999979, 3.8150178409999995, 135.1066187319999869,
          57.6300459959999998,
        ],
      },
    })
    .style({
      clampLow: false,
      clampHigh: false,
      domain: [10, 60],
      noDataValue: 0,
      rampColors: {
        positions: [0, 0.05, 0.1, 0.25, 0.5, 1.0], // 数据需要换成 0-1
        colors: [
          'rgba(0,0,0,0)',
          'rgba(92,58,16,0)',
          '#fabd08',
          '#f1e93f',
          '#f1ff8f',
          '#fcfff7',
        ],
      },
    });

  const raster = new RasterLayer({
    zIndex: 2,
    maskLayers: [masklayer],
    visible: true,
    enableMask: true,
  })
    .source(
      'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
      {
        parser: {
          type: 'rasterTile',
          tileSize: 256,
        },
      },
    )
    .style({
      opacity: 1,
    });
  scene.addLayer(raster);

  scene.addLayer(masklayer);
  addLayer();
});
async function getTiffData() {
  const response = await fetch(
    'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',
  );
  const arrayBuffer = await response.arrayBuffer();
  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
  const image = await tiff.getImage();
  const width = image.getWidth();
  const height = image.getHeight();
  const values = await image.readRasters();
  return {
    data: values[0],
    width,
    height,
  };
}

async function addLayer() {}
// @ts-ignore
import { Scene, RasterLayer, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',

    map: new Map({
        center: [110, 30],
        // zoom: 12,
        zoom: 3,
    }),
});
const worldSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
        parser: {
            type: 'mvt',
            tileSize: 256,
            maxZoom: 9,
            extent: [-180, -85.051129, 179, 85.051129],
        },
    })
const maskData = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            99.70402975806178,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            36.598520593127276
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
};
const maskData2 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            109.50019979654019,
                            32.46162165361247
                        ],
                        [
                            125.99460575876572,
                            29.37353862575138
                        ],
                        [
                            127.50170884160855,
                            39.24004564990585
                        ],
                        [
                            114.69133263744305,
                            41.22139040282963
                        ],
                        [
                            109.50019979654019,
                            32.46162165361247
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}
const maskData3 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            111.67712647175739,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            27.533314060876805
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}

const maskLayer1 = new PolygonLayer({
    visible: true,
    maskOperation: 'and',
    zIndex: 4
}).source(maskData).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer2 = new PolygonLayer({ visible: true, maskOperation: 'and',zIndex: 4}).source(maskData2).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer3 = new PolygonLayer({ visible: true, maskOperation: 'and', zIndex: 4}).source(maskData3).shape('fill').color('#f00').style({ opacity: 0.4 });


const layer = new RasterLayer({
    zIndex: 5,
    maskLayers: [maskLayer1, maskLayer2,maskLayer3],
    enableMask: true,
    maskInside: true,
    maskOperation: 'or',
}).source(
    'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
    {
        parser: {
            type: 'rasterTile',
            tileSize: 256,
        },
    },
).style({
    opacity: 1
});

scene.on('loaded', () => {


    scene.addLayer(maskLayer1);
    scene.addLayer(maskLayer2);
    scene.addLayer(maskLayer3);
    scene.addLayer(layer);
});import { Scene, RasterLayer, PolygonLayer, Source } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';

const colorList = [
  '#419bdf', // Water

  '#358221', // Tree

  '#88b053', // Grass


  '#7a87c6', // vegetation


  '#e49635', // Crops


  '#dfc35a', // shrub


  '#ED022A', // Built Area


  '#EDE9E4', // Bare ground
 

  '#F2FAFF', // Snow

  '#C8C8C8', // Clouds
];
const positions = [
  1,2,3,4,5,6,7,8,9,10,11,
];

const scene = new Scene({
  id: 'map',
 
  map: new GaodeMap({
    center: [ 116, 27 ],
    zoom: 6,
    style: 'dark'
  })
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/fccd80c0-2611-49f9-9a9f-e2a4dd12226f.json'
  )
    .then(res => res.json())
    .then(maskData => {
      const maskPolygon = new PolygonLayer({
        visible: false,// 隐藏maskPolygon
        
      }).source(maskData)
      .shape('fill')
      .color('#f00')
      .style({
        opacity: 0.5
      });
      const layer = new RasterLayer({
        maskLayers:[maskPolygon]
      });

      const tileSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/l7/tiff_jx/{z}/{x}/{y}.tiff',
        {
          parser: {
            type: 'rasterTile',
            dataType: 'arraybuffer',
            tileSize: 256,
            maxZoom: 13.1,
            format: async data => {
              const tiff = await GeoTIFF.fromArrayBuffer(data);
              const image = await tiff.getImage();
              const width = image.getWidth();
              const height = image.getHeight();
              const values = await image.readRasters();
              return { rasterData: values[0], width, height };
            }
          }
        });

      layer.source(tileSource)
        .style({
          domain: [ 0, 255],// 枚举类型domain 必须为0-255
          clampLow: false,
          rampColors: {
            type:'cat',
            colors: colorList,
            positions
          }
        });

      scene.addLayer(layer);
      scene.addLayer(maskPolygon);
      return '';
    });
  return '';
});

const wrap = document.getElementById('map');
const legend = document.createElement('div');

const data = [];
for (let i = 0; i < colorList.length; i += 1) {
  data.push({
    color: colorList[i],
    text: [
      'Water',
      'Trees',
      'Grass',
      'Vegetation',
      'Crops',
      'Shrub',
      'Built Area',
      'Bare ground',
      'Snow',
      'Clouds'
    ][i]
  });
}
const strArr = [];
data.map(({ color, text }) => {
  strArr.push(`  <div style="display:inline-block;background:#fff:padding:5px;">
  <div style="fontSize:12px;lineHeight:12px;color: #fff">
    ${text}
  </div>
  <div style="height:8px; background: ${color};"></div>
  </div>`);
  return '';
});
legend.innerHTML = strArr.join('');
legend.style.position = 'absolute';
legend.style.left = '10px';
legend.style.bottom = '30px';
legend.style.zIndex = 10;

wrap.appendChild(legend);

// @ts-ignore
import { Scene, RasterLayer, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';


const scene = new Scene({
    id: 'map',

    map: new Map({
        center: [110, 30],
        // zoom: 12,
        zoom: 3,
    }),
});
const worldSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
        parser: {
            type: 'mvt',
            tileSize: 256,
            maxZoom: 9,
            extent: [-180, -85.051129, 179, 85.051129],
        },
    })

const fillLayer = new PolygonLayer({
    zIndex: 3,
    visible: false,
    featureId: 'COLOR',
    sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
}).source(worldSource).shape('fill')
    .color('COLOR')
    .style({
        opacity: 0.5
    })

const layer = new RasterLayer({
    zIndex: 2,
    maskLayers: [fillLayer],
    enableMask: true,
}).source(
    'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
    {
        parser: {
            type: 'rasterTile',
            tileSize: 256,
        },
    },
).style({
    opacity: 1
});

scene.on('loaded', () => {
    scene.addLayer(fillLayer);


    scene.addLayer(layer);
});
// @ts-ignore
import { Scene, RasterLayer, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

const scene = new Scene({
    id: 'map',

    map: new Map({
        center: [110, 30],
        // zoom: 12,
        zoom: 3,
    }),
});
const worldSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
        parser: {
            type: 'mvt',
            tileSize: 256,
            maxZoom: 9,
            extent: [-180, -85.051129, 179, 85.051129],
        },
    })
const maskData = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            99.70402975806178,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            23.990050715201292
                        ],
                        [
                            114.1889649431626,
                            36.598520593127276
                        ],
                        [
                            99.70402975806178,
                            36.598520593127276
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
};
const maskData2 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            109.50019979654019,
                            32.46162165361247
                        ],
                        [
                            125.99460575876572,
                            29.37353862575138
                        ],
                        [
                            127.50170884160855,
                            39.24004564990585
                        ],
                        [
                            114.69133263744305,
                            41.22139040282963
                        ],
                        [
                            109.50019979654019,
                            32.46162165361247
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}
const maskData3 = {
    "type": "FeatureCollection",
    "features": [
        {
            "type": "Feature",
            "properties": {},
            "geometry": {
                "coordinates": [
                    [
                        [
                            111.67712647175739,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            27.533314060876805
                        ],
                        [
                            131.7718342429976,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            34.55577879114256
                        ],
                        [
                            111.67712647175739,
                            27.533314060876805
                        ]
                    ]
                ],
                "type": "Polygon"
            }
        }
    ]
}

const maskLayer1 = new PolygonLayer({
    visible: true,
    maskOperation: 'or',
    zIndex: 14,
}).source(maskData).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer2 = new PolygonLayer({ visible: true, maskOperation: 'or', zIndex: 14 }).source(maskData2).shape('fill').color('#f00').style({ opacity: 0.4 });
const maskLayer3 = new PolygonLayer({ visible: true, maskOperation: 'or', zIndex: 14 }).source(maskData3).shape('fill').color('#f00').style({ opacity: 0.4 });


const layer = new RasterLayer({
    zIndex: 1,
    maskLayers: [maskLayer1, maskLayer2,maskLayer3],
    enableMask: true,
    maskInside: true,
    maskOperation: 'or',
}).source(
    'https://tiles{1-3}.geovisearth.com/base/v1/img/{z}/{x}/{y}?format=webp&tmsIds=w&token=b2a0cfc132cd60b61391b9dd63c15711eadb9b38a9943e3f98160d5710aef788',
    {
        parser: {
            type: 'rasterTile',
            tileSize: 256,
        },
    },
).style({
    opacity: 1
});

scene.on('loaded', () => {

    scene.addLayer(layer);
    scene.addLayer(maskLayer1);
    scene.addLayer(maskLayer2);
    scene.addLayer(maskLayer3);

});
// @ts-ignore
import { Scene, RasterLayer, PolygonLayer, PointLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';


import * as GeoTIFF from 'geotiff';

async function getTiffData() {
    const response = await fetch(
        'https://gw.alipayobjects.com/os/rmsportal/XKgkjjGaAzRyKupCBiYW.dat',
        // 'https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tiff',
    );
    const arrayBuffer = await response.arrayBuffer();
    const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
    const image = await tiff.getImage();
    const width = image.getWidth();
    const height = image.getHeight();
    const values = await image.readRasters();
    return {
        data: values[0],
        width,
        height,
        min: 0,
        max: 8000,
    };
}


const scene = new Scene({
    id: 'map',

    map: new GaodeMap({
        center: [120.165, 30.26],
        pitch: 0,
        zoom: 2,
        style: 'dark',
    }),
});
scene.addImage(
    '00',
    'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',
);
scene.on('loaded', async () => {
    const tiffdata = await getTiffData();
    const maskPointData = {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "coordinates": [
                        110.64070700180974,
                        38.725170221383365
                    ],
                    "type": "Point"
                }
            },
            {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "coordinates": [
                        117.05859241946035,
                        41.44428218345186
                    ],
                    "type": "Point"
                }
            },
            {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "coordinates": [
                        114.98363698367831,
                        37.113784885036424
                    ],
                    "type": "Point"
                }
            },
            {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "coordinates": [
                        118.77967948635097,
                        37.47208097958061
                    ],
                    "type": "Point"
                }
            },
            {
                "type": "Feature",
                "properties": {},
                "geometry": {
                    "coordinates": [
                        113.729012766695,
                        39.22535473120385
                    ],
                    "type": "Point"
                }
            }
        ]
    }
    
    
    const maskPoint = new PointLayer({
        visible: false
    }).source(maskPointData).shape('circle').size(100000).color('#f00').style({
        opacity: 0.5,
        unit: 'meter',
    });
    const layer = new RasterLayer({
        maskLayers: [maskPoint]
    });
    const mindata = -0;
    const maxdata = 8000;
    layer
        .source(tiffdata.data, {
            parser: {
                type: 'raster',
                width: tiffdata.width,
                height: tiffdata.height,
                extent: [
                    73.482190241,
                    3.82501784112,
                    135.106618732,
                    57.6300459963,
                ],
            },
        })
        .style({
            opacity: 0.8,
            domain: [mindata, maxdata],
            clampLow: true,
            rampColors: {
                colors: [
                    'rgb(166,97,26)',
                    'rgb(223,194,125)',
                    'rgb(245,245,245)',
                    'rgb(128,205,193)',
                    'rgb(1,133,113)',
                ],
                positions: [0, 0.25, 0.5, 0.75, 1.0],
            },
        });
    scene.addLayer(layer);
    scene.addLayer(maskPoint);    

})



// @ts-ignore
import { Scene, RasterLayer, Source, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';



const scene = new Scene({
    id: 'map',

    map: new Map({
        center: [110, 30],
        // zoom: 12,
        zoom: 3,
    }),
});
const worldSource = new Source('https://ganos.oss-cn-hangzhou.aliyuncs.com/m2/rs_l7/{z}/{x}/{y}.pbf',
    {
        parser: {
            type: 'mvt',
            tileSize: 256,
            maxZoom: 9,
            extent: [-180, -85.051129, 179, 85.051129],
        },
    })
const maskData = {
    type: 'FeatureCollection',
    features: [
        {
            type: 'Feature',
            geometry: {
                type: 'MultiPolygon',
                coordinates: [
                    [
                        [
                            [125.15625000000001, 8.407168163601076],
                            [116.54296874999999, -21.289374355860424],
                            [156.26953125, -20.632784250388013],
                            [150.29296875, 2.1088986592431382],
                        ],
                    ],
                    [
                        [
                            [78.57421875, 46.92025531537451],
                            [51.67968749999999, 37.020098201368114],
                            [87.890625, 28.76765910569123],
                        ],
                    ],
                ],
            },
        },
    ],
};

const polygonLayer = new PolygonLayer({ visible: true }).source(maskData).shape('fill').color('#f00').style({ opacity: 0.4 });


const fillLayer = new PolygonLayer({
    zIndex: 3,
    visible: true,
    maskLayers: [polygonLayer],
    featureId: 'COLOR',
    sourceLayer: 'ecoregions2', // woods hillshade contour ecoregions ecoregions2 city
}).source(worldSource).shape('fill')
    .color('COLOR')
    .style({
        opacity: 0.5
    })



scene.on('loaded', () => {
    scene.addLayer(fillLayer);

    scene.addLayer(polygonLayer);
    
});
// @ts-ignore
import { Scene, HeatmapLayer, PolygonLayer } from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';


const scene = new Scene({
    id: 'map',

    map: new GaodeMap({
        center: [120.165, 30.26],
        pitch: 0,
        zoom: 2,
        style: 'dark',
    }),
});
scene.addImage(
    '00',
    'https://gw.alipayobjects.com/zos/basement_prod/604b5e7f-309e-40db-b95b-4fac746c5153.svg',
);
const maskData = {
    type: 'FeatureCollection',
    features: [
        {
            type: 'Feature',
            geometry: {
                type: 'MultiPolygon',
                coordinates: [
                    [
                        [
                            [125.15625000000001, 8.407168163601076],
                            [116.54296874999999, -21.289374355860424],
                            [156.26953125, -20.632784250388013],
                            [150.29296875, 2.1088986592431382],
                        ],
                    ],
                    [
                        [
                            [78.57421875, 46.92025531537451],
                            [51.67968749999999, 37.020098201368114],
                            [87.890625, 28.76765910569123],
                        ],
                    ],
                ],
            },
        },
    ],
};


scene.on('loaded', () => {


    fetch(
        'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json',
    )
        .then((res) => res.json())
        .then((data) => {
            const polygonLayer = new PolygonLayer({ visible: true }).source(maskData).shape('fill').color('#f00').style({ opacity: 0.4 });
            const heatmapLayer = new HeatmapLayer({
                maskLayers: [polygonLayer],
                mask: false,

            })
                .source(data)
                .shape('heatmap') // heatmap3D heatmap
                .size('mag', [0, 1.0]) // weight映射通道
                .style({
                    intensity: 2,
                    radius: 20,
                    opacity: 1.0,
                    rampColors: {
                        colors: [
                            '#FF4818',
                            '#F7B74A',
                            '#FFF598',
                            '#91EABC',
                            '#2EA9A1',
                            '#206C7C',
                        ].reverse(),
                        positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
                    },
                });
            scene.addLayer(polygonLayer);
            scene.addLayer(heatmapLayer);

        });
});
import { Scene } from '@antv/l7';
import { TencentMap } from '@antv/l7-maps';

new Scene({
  id: 'map',
  map: new TencentMap({
    style: 'style1',
    center: [ 107.054293, 35.246265 ],
    zoom: 4.056
  })
});
import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 107.054293, 35.246265 ],
    zoom: 4.056
  })
});
import { Scene } from '@antv/l7';
import { BaiduMap } from '@antv/l7-maps';

new Scene({
  id: 'map',
  map: new BaiduMap({
    center: [107.054293, 35.246265],
    zoom: 4.056,
    style: 'c17b1c2b528429a7b04bbc8d3eb8bae9',
    // 百度地图的logo是否可见，默认true
    logoVisible: false
  })
});
import { Scene, PointLayer } from '@antv/l7';
import { MapLibre } from '@antv/l7-maps';

function initMap() {
  const scene = new Scene({
    id: 'map',
    map: new MapLibre({
      zoom: 10,
      style: "https://api.maptiler.com/maps/streets/style.json?key=YbCPLULzWdf1NplssEIc", // style URL
      minZoom: 0,
      maxZoom: 18
    })
  });
  scene.on('loaded', () => {
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
    )
      .then(res => res.json({
        autoFit: true
      }))
      .then(data => {
        const pointLayer = new PointLayer({
          autoFit: true
        })
          .source(data, {
            parser: {
              type: 'json',
              x: 'longitude',
              y: 'latitude'
            }
          })
          .shape('name', [
            'circle',
            'triangle',
            'square',
            'pentagon',
            'hexagon',
            'octogon',
            'hexagram',
            'rhombus',
            'vesica'
          ])
          .size('unit_price', [10, 25])
          .color('name', ['#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452'])
          .style({
            opacity: 1,
            strokeWidth: 2
          });
        scene.addLayer(pointLayer);
      });
  });
}
initMap();
import { Scene, PointLayer } from '@antv/l7';
import { BaiduMap } from '@antv/l7-maps';

function initMap() {

  // 全局加载百度地图API
  // eslint-disable-next-line no-undef
  const map = new BMapGL.Map('map', {
    minZoom: 5,
    maxZoom: 18
  });
  // 百度地图需要执行centerAndZoom进行初始化
  // eslint-disable-next-line no-undef
  map.centerAndZoom(new BMapGL.Point(110.435159, 31.256971), 6)
  // 默认滚轮缩放禁用，需要如下执行开启
  map.enableScrollWheelZoom()
  map.setMapStyleV2({
    styleId: '344b005fd5b4220a55241c25e7733e81'
  })

  const scene = new Scene({
    id: 'map',
    map: new BaiduMap({
      mapInstance: map
    })
  });
  scene.on('loaded', () => {
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
    )
      .then(res => res.json())
      .then(data => {
        const pointLayer = new PointLayer({
          autoFit: true
        })
          .source(data, {
            parser: {
              type: 'json',
              x: 'longitude',
              y: 'latitude'
            }
          })
          .shape('name', [
            'circle',
            'triangle',
            'square',
            'pentagon',
            'hexagon',
            'octogon',
            'hexagram',
            'rhombus',
            'vesica'
          ])
          .size('unit_price', [10, 25])
          .color('name', ['#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452'])
          .style({
            opacity: 0.3,
            strokeWidth: 2
          });
        scene.addLayer(pointLayer);
      });
  });
}
initMap();
import { Scene, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

function initMap() {
  // 全局加载高德地图API
  const map = new AMap.Map('map', {
    viewMode: '3D',
    mapStyle: 'amap://styles/darkblue',
    center: [ 121.435159, 31.256971 ],
    zoom: 14.89,
    minZoom: 10
  });
  const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
      mapInstance: map
    })
  });
  scene.on('loaded', () => {
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
    )
      .then(res => res.json())
      .then(data => {
        const pointLayer = new PointLayer()
          .source(data, {
            parser: {
              type: 'json',
              x: 'longitude',
              y: 'latitude'
            }
          })
          .shape('name', [
            'circle',
            'triangle',
            'square',
            'pentagon',
            'hexagon',
            'octogon',
            'hexagram',
            'rhombus',
            'vesica'
          ])
          .size('unit_price', [ 10, 25 ])
          .color('name', [ '#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452' ])
          .style({
            opacity: 0.3,
            strokeWidth: 2
          });
        scene.addLayer(pointLayer);
      });
  });
}
  initMap();import { Scene, PointLayer } from '@antv/l7';
import { Mapbox } from '@antv/l7-maps';

function initMap() {
  const scene = new Scene({
    id: 'map',
    map: new Mapbox({
      zoom: 10,
      minZoom: 0,
      maxZoom: 18,
      token:"pk.eyJ1Ijoic2tvcm5vdXMiLCJhIjoiY2s4dDBkNjY1MG13ZTNzcWEyZDYycGkzMyJ9.tjfwvJ8G_VDmXoClOyxufg",
    })
  });
  scene.on('loaded', () => {
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
    )
      .then(res => res.json())
      .then(data => {
        const pointLayer = new PointLayer({
          autoFit: true
        })
          .source(data, {
            parser: {
              type: 'json',
              x: 'longitude',
              y: 'latitude'
            }
          })
          .shape('name', [
            'circle',
            'triangle',
            'square',
            'pentagon',
            'hexagon',
            'octogon',
            'hexagram',
            'rhombus',
            'vesica'
          ])
          .size('unit_price', [10, 25])
          .color('name', ['#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452'])
          .style({
            opacity: 1,
            strokeWidth: 2
          });
        scene.addLayer(pointLayer);
      });
  });
}
initMap();
import { Scene, PointLayer } from '@antv/l7';
import { TencentMap } from '@antv/l7-maps';

function initMap() {
  const scene = new Scene({
    id: 'map',
    map: new TencentMap({
      zoom: 10,
      minZoom: 5,
      maxZoom: 18
    })
  });
  scene.on('loaded', () => {
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/893d1d5f-11d9-45f3-8322-ee9140d288ae.json'
    )
      .then(res => res.json())
      .then(data => {
        const pointLayer = new PointLayer()
          .source(data, {
            parser: {
              type: 'json',
              x: 'longitude',
              y: 'latitude'
            }
          })
          .shape('name', [
            'circle',
            'triangle',
            'square',
            'pentagon',
            'hexagon',
            'octogon',
            'hexagram',
            'rhombus',
            'vesica'
          ])
          .size('unit_price', [10, 25])
          .color('name', ['#5B8FF9', '#5CCEA1', '#5D7092', '#F6BD16', '#E86452'])
          .style({
            opacity: 0.3,
            strokeWidth: 2
          });
        scene.addLayer(pointLayer);
      });
  });
}
initMap();
import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/alisis/geo-data-v0.1.1/administrative-data/area-list.json',
  )
    .then((response) => response.json())
    .then((list) => {
      const data = list
        .filter(({ level }) => level === 'district')
        .map((item) => ({ ...item, value: Math.random() * 5000 }));

      const choropleth = new Choropleth({
        source: {
          data,
          joinBy: {
            sourceField: 'adcode',
            geoField: 'adcode',
          },
        },
        viewLevel: {
          level: 'province',
          adcode: 330000,
          granularity: 'district',
        },
        autoFit: true,
        color: {
          field: 'value',
          value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
          scale: { type: 'quantize' },
        },
        style: {
          opacity: 1,
          stroke: '#ccc',
          lineWidth: 0.6,
          lineOpacity: 1,
        },
        label: {
          visible: true,
          field: 'name',
          style: {
            fill: '#000',
            opacity: 0.8,
            fontSize: 10,
            stroke: '#fff',
            strokeWidth: 1.5,
            textAllowOverlap: false,
            padding: [5, 5],
          },
        },
        state: {
          active: { stroke: 'black', lineWidth: 1 },
        },
        tooltip: {
          items: ['name', 'adcode', 'value'],
        },
        zoom: {
          position: 'bottomright',
        },
        legend: {
          position: 'bottomleft',
        },
      });

      choropleth.addToScene(scene);
    });
});
import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/alisis/geo-data-v0.1.1/administrative-data/area-list.json',
  )
    .then((response) => response.json())
    .then((list) => {
      const data = list
        .filter(
          ({ level, parent }) => level === 'district' && parent === 330100,
        )
        .map((item) => ({ ...item, value: Math.random() * 5000 }));

      const choropleth = new Choropleth({
        source: {
          data,
          joinBy: {
            sourceField: 'adcode',
            geoField: 'adcode',
          },
        },
        viewLevel: {
          level: 'city',
          adcode: 330100,
        },
        autoFit: true,
        color: {
          field: 'value',
          value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
          scale: { type: 'quantize' },
        },
        style: {
          opacity: 1,
          stroke: '#ccc',
          lineWidth: 0.6,
          lineOpacity: 1,
        },
        label: {
          visible: true,
          field: 'name',
          style: {
            fill: '#000',
            opacity: 0.8,
            fontSize: 10,
            stroke: '#fff',
            strokeWidth: 1.5,
            textAllowOverlap: false,
            padding: [5, 5],
          },
        },
        state: {
          active: { stroke: 'black', lineWidth: 1 },
        },
        tooltip: {
          items: ['name', 'adcode', 'value'],
        },
        zoom: {
          position: 'bottomright',
        },
        legend: {
          position: 'bottomleft',
        },
      });

      choropleth.addToScene(scene);
    });
});
import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

const choropleth = new Choropleth({
  source: {
    data: [{ adcode: 330106, value: 200 }],
    joinBy: {
      sourceField: 'adcode',
      geoField: 'adcode',
    },
  },
  viewLevel: {
    level: 'district',
    adcode: 330106,
  },
  autoFit: true,
  color: {
    field: 'value',
    value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
    scale: { type: 'quantize' },
  },
  style: {
    opacity: 1,
    stroke: '#ccc',
    lineWidth: 0.6,
    lineOpacity: 1,
  },
  label: {
    visible: true,
    field: 'name',
    style: {
      fill: '#000',
      opacity: 0.8,
      fontSize: 10,
      stroke: '#fff',
      strokeWidth: 1.5,
      textAllowOverlap: false,
      padding: [5, 5],
    },
  },
  state: {
    active: { stroke: 'black', lineWidth: 1 },
  },
  tooltip: {
    items: ['name', 'adcode', 'value'],
  },
  zoom: {
    position: 'bottomright',
  },
  legend: {
    position: 'bottomleft',
  },
});

scene.on('loaded', () => {
  choropleth.addToScene(scene);
});
import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/alisis/geo-data-v0.1.1/administrative-data/area-list.json',
  )
    .then((response) => response.json())
    .then((list) => {
      const data = list
        .filter(({ level, parent }) => level === 'city' && parent === 330000)
        .map((item) => ({ ...item, value: Math.random() * 5000 }));

      const choropleth = new Choropleth({
        source: {
          data,
          joinBy: {
            sourceField: 'adcode',
            geoField: 'adcode',
          },
        },
        viewLevel: {
          level: 'province',
          adcode: 330000,
        },
        autoFit: true,
        color: {
          field: 'value',
          value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
          scale: { type: 'quantize' },
        },
        style: {
          opacity: 1,
          stroke: '#ccc',
          lineWidth: 0.6,
          lineOpacity: 1,
        },
        label: {
          visible: true,
          field: 'name',
          style: {
            fill: '#000',
            opacity: 0.8,
            fontSize: 10,
            stroke: '#fff',
            strokeWidth: 1.5,
            textAllowOverlap: false,
            padding: [5, 5],
          },
        },
        state: {
          active: { stroke: 'black', lineWidth: 1 },
        },
        tooltip: {
          items: ['name', 'adcode', 'value'],
        },
        zoom: {
          position: 'bottomright',
        },
        legend: {
          position: 'bottomleft',
        },
      });

      choropleth.addToScene(scene);
    });
});
import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

const choropleth = new Choropleth({
  source: {
    data: [],
    joinBy: {
      sourceField: 'code',
      geoField: 'adcode',
    },
  },
  viewLevel: {
    level: 'world',
    adcode: 'all',
  },
  autoFit: true,
  color: {
    field: 'name',
    value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
  },
  style: {
    opacity: 1,
    stroke: '#ccc',
    lineWidth: 0.6,
    lineOpacity: 1,
  },
  label: {
    visible: true,
    field: 'name',
    style: {
      fill: '#000',
      opacity: 0.8,
      fontSize: 10,
      stroke: '#fff',
      strokeWidth: 1.5,
      textAllowOverlap: false,
      padding: [5, 5],
    },
  },
  state: {
    active: true,
    select: {
      stroke: 'black',
      lineWidth: 1.5,
      lineOpacity: 0.8,
    },
  },
  tooltip: {
    items: ['name', 'adcode', 'value'],
  },
  zoom: {
    position: 'bottomright',
  },
  legend: {
    position: 'bottomleft',
  },
});

scene.on('loaded', () => {
  choropleth.addToScene(scene);
});

// {
//   "filename": "world-map.ts",
//   "title": {
//     "zh": "世界地图",
//     "en": "World Map"
//   },
//   "screenshot": "https://gw.alipayobjects.com/zos/antfincdn/2W6xl7Y3wm/e7590fc4-f49b-43c0-ba3b-8b40a9ac3b39.png"
// },import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/alisis/geo-data-v0.1.1/administrative-data/area-list.json',
  )
    .then((response) => response.json())
    .then((list) => {
      const data = list
        .filter(({ level }) => level === 'city')
        .map((item) => ({ ...item, value: Math.random() * 5000 }));

      const choropleth = new Choropleth({
        source: {
          data,
          joinBy: {
            sourceField: 'adcode',
            geoField: 'adcode',
          },
        },
        viewLevel: {
          level: 'country',
          adcode: 100000,
          granularity: 'city',
        },
        autoFit: true,
        color: {
          field: 'value',
          value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
          scale: { type: 'quantize' },
        },
        style: {
          opacity: 1,
          stroke: '#ccc',
          lineWidth: 0.6,
          lineOpacity: 1,
        },
        label: {
          visible: true,
          field: 'name',
          style: {
            fill: '#000',
            opacity: 0.8,
            fontSize: 10,
            stroke: '#fff',
            strokeWidth: 1.5,
            textAllowOverlap: false,
            padding: [5, 5],
          },
        },
        state: {
          active: { stroke: 'black', lineWidth: 1 },
        },
        tooltip: {
          items: ['name', 'adcode', 'value'],
        },
        zoom: {
          position: 'bottomright',
        },
        legend: {
          position: 'bottomleft',
        },
      });

      choropleth.addToScene(scene);
    });
});

// {
//   "filename": "china-city.ts",
//   "title": {
//     "zh": "中国市级地图",
//     "en": "China Citys Map"
//   },
//   "screenshot": "https://gw.alipayobjects.com/zos/antfincdn/GN35RftkmZ/c53bc5ab-189f-42a2-9288-7b34f616f18d.png"
// },import { GaodeMap, Scene } from '@antv/l7';
import { Choropleth } from '@antv/l7plot';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [120.19382669582967, 30.258134],
    zoom: 3,
  }),
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/6a5ee962-76df-479c-b49a-9c76662e727d.json',
  )
    .then((res) => res.json())
    .then((ProvinceData) => {
      const choropleth = new Choropleth({
        source: {
          data: ProvinceData,
          joinBy: {
            sourceField: 'code',
            geoField: 'adcode',
          },
        },
        viewLevel: {
          level: 'country',
          adcode: 100000,
        },
        autoFit: true,
        color: {
          field: 'value',
          value: ['#B8E1FF', '#7DAAFF', '#3D76DD', '#0047A5', '#001D70'],
          scale: { type: 'quantile' },
        },
        style: {
          opacity: 1,
          stroke: '#ccc',
          lineWidth: 0.6,
          lineOpacity: 1,
        },
        label: {
          visible: true,
          field: 'name',
          style: {
            fill: '#000',
            opacity: 0.8,
            fontSize: 10,
            stroke: '#fff',
            strokeWidth: 1.5,
            textAllowOverlap: false,
            padding: [5, 5],
          },
        },
        state: {
          active: { stroke: 'black', lineWidth: 1 },
        },
        tooltip: {
          items: ['name', 'adcode', 'value'],
        },
        zoom: {
          position: 'bottomright',
        },
        legend: {
          position: 'bottomleft',
        },
      });
      choropleth.addToScene(scene);
    });
});

// {
//   "filename": "china-map.ts",
//   "title": {
//     "zh": "中国地图",
//     "en": "China Map"
//   },
//   "screenshot": "https://gw.alipayobjects.com/zos/antfincdn/qSFaP32j8q/4428acf4-9362-4705-90c9-de950be5a177.png"
// },import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 60, 40.7128 ],
    zoom: 2
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/7455fead-1dc0-458d-b91a-fb4cf99e701e.txt'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({ blend: 'normal' })
        .source(data,
          {
            parser: {
              type: 'csv',
              x: 'lng1',
              y: 'lat1',
              x1: 'lng2',
              y1: 'lat2'
            }
          })
        .size(1)
        .shape('arc')
        .color('#6495ED')
        .animate({
          duration: 4,
          interval: 0.2,
          trailLength: 0.6
        });
      // .forward(false)
      scene.addLayer(layer);
    });
});
/* eslint-disable no-eval */
import { Scene, LineLayer, PointLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 40,
    center: [ 40, 40.16797 ],
    style: 'dark',
    zoom: 2.5
  })
});
scene.addImage(
  'plane',
  'https://gw.alipayobjects.com/zos/bmw-prod/0ca1668e-38c2-4010-8568-b57cb33839b9.svg'
);
scene.on('loaded', () => {
  Promise.all([
    fetch(
      'https://gw.alipayobjects.com/os/bmw-prod/2960e1fc-b543-480f-a65e-d14c229dd777.json'
    ).then(d => d.json()),
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/4472780b-fea1-4fc2-9e4b-3ca716933dc7.json'
    ).then(d => d.text()),
    fetch(
      'https://gw.alipayobjects.com/os/basement_prod/a5ac7bce-181b-40d1-8a16-271356264ad8.json'
    ).then(d => d.text())
  ]).then(function onLoad([ world, dot, flyline ]) {
    const dotData = eval(dot);
    // @ts-ignore
    const flydata = eval(flyline).map(item => {
      // @ts-ignore
      const latlng1 = item.from.split(',').map(e => {
        return e * 1;
      });
      // @ts-ignore
      const latlng2 = item.to.split(',').map(e => {
        return e * 1;
      });
      return { coord: [ latlng1, latlng2 ] };
    });

    const worldLine = new LineLayer()
      .source(world)
      .color('#41fc9d')
      .size(0.5)
      .style({
        opacity: 0.4
      });
    const dotPoint = new PointLayer()
      .source(dotData, {
        parser: {
          type: 'json',
          x: 'lng',
          y: 'lat'
        }
      })
      .shape('circle')
      .color('#ffed11')
      .animate(true)
      .size(40);
    const flyLine = new LineLayer({ blend: 'normal' })
      .source(flydata, {
        parser: {
          type: 'json',
          coordinates: 'coord'
        }
      })
      .color('#ff6b34')
      .texture('plane')
      .shape('arc')
      .size(15)
      .animate({
        duration: 1,
        interval: 0.2,
        trailLength: 0.05
      })
      .style({
        textureBlend: 'replace',
        lineTexture: true, // 开启线的贴图功能
        iconStep: 10, // 设置贴图纹理的间距
      });

    const flyLine2 = new LineLayer()
      .source(flydata, {
        parser: {
          type: 'json',
          coordinates: 'coord'
        }
      })
      .color('#ff6b34')
      .shape('arc')
      .size(1)
      .style({
        lineType: 'dash',
        dashArray: [ 5, 5 ],
        opacity: 0.5
      });
    scene.addLayer(worldLine);
    scene.addLayer(dotPoint);
    scene.addLayer(flyLine2);
    scene.addLayer(flyLine);
  });
});import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 60,
    style: 'light',
    center: [ -74.05371169148452, 40.72573640479783 ],
    zoom: 12.45977,
    rotation: -38.39999999999969
  })
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/bd33a685-a17e-4686-bc79-b0e6a89fd950.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({
        blend: 'normal'
      })
        .source(data, {
          parser: {
            type: 'csv',
            x: 'start station longitude',
            y: 'start station latitude',
            x1: 'end station longitude',
            y1: 'end station latitude'
          }
        })
        .size(2)
        .shape('arc3d')
        .color('#0C47BF')
        .animate({
          interval: 0.5,
          trailLength: 0.5,
          duration: 5
        })
        .style({
          opacity: 0.5
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ -74.006, 40.7128 ],
    zoom: 14,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/5592c737-1c70-4d6b-82c1-e74e5a019b04.json'
  )
    .then(res => res.json())
    .then(data => {
      const lineLayer = new LineLayer()
        .source(data, {
          parser: {
            type: 'json',
            coordinates: 'path'
          }
        })
        .size(1.5)
        .shape('line')
        .color('color', v => {
          return `rgb(${v})`;
        })
        .animate({
          interval: 0.6,
          trailLength: 1.5,
          duration: 6
        });
      scene.addLayer(lineLayer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 107.77791556935472, 35.443286920228644 ],
    zoom: 2.9142882493605033
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({
        blend: 'normal'
      })
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng1',
            y: 'lat1',
            x1: 'lng2',
            y1: 'lat2'
          }
        })
        .size(1)
        .shape('greatcircle')
        .animate({
          enable: true,
          interval: 0.1,
          trailLength: 0.5,
          duration: 2
        })
        .color('#8C1EB2')
        .style({
          opacity: 0.8
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 53.6305,
    style: 'light',
    center: [ 102.600579, 23.114887 ],
    zoom: 13.5
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/ZVfOvhVCzwBkISNsuKCc.json')
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .size('ELEV', h => {
          return [ h % 50 === 0 ? 1.0 : 0.5, (h - 1400) * 20 ];
        })
        .shape('line')
        .scale('ELEV', {
          type: 'quantize'
        })
        .style({
          heightfixed: true
        })
        .color(
          'ELEV',
          [
            '#E4682F',
            '#FF8752',
            '#FFA783',
            '#FFBEA8',
            '#FFDCD6',
            '#EEF3FF',
            '#C8D7F5',
            '#A5C1FC',
            '#7FA7F9',
            '#5F8AE5'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 60,
    style: 'dark',
    center: [ 120.958472, 23.464292 ],
    zoom: 7.65,
    rotation: 33.375609237091055
  })
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/65589ef3-7f1d-440f-ba5d-86b03ee6ba7e.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .size(1)
        .shape('line')
        .style({
          vertexHeightScale: 30
        })
        .color('#0D5EFF');

      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 104.117492, 36.492696 ],
    zoom: 3.89
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/9f6afbcd-3aec-4a26-bd4a-2276d3439e0d.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .scale('value', {
          type: 'quantile'
        })
        .size('value', [ 0.5, 1, 1.5, 2 ])
        .shape('line')
        .color(
          'value',
          [
            '#0A3663',
            '#1558AC',
            '#3771D9',
            '#4D89E5',
            '#64A5D3',
            '#72BED6',
            '#83CED6',
            '#A6E1E0',
            '#B8EFE2',
            '#D7F9F0'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 45.06995336442376,
    style: 'dark',
    center: [ 102.597971, 23.110479 ],
    zoom: 13.34,
    rotation: 360,
  })
});

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/ZVfOvhVCzwBkISNsuKCc.json')
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({
      })
        .source(data)
        .size('ELEV', h => {
          return [ h % 50 === 0 ? 1.0 : 0.5, (h - 1400) * 20 ];
        })
        .shape('line')
        .scale('ELEV', {
          type: 'quantize'
        })
        .style({
          heightfixed: true
        })
        .color('ELEV', [
          '#094D4A',
          '#146968',
          '#1D7F7E',
          '#289899',
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#CEF8D6'
        ]);
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 119.297868, 29.732983 ],
    zoom: 7.11,
    rotation: 1.22,
    pitch: 45.42056074766357,
    style: 'dark'
  })
});

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/93a55259-328e-4e8b-8dc2-35e05844ed31.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .size(40)
        .shape('wall')
        .style({
          opacity: 'testOpacity',
          sourceColor: '#0DCCFF',
          targetColor: 'rbga(255,255,255, 0)'
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 121.461531, 31.096775 ],
    zoom: 8.64,
    rotation: 358.78,
    pitch: 45.42056074766357,
    style: 'dark'
  })
});

scene.addImage(
  '02',
  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg'
);

scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/0290a972-eedd-42f6-b69e-50a35e8a0824.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data.slice(0, 50), {
          parser: {
            type: 'json',
            coordinates: 'coordinates'
          }
        })
        .animate({
          interval: 1, // 间隔
          duration: 1, // 持续时间，延时
          trailLength: 2 // 流线长度
        })
        .size(20)
        .shape('wall')
        .texture('02')
        .style({
          opacity: 'testOpacity',
          lineTexture: true, // 开启线的贴图功能
          iconStep: 40, // 设置贴图纹理的间距
          iconStepCount: 4,
          sourceColor: '#00BCD2',
          targetColor: '#0074d0'
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 116.3956, 39.9392 ],
    zoom: 10,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/0d2f0113-f48b-4db9-8adc-a3937243d5a3.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .size(1.5)
        .shape('line')
        .color('标准名称', [ '#5B8FF9', '#5CCEA1', '#F6BD16' ])
        .style({
          lineType: 'dash',
          dashArray: [ 5, 5 ]
        })
      ;
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 121.472644, 31.231706 ],
    zoom: 8.15,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/0290a972-eedd-42f6-b69e-50a35e8a0824.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'json',
            coordinates: 'coordinates'
          }
        })
        .size(0.5)
        .shape('line')
        .active(true)
        .color('length', [
          '#0A3663',
          '#1558AC',
          '#3771D9',
          '#4D89E5',
          '#64A5D3',
          '#72BED6',
          '#83CED6',
          '#A6E1E0',
          '#B8EFE2',
          '#D7F9F0'
        ]);
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 103.83735, 1.3602538 ],
    zoom: 9.4678190476727,
    pitch: 20,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/ee07641d-5490-4768-9826-25862e8019e1.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'json',
            coordinates: 'path'
          }
        })
        .size('level', level => {
          return [ 0.8, level * 0.1 ];
        })
        .shape('line')
        .color(
          'level',
          [
            '#312B60',
            '#4A457E',
            '#615C99',
            '#816CAD',
            '#A67FB5',
            '#C997C7',
            '#DEB8D4',
            '#F5D4E6',
            '#FAE4F1',
            '#FFF3FC'
          ].slice(0, 8)
        );
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 116.3956, 39.9392 ],
    pitch: 20,
    zoom: 10,
    style: 'dark'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/0d2f0113-f48b-4db9-8adc-a3937243d5a3.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data)
        .size(4)
        .shape('line')
        .color('标准名称', [ '#5B8FF9', '#5CCEA1', '#F6BD16' ])
        .style({
          borderWidth: 0.4,
          borderColor: '#fff'
        });
      scene.addLayer(layer);
    });
});

import { Scene, LineLayer, Popup } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 103.83735604457024, 1.360253881403068 ],
    zoom: 9.4678190476727,
    pitch: 20,
    style: 'light'
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/ee07641d-5490-4768-9826-25862e8019e1.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'json',
            coordinates: 'path'
          }
        })
        .size('level', level => {
          return [ 0.8, level * 0.1 ];
        })
        .shape('line')
        .active(true)
        .color(
          'level',
          [
            '#0A3663',
            '#1558AC',
            '#3771D9',
            '#4D89E5',
            '#64A5D3',
            '#72BED6',
            '#83CED6',
            '#A6E1E0',
            '#B8EFE2',
            '#D7F9F0'
          ]
            .reverse()
            .slice(0, 8)
        );
      layer.on('mousemove', e => {
        const popup = new Popup({
          offsets: [ 0, 0 ],
          closeButton: false
        })
          .setLnglat(e.lngLat)
          .setHTML(`<span>车次: ${e.feature.number}</span>`);
        scene.addPopup(popup);
      });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 57.999999999999964,
    style: 'dark',
    center: [ 101.94365594271085, 40.46139674355291 ],
    zoom: 2.7484264183323437,
    rotation: -21.600099999999884
  })
});

scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng1',
            y: 'lat1',
            x1: 'lng2',
            y1: 'lat2'
          }
        })
        .size(1)
        .shape('arc3d')
        .color('#FF7C6A')
        .style({
          opacity: 0.8,
          sourceColor: '#f00',
          targetColor: '#6F19FF'
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 60,
    style: 'dark',
    center: [ 104.34278, 41.12554 ],
    zoom: 2.94888,
    rotation: 42.3999
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/bmw-prod/e495c407-953b-44cc-8f77-87b9cf257578.json')
    .then(res => res.json())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'json',
            x: 'from_lon',
            y: 'from_lat',
            x1: 'to_lon',
            y1: 'to_lat'
          }
        })
        .size(1)
        .shape('arc3d')
        .color('#FF7C6A')
        .style({
          segmentNumber: 15,
          opacity: 0.8
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 60,
    style: 'light',
    center: [ -74.06967, 40.720399 ],
    zoom: 12.45977
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/bd33a685-a17e-4686-bc79-b0e6a89fd950.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'start station longitude',
            y: 'start station latitude',
            x1: 'end station longitude',
            y1: 'end station latitude'
          }
        })
        .size(1)
        .shape('arc3d')
        .color('#0C47BF')
        .style({
          blur: 0.9
        });
      scene.addLayer(layer);
    });
});
import { Scene, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 107.77791556935472, 35.443286920228644 ],
    zoom: 2.9142882493605033
  })
});
scene.on('loaded', () => {
  fetch('https://gw.alipayobjects.com/os/rmsportal/UEXQMifxtkQlYfChpPwT.txt')
    .then(res => res.text())
    .then(data => {
      const layer = new LineLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng1',
            y: 'lat1',
            x1: 'lng2',
            y1: 'lat2'
          }
        })
        .size(1)
        .shape('greatcircle')
        .color('#8C1EB2')
        .style({
          opacity: 0.8
        });
      scene.addLayer(layer);
    });
});
// @ts-ignore
import {
    LineLayer,
    Scene,
    PointLayer,
    PolygonLayer,
    // @ts-ignore
} from '@antv/l7';
// @ts-ignore
import { GaodeMap } from '@antv/l7-maps';


const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
        center: [8.654789284720719, 47.412606122294044],
        zoom: 5,
        style: 'dark',
        // pitch: 60
    }),
});


fetch('https://mdn.alipayobjects.com/afts/file/A*O7PBQoWAMP4AAAAAAAAAAAAADrd2AQ/locations.json')
    .then(res => res.json())
    .then(fill => {
        const filllayer = new PolygonLayer({
            autoFit: true,
        })
            .source(fill)
            .shape('fill')
            .color('#aaa')
        scene.addLayer(filllayer);

        const pointdata = fill.features.map((item: any) => {
            return item.properties;
        });

        const circleLayer = new PointLayer({
            zIndex: 1,
        }).source(pointdata, {
            parser: {
                type: 'json',
                coordinates: 'centroid',
            }
        })
            .shape('circle')
            .size(10)
            .color('rgb(8, 64, 129)')
            .style({
                stroke: '#fff',
                strokeWidth: 2,
            }
            )

        scene.addLayer(circleLayer);

        fetch('https://mdn.alipayobjects.com/afts/file/A*Q_x7TLOMcrAAAAAAAAAAAAAADrd2AQ/flows-2016.json')
            .then(res => res.json())
            .then(lineData => {
                const pointObj = {};
                pointdata.forEach((item: any) => {
                    pointObj[item.abbr] = item;
                })

                const oddata = lineData.map((item: any) => {
                    return {
                        ...item,
                        coordinates: [pointObj[item.origin].centroid, pointObj[item.dest].centroid]
                    }
                }).sort((a: any, b: any) => {
                    return a.count - b.count;
                })


                const layer = new LineLayer({
                    zIndex: 0,
                })
                    .source(oddata, {
                        parser: {
                            type: 'json',
                            coordinates: 'coordinates',
                        }
                    })
                    .scale('count', {
                        type: 'quantile',
                    })
                    .size('count', [0.5, 1, 1.5, 1, 2, 4, 6, 8])
                    .shape('flowline')
                    .color('count', [
                        '#fef6b5',
                        '#ffdd9a',
                        '#ffc285',
                        '#ffa679',
                        '#fa8a76',
                        '#f16d7a',
                        '#e15383',
                    ])
                    .style({
                        opacity: {
                          field: 'count',
                          value: [0.2,0.4,0.6,0.8],
                        },
                        gapWidth: 2,
                        offsets:{
                          field: 'count',
                          value:()=>{
                            return [10 + Math.random()*20, 10 + Math.random()*20]
                          }
                        },// 支持数据映射
                        strokeWidth: 1,
                        strokeOpacity: 1,
                        stroke: '#000',
                    });
                scene.addLayer(layer);

            })

    })import { Scene, EarthLayer, LineLayer } from '@antv/l7';
import { Earth } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new Earth({})
});

// 地球模式下背景色默认为 #000 通过 setBgColor 方法我们可以设置可视化层的背景色
scene.setBgColor('#333');

const earthlayer = new EarthLayer()
  .source(
    'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*3-3NSpqRqUoAAAAAAAAAAAAAARQnAQ',
    {
      parser: {
        type: 'image'
      }
    }
  )
  .color('#2E8AE6')
  .shape('fill')
  .style({
    globalOptions: {
      ambientRatio: 0.6, // 环境光
      diffuseRatio: 0.4, // 漫反射
      specularRatio: 0.1 // 高光反射
    }
  })
  .animate(true);

const atomLayer = new EarthLayer()
  .color('#2E8AE6')
  .shape('atomSphere');

const bloomLayer = new EarthLayer().color('#fff').shape('bloomSphere')
  .style({
    opacity: 0.7
  });

scene.on('loaded', () => {
  scene.addLayer(earthlayer);

  scene.addLayer(atomLayer);
  scene.addLayer(bloomLayer);

  fetch('https://gw.alipayobjects.com/os/bmw-prod/20a69b46-3d6d-4ab5-b8b5-150b6aa52c88.json')
    .then(res => res.json())
    .then(flydata => {
      const flyLine = new LineLayer({ blend: 'normal' })
        .source(flydata, {
          parser: {
            type: 'json',
            coordinates: 'coord'
          }
        })
        .color('#b97feb')
        .shape('arc3d')
        .size(0.5)
        .active(true)
        .animate({
          interval: 2,
          trailLength: 2,
          duration: 1
        })
        .style({
          segmentNumber: 60,
          globalArcHeight: 20
        });
      scene.addLayer(flyLine);
    });

  earthlayer.setEarthTime(4.0);
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 104.995156, 31.450658 ],
    zoom: 3.79
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/337ddbb7-aa3f-4679-ab60-d64359241955.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          transforms: [
            {
              type: 'hexagon',
              size: 90000,
              field: 'capacity',
              method: 'sum'
            }
          ]
        })
        .shape('hexagon')
        .style({
          coverage: 0.9,
          angle: 0,
        })
        .color(
          'sum',
          [
            '#3F4BBA',
            '#3F4BBA',
            '#3F4BBA',
            '#3F4BBA',
            '#3C73DA',
            '#3C73DA',
            '#3C73DA',
            '#0F62FF',
            '#0F62FF',
            '#30B2E9',
            '#30B2E9',
            '#40C4CE'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    pitch: 56.499,
    center: [ 114.07737552216226, 22.542656745583486 ],
    rotation: 39.19,
    zoom: 12.47985
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/513add53-dcb2-4295-8860-9e7aa5236699.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          transforms: [
            {
              type: 'hexagon',
              size: 100,
              field: 'h12',
              method: 'sum'
            }
          ]
        })
        .size('sum', [ 0, 600 ])
        .shape('hexagonColumn')
        .style({
          coverage: 0.8,
          angle: 0,
        })
        .color(
          'sum',
          [
            '#094D4A',
            '#146968',
            '#1D7F7E',
            '#289899',
            '#34B6B7',
            '#4AC5AF',
            '#5FD3A6',
            '#7BE39E',
            '#A1EDB8',
            '#CEF8D6'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 43,
    center: [ 120.13383079335335, 29.651873105004427 ],
    zoom: 7.068989519212174
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/a1a8158d-6fe3-424b-8e50-694ccf61c4d7.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'hexagon',
              size: 2500,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .size('sum', sum => {
          return sum * 200;
        })
        .shape('hexagonColumn')
        .style({
          coverage: 0.8,
          angle: 0,
        })
        .color('sum', [
          '#094D4A',
          '#146968',
          '#1D7F7E',
          '#289899',
          '#34B6B7',
          '#4AC5AF',
          '#5FD3A6',
          '#7BE39E',
          '#A1EDB8',
          '#C3F9CC',
          '#DEFAC0',
          '#ECFFB1'
        ]);
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 47.49999999999995,
    center: [ 112.50447776627743, 30.830476390931125 ],
    zoom: 3.9879693680088626
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/7359a5e9-3c5e-453f-b207-bc892fb23b84.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'hexagon',
              size: 200000,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .size('sum', value => {
          return value * 20;
        })
        .shape('hexagonColumn')
        .color(
          'count',
          [
            '#FF4818',
            '#F7B74A',
            '#FFF598',
            '#FF40F3',
            '#9415FF',
            '#421EB2'
          ].reverse()
        )
        .style({
          coverage: 0.9,
          angle: 0
        });

      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    pitch: 50,
    center: [ 100, 30.6942 ],
    rotation: 10,
    zoom: 2
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/337ddbb7-aa3f-4679-ab60-d64359241955.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data)
        .size('capacity', [ 0, 1 ])
        .shape('heatmap3D')
      // weight映射通道
        .style({
          intensity: 5,
          radius: 10,
          rampColors: {
            colors: [
              '#2E8AE6',
              '#69D1AB',
              '#DAF291',
              '#FFD591',
              '#FF7A45',
              '#CF1D49'
            ],
            positions: [ 0, 0.2, 0.4, 0.6, 0.8, 1.0 ]
          }
        });
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 127.5671666579043, 7.445038892195569 ],
    zoom: 2.632456779444394
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data)
        .shape('heatmap')
        .size('mag', [ 0, 1.0 ]) // weight映射通道
        .style({
          intensity: 2,
          radius: 20,
          rampColors: {
            colors: [
              '#FF4818',
              '#F7B74A',
              '#FFF598',
              '#91EABC',
              '#2EA9A1',
              '#206C7C'
            ].reverse(),
            positions: [ 0, 0.2, 0.4, 0.6, 0.8, 1.0 ]
          }
        });
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 127.5671666579043, 7.445038892195569 ],
    zoom: 2.632456779444394
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/d3564b06-670f-46ea-8edb-842f7010a7c6.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data)
        .shape('heatmap')
        .size('mag', [ 0, 1.0 ]) // weight映射通道
        .style({
          intensity: 2,
          radius: 20,
          rampColors: {
            colors: [
              '#FF4818',
              '#F7B74A',
              '#FFF598',
              '#F27DEB',
              '#8C1EB2',
              '#421EB2'
            ].reverse(),
            positions: [ 0, 0.2, 0.4, 0.6, 0.8, 1.0 ]
          }
        });
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'blank',
    center: [ 110.097892, 33.853662 ],
    zoom: 4.056
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/bmw-prod/3dadb1f5-8f54-4449-8206-72db6e142c40.json'
  )
    .then(res => res.json())
    .then(data => {
      const layer = new HeatmapLayer({
        autoFit: true
      })
        .source(data, {
          transforms: [
            {
              type: 'hexagon',
              size: 5 * 100000
            }
          ]
        })
        .shape('circle')
        .active(false)
        .color('#aaa')
        .style({
          coverage: 0.7,
          angle: 0,
        });
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 110.097892, 33.853662 ],
    zoom: 4.056
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/7359a5e9-3c5e-453f-b207-bc892fb23b84.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'grid',
              size: 10000,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .shape('square')
        .style({
          coverage: 1,
          angle: 0
        })
        .color(
          'count',
          [
            '#FF3417',
            '#FF7412',
            '#FFB02A',
            '#FFE754',
            '#46F3FF',
            '#02BEFF',
            '#1A7AFF',
            '#0A1FB2'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 110.097892, 33.853662 ],
    zoom: 4.056
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/7359a5e9-3c5e-453f-b207-bc892fb23b84.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'grid',
              size: 20000,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .shape('circle')
        .style({
          coverage: 0.9,
          angle: 0
        })
        .color(
          'count',
          [
            '#8C1EB2',
            '#8C1EB2',
            '#DA05AA',
            '#F0051A',
            '#FF2A3C',
            '#FF4818',
            '#FF4818',
            '#FF8B18',
            '#F77B00',
            '#ED9909',
            '#ECC357',
            '#EDE59C'
          ].reverse()
        );
      scene.addLayer(layer);
    });
});
import { Scene, HeatmapLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 107.054293, 35.246265 ],
    zoom: 4.056
  })
});
scene.on('loaded', () => {
  fetch(
    'https://gw.alipayobjects.com/os/basement_prod/7359a5e9-3c5e-453f-b207-bc892fb23b84.csv'
  )
    .then(res => res.text())
    .then(data => {
      const layer = new HeatmapLayer({})
        .source(data, {
          parser: {
            type: 'csv',
            x: 'lng',
            y: 'lat'
          },
          transforms: [
            {
              type: 'grid',
              size: 20000,
              field: 'v',
              method: 'sum'
            }
          ]
        })
        .shape('square')
        .style({
          coverage: 1,
          angle: 0
        })
        .color(
          'count',
          [
            '#0B0030',
            '#100243',
            '#100243',
            '#1B048B',
            '#051FB7',
            '#0350C1',
            '#0350C1',
            '#0072C4',
            '#0796D3',
            '#2BA9DF',
            '#30C7C4',
            '#6BD5A0',
            '#A7ECB2',
            '#D0F4CA'
          ].reverse()
        );

      scene.addLayer(layer);
    });
});
import { Scene, GeometryLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 40,
    style: 'dark',
    center: [ 120, 30 ],
    zoom: 6
  })
});

scene.on('loaded', () => {
  const layer = new GeometryLayer()
    .shape('sprite')
    .size(10)
    .style({
      mapTexture:
          'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*zLQwQKBSagYAAAAAAAAAAAAAARQnAQ', // snow
      center: [ 120, 30 ],
      spriteCount: 60,
      spriteRadius: 10,
      spriteTop: 2500000,
    });
  scene.addLayer(layer);
});
import { Scene, GeometryLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.1025, 30.2594 ],
    style: 'dark',
    pitch: 65,
    rotation: 180,
    zoom: 14
  })
});
let currentZoom = 14,
  currentModelData = '100x100';

scene.on('loaded', () => {
  const layer = new GeometryLayer()
    .shape('plane')
    .style({
      width: 0.074,
      height: 0.061,
      center: [ 120.1025, 30.2594 ],
      widthSegments: 100,
      heightSegments: 100,
      terrainClipHeight: 1,
      mapTexture:
      'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*gA0NRbuOF5cAAAAAAAAAAAAAARQnAQ',
      terrainTexture:
      'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*eYFaRYlnnOUAAAAAAAAAAAAAARQnAQ',
      rgb2height: (r, g, b) => {
        let h =
        -10000.0 +
        (r * 255.0 * 256.0 * 256.0 + g * 255.0 * 256.0 + b * 255.0) * 0.1;
        h = h / 20 - 127600;
        h = Math.max(0, h);
        return h;
      }
    });
  scene.addLayer(layer);

  let modelData10,
    modelData20 = null,
    modelData100;

  layer.on('terrainImageLoaded', () => {

    modelData10 = layer.createModelData([], {
      widthSegments: 10,
      heightSegments: 10
    });

    modelData20 = layer.createModelData([], {
      widthSegments: 20,
      heightSegments: 20
    });

    modelData100 = layer.createModelData([], {
      widthSegments: 100,
      heightSegments: 100
    });
  });


  scene.on('zoom', ({ value }) => {
    const zoom = Math.floor(value);
    if (currentZoom !== zoom) {
      if (zoom > 13) {
        if (currentModelData !== '100x100') {
          layer.updateModelData(modelData100);
          currentModelData = '100x100';
        }
      } else if (zoom > 12) {
        if (currentModelData !== '20x20') {
          layer.updateModelData(modelData20);
          currentModelData = '20x20';
        }
      } else {
        if (currentModelData !== '10x10') {
          layer.updateModelData(modelData10);
          currentModelData = '10x10';
        }
      }
      currentZoom = zoom;
    }
    return '';
  });
});
import { Scene, GeometryLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 120.1025, 30.2594 ],
    style: 'dark',
    zoom: 10
  })
});

scene.on('loaded', () => {
  const layer = new GeometryLayer()
    .shape('plane')
    .style({
      opacity: 0.8,
      width: 0.074,
      height: 0.061,
      center: [ 120.1025, 30.2594 ]
    })
    .active(true)
    .color('#ff0');
  scene.addLayer(layer);
});
import { Scene, GeometryLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    pitch: 90,
    style: 'dark',
    center: [ 120, 30 ],
    zoom: 6
  })
});

scene.on('loaded', () => {
  const layer = new GeometryLayer()
    .shape('sprite')
    .size(10)
    .style({
      opacity: 0.3,
      mapTexture: 'https://gw.alipayobjects.com/mdn/rms_816329/afts/img/A*w2SFSZJp4nIAAAAAAAAAAAAAARQnAQ', // rain
      center: [ 120, 30 ],
      spriteCount: 120,
      spriteRadius: 10,
      spriteTop: 2500000,
      spriteUpdate: 20000,
      spriteScale: 0.6
    });
  scene.addLayer(layer);
});
import { Scene, ImageLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [ 115.5268, 34.3628 ],
    zoom: 7
  })
});
scene.on('loaded', () => {
  const layer = new ImageLayer({});
  layer.source(
    'https://gw.alipayobjects.com/mdn/antv_site/afts/img/A*8SUaRr7bxNsAAAAAAAAAAABkARQnAQ',
    {
      parser: {
        type: 'image',
        extent: [ 113.1277263548, 32.3464238863, 118.1365790452, 36.4786759137 ]
      }
    }
  );
  scene.addLayer(layer);
});
import { Scene, ImageLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [ 121.268, 30.3628 ],
    zoom: 10
  })
});
scene.on('loaded', () => {
  const layer = new ImageLayer({});
  layer.source(
    'https://gw.alipayobjects.com/zos/rmsportal/FnHFeFklTzKDdUESRNDv.jpg',
    {
      parser: {
        type: 'image',
        extent: [ 121.168, 30.2828, 121.384, 30.4219 ]
      }
    }
  );
  scene.addLayer(layer);
});
// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { RasterLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [105, 37.5],
    zoom: 2.5,
  }),
});
scene.on('loaded', () => {
  addLayer();
});
async function getTiffData() {
  const response = await fetch(
    'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',
  );
  const arrayBuffer = await response.arrayBuffer();
  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
  const image = await tiff.getImage();
  const width = image.getWidth();
  const height = image.getHeight();
  const values = await image.readRasters();
  return {
    data: values[0],
    width,
    height,
  };
}

async function addLayer() {
  const tiffdata = await getTiffData();

  const layer = new RasterLayer({});
  layer
    .source(tiffdata.data, {
      parser: {
        type: 'raster',
        width: tiffdata.width,
        height: tiffdata.height,
        extent: [
          73.4821902409999979, 3.8150178409999995, 135.1066187319999869,
          57.6300459959999998,
        ],
      },
    })
    .style({
      clampLow: false,
      clampHigh: false,
      domain: [0, 90],
      noDataValue: 0,
      rampColors: {
        positions: [0, 0.05, 0.1, 0.25, 0.5, 1.0], // 数据需要换成 0-1
        colors: [
          'rgba(92,58,16,0)',
          'rgba(92,58,16,0)',
          '#fabd08',
          '#f1e93f',
          '#f1ff8f',
          '#fcfff7',
        ],
      },
    });

  scene.addLayer(layer);
}
// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { RasterLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'dark',
    center: [105, 37.5],
    zoom: 2.5,
  }),
});
scene.on('loaded', () => {
  addLayer();
});
async function getTiffData() {
  const response = await fetch(
    'https://gw.alipayobjects.com/zos/antvdemo/assets/light_clip/lightF182013.tiff',
  );
  const arrayBuffer = await response.arrayBuffer();
  const tiff = await GeoTIFF.fromArrayBuffer(arrayBuffer);
  const image = await tiff.getImage();
  const width = image.getWidth();
  const height = image.getHeight();
  const values = await image.readRasters();
  return {
    data: values[0],
    width,
    height,
  };
}

async function addLayer() {
  const tiffdata = await getTiffData();

  const layer = new RasterLayer({});
  layer
    .source(tiffdata.data, {
      parser: {
        type: 'raster',
        width: tiffdata.width,
        height: tiffdata.height,
        extent: [
          73.4821902409999979, 3.8150178409999995, 135.1066187319999869,
          57.6300459959999998,
        ],
      },
    })
    .style({
      clampLow: false,
      clampHigh: false,
      domain: [0, 90],
      noDataValue: 0,
      rampColors: {
        type: 'linear', // 2.13.0 及以后版本支持
        colors: [
          'rgba(92,58,16,0)',
          'rgba(92,58,16,0)',
          '#fabd08',
          '#f1e93f',
          '#f1ff8f',
          '#fcfff7',
        ],
        positions: [0, 3, 9, 22.5, 45, 90],
      },
    });

  scene.addLayer(layer);
}
// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { RasterLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';
const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
      center: [121.268, 30.3628],
      zoom: 3,
    }),
  });
  async function getTiffData() {
    const response = await fetch(
      'https://gw.alipayobjects.com/os/rmsportal/XKgkjjGaAzRyKupCBiYW.dat',
    );
    const arrayBuffer = await response.arrayBuffer();
    return arrayBuffer;
  }
  scene.on('loaded', async () => {
    const tiffdata = await getTiffData();
    const tiff = await GeoTIFF.fromArrayBuffer(tiffdata);
    const image = await tiff.getImage();
    const width = image.getWidth();
    const height = image.getHeight();
    const values = await image.readRasters();

    const layer = new RasterLayer();
    layer
      .source(values[0], {
        parser: {
          type: 'raster',
          width,
          height,
          extent: [73.482190241, 3.82501784112, 135.106618732, 57.6300459963],
        },
      })
      .style({
        opacity: 1,
        clampLow: false,
        clampHigh: false,
        domain: [0, 10000],
        rampColors: {
          type:'custom',
          colors: ['#b2182b','#d6604d','#f4a582','#fddbc7','#f7f7f7','#d1e5f0','#92c5de','#4393c3','#2166ac'],
          positions: [0, 50, 200, 500, 2000, 3000, 4000, 5000, 8000,10000],
        },
      });

    scene.addLayer(layer)
});// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { RasterLayer, Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import * as GeoTIFF from 'geotiff';
const scene = new Scene({
    id: 'map',
    map: new GaodeMap({
      center: [121.268, 30.3628],
      zoom: 3,
    }),
  });
  async function getTiffData() {
    const response = await fetch(
      'https://gw.alipayobjects.com/os/rmsportal/XKgkjjGaAzRyKupCBiYW.dat',
    );
    const arrayBuffer = await response.arrayBuffer();
    return arrayBuffer;
  }
  scene.on('loaded', async () => {
    const tiffdata = await getTiffData();
    const tiff = await GeoTIFF.fromArrayBuffer(tiffdata);
    const image = await tiff.getImage();
    const width = image.getWidth();
    const height = image.getHeight();
    const values = await image.readRasters();

    const layer = new RasterLayer();
    layer
      .source(values[0], {
        parser: {
          type: 'raster',
          width,
          height,
          extent: [73.482190241, 3.82501784112, 135.106618732, 57.6300459963],
        },
      })
      .style({
        opacity: 1,
        clampLow: false,
        clampHigh: false,
        domain: [0, 10000],
        rampColors: {
          type:'quantize', // 等间距 不需要设置 position
          colors: ['#b2182b','#d6604d','#f4a582','#fddbc7','#f7f7f7','#d1e5f0','#92c5de','#4393c3','#2166ac'],
         
        },
      });

    scene.addLayer(layer)
});// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}


const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      zoomOffset: 1,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  // NDBI 6,5
  // NDWI 3,5
  const layer = new RasterLayer({
    zIndex: 10,
  });

  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [6, 5].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'raster',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image = await tiff.getImage();
            const width = image.getWidth();
            const height = image.getHeight();
            const values = await image.readRasters();
            return [
              { rasterData: values[bands[0]], width, height }, // R
              { rasterData: values[bands[1]], width, height }, // NIR
            ];
          },
          operation: 'ndvi',
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      domain: [-0.35, 0.6],
      rampColors: {
        colors: ['#276419', '#f7f7f7', '#ff0000'].reverse(),
        positions: [0, 0.38, 1.0],
      },
    });

  scene.addLayer(layer2);
  scene.addLayer(layer);
});
// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';
import React, { useEffect } from 'react';
import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  scene.addLayer(layer2);
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);

  const layer = new RasterLayer({ zIndex: 10 });
  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [5, 4, 3].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'rasterRgb',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image1 = await tiff.getImage();
            const value = await image1.readRasters();
            return bands.map((band) => {
              return {
                rasterData: value[band],
                width: value.width,
                height: value.height,
              };
            });
          },
          operation: {
            type: 'rgb',
          },
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      opacity: 1,
    });
  scene.addLayer(layer);
});


// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';
import React, { useEffect } from 'react';
import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  scene.addLayer(layer2);
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);

  const layer = new RasterLayer({ zIndex: 10 });
  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [4, 3, 2].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'rasterRgb',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image1 = await tiff.getImage();
            const value = await image1.readRasters();
            return bands.map((band) => {
              return {
                rasterData: value[band],
                width: value.width,
                height: value.height,
              };
            });
          },
          operation: {
            type: 'rgb',
          },
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      opacity: 1,
    });
  scene.addLayer(layer);
});


// @ts-ignore
import { RasterLayer, Scene, metersToLngLat } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';
import React, { useEffect } from 'react';
import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}


const scene = new Scene({
  id: 'map',
 
  map: new Map({
    center: [130.5, 47],
    zoom: 2,
  }),
});

scene.on('loaded', async () => {
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667920165972/china.tif';
  const tiffdata = await getTiffData(url1);
  const maskData = await (
    await fetch(
      'https://gw.alipayobjects.com/os/basement_prod/d2e0e930-fd44-4fca-8872-c1037b0fee7b.json',
    )
  ).json();
  const layer = new RasterLayer({
    zIndex: 10,
    mask: true,
    maskfence: maskData,
  });
  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [0, 1, 2],
        },
      ],
      {
        parser: {
          type: 'rasterRgb',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image1 = await tiff.getImage();
            const value = await image1.readRasters();

            return bands.map((band) => {
              return {
                rasterData: value[band],
                width: value.width,
                height: value.height,
              };
            });
          },
          operation: {
            type: 'rgb',
            options: {},
          },
          extent: [
            ...metersToLngLat([
              8182125.2558000003919005, 427435.8622000003233552,
            ]),
            ...metersToLngLat([
              15038832.4410999994724989, 7087852.7587999999523163,
            ]),
          ],
        },
      },
    )
    .style({
      opacity: 1,
    });
  scene.addLayer(layer);
});
// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      zoomOffset: 1,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  // NDBI 6,5
  // NDWI 3,5
  const layer = new RasterLayer({
    zIndex: 10,
  });

  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [6, 5].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'raster',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image = await tiff.getImage();
            const width = image.getWidth();
            const height = image.getHeight();
            const values = await image.readRasters();
            return [
              { rasterData: values[bands[0]], width, height }, // R
              { rasterData: values[bands[1]], width, height }, // NIR
            ];
          },
          operation: {
            type: 'nd',
          },
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      domain: [-0.35, 0.6],
      rampColors: {
        colors: ['#276419', '#f7f7f7', '#ff0000'].reverse(),
        positions: [0, 0.38, 1.0],
      },
    });

  scene.addLayer(layer2);
  scene.addLayer(layer);
});
// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}

const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  // NDBI 6,5
  // NDWI 3,5
  const layer = new RasterLayer({
    zIndex: 10,
  });

  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [3, 5].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'raster',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image = await tiff.getImage();
            const width = image.getWidth();
            const height = image.getHeight();
            const values = await image.readRasters();
            return [
              { rasterData: values[bands[0]], width, height }, // R
              { rasterData: values[bands[1]], width, height }, // NIR
            ];
          },
          operation: {
            type: 'nd',
          },
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      domain: [0, 1],
      rampColors: {
        colors: ['#0000FF', '#FF0000'],
        positions: [0, 1.0],
      },
    });

  scene.addLayer(layer2);
  scene.addLayer(layer);
});
// @ts-ignore
import { RasterLayer, Scene } from '@antv/l7';
// @ts-ignore
import { Map } from '@antv/l7-maps';

import * as GeoTIFF from 'geotiff';

async function getTiffData(url: string) {
  const response = await fetch(url);
  const arrayBuffer = await response.arrayBuffer();
  return arrayBuffer;
}


const scene = new Scene({
  id: 'map',
  map: new Map({
    center: [130.5, 47],
    zoom: 10.5,
  }),
});

scene.on('loaded', async () => {
  const url1 =
    'https://gw.alipayobjects.com/zos/raptor/1667832825992/LC08_3857_clip_2.tif';
  const tiffdata = await getTiffData(url1);
  const url2 =
    'https://t0.tianditu.gov.cn/img_w/wmts?tk=b72aa81ac2b3cae941d1eb213499e15e&';

  const layer2 = new RasterLayer({
    zIndex: 1,
  }).source(url2, {
    parser: {
      type: 'rasterTile',
      tileSize: 256,
      wmtsOptions: {
        layer: 'img',
        tileMatrixset: 'w',
        format: 'tiles',
      },
    },
  });
  // NDBI 6,5
  // NDWI 3,5
  const layer = new RasterLayer({
    zIndex: 10,
  });

  layer
    .source(
      [
        {
          data: tiffdata,
          bands: [4, 5].map((v) => v - 1),
        },
      ],
      {
        parser: {
          type: 'raster',
          format: async (data, bands) => {
            const tiff = await GeoTIFF.fromArrayBuffer(data);
            const image = await tiff.getImage();
            const width = image.getWidth();
            const height = image.getHeight();
            const values = await image.readRasters();
            return [
              { rasterData: values[bands[0]], width, height }, // R
              { rasterData: values[bands[1]], width, height }, // NIR
            ];
          },
          operation: {
            type: 'nd',
          },
          extent: [
            130.39565357746957, 46.905730725742366, 130.73364094187343,
            47.10217234153133,
          ],
        },
      },
    )
    .style({
      domain: [-0.3, 0.5],
      rampColors: {
        colors: [
          '#ce4a2e',
          '#f0a875',
          '#fff8ba',
          '#bddd8a',
          '#5da73e',
          '#235117',
        ],
        positions: [0, 0.2, 0.4, 0.6, 0.8, 1.0],
      },
    });

  scene.addLayer(layer2);
  scene.addLayer(layer);
});
import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import { ThreeLayer, ThreeRender } from '@antv/l7-three';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 111.4453125, 32.84267363195431 ],
    pitch: 45,
    rotation: 30,
    zoom: 12
  })
});

scene.on('loaded', () => {
  scene.registerRenderService(ThreeRender);

  const threeJSLayer = new ThreeLayer({
    enableMultiPassRenderer: false,
    onAddMeshes: (threeScene, layer) => {
      threeScene.add(new THREE.AmbientLight(0xffffff));
      const sunlight = new THREE.DirectionalLight(0xffffff, 0.25);
      sunlight.position.set(0, 80000000, 100000000);
      sunlight.matrixWorldNeedsUpdate = true;
      threeScene.add(sunlight);

      const center = scene.getCenter();

      const cubeGeometry = new THREE.BoxBufferGeometry(10000, 10000, 10000);
      const cubeMaterial = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide });
      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
      layer.setObjectLngLat(cube, [ center.lng + 0.05, center.lat ], 0);
      threeScene.add(cube);

      // 使用 Three.js glTFLoader 加载模型
      const loader = new GLTFLoader();
      loader.load(
        'https://gw.alipayobjects.com/os/bmw-prod/3ca0a546-92d8-4ba0-a89c-017c218d5bea.gltf',
        gltf => {
          const gltfScene = gltf.scene;
          setDouble(gltfScene);
          layer.adjustMeshToMap(gltfScene);
          // gltfScene.scale.set(1000, 1000, 1000)
          layer.setMeshScale(gltfScene, 1000, 1000, 1000);

          layer.setObjectLngLat(
            gltfScene,
            [ center.lng, center.lat ],
            0
          );

          const animations = gltf.animations;
          if (animations && animations.length) {
            const mixer = new THREE.AnimationMixer(gltfScene);

            const animation = animations[2];

            const action = mixer.clipAction(animation);

            action.play();
            layer.addAnimateMixer(mixer);
          }
          // layer.setObjectLngLat(gltfScene, [center.lng + 0.05, center.lat] as ILngLat, 0)
          let t = 0;
          setInterval(() => {
            t += 0.01;
            layer.setObjectLngLat(
              gltfScene,
              [ center.lng, center.lat + Math.sin(t) * 0.1 ],
              0
            );
          }, 16);

          // 向场景中添加模型
          threeScene.add(gltfScene);
          // 重绘图层
          layer.render();
        }
      );
    }
  }).animate(true);
  scene.addLayer(threeJSLayer);
});

function setDouble(object) {
  if (object.children && object.children.length && object.children.length > 0) {
    object.children.map(child => setDouble(child));
  } else if (object.material) {
    object.material.side = THREE.DoubleSide;
  }
}

import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import { ThreeLayer, ThreeRender } from '@antv/l7-three';
import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader';
import { animate, easeInOut } from 'popmotion';
function changeValue(
  startValue,
  endValue,
  duration = 500,
  callback,
  complete
) {
  if (typeof startValue === 'number') {
    animate({
      from: {
        v: startValue
      },
      to: {
        v: endValue
      },
      ease: easeInOut,
      duration,
      onUpdate: o => {
        callback(o.v);
        return '';
      },
      onComplete: () => {
        complete && complete();
        return '';
      }
    });
  } else {
    animate({
      from: {
        lng: startValue.lng,
        lat: startValue.lat,
        pitch: startValue.pitch,
        rotation: startValue.rotation,
        zoom: startValue.zoom
      },
      to: {
        lng: (endValue).lng,
        lat: (endValue).lat,
        pitch: (endValue).pitch,
        rotation: (endValue).rotation,
        zoom: (endValue).zoom
      },
      ease: easeInOut,
      duration,
      onUpdate: o => {
        callback(o);
        return '';
      },
      onComplete: () => {
        complete && complete();
        return '';
      }
    });
  }
  return '';
}

const raycaster = new THREE.Raycaster();
const lng = 120.1;
const lat = 30.265;
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ lng, lat ],
    pitch: 70,
    rotation: 220,
    zoom: 16
  })
});

scene.on('loaded', () => {

  const mouse = new THREE.Vector2();
  let zspace,
    aspace,
    ASpaceTextMesh,
    ZSpaceTextMesh;

  scene.registerRenderService(ThreeRender);

  const center = scene.getCenter();

  const threeJSLayer = new ThreeLayer({
    enableMultiPassRenderer: false,
    // @ts-ignore
    onAddMeshes: (threeScene, layer) => {
      threeScene.add(new THREE.AmbientLight(0xffffff));
      const sunlight = new THREE.DirectionalLight(0xffffff, 0.25);
      sunlight.position.set(0, 80000000, 100000000);
      sunlight.matrixWorldNeedsUpdate = true;
      threeScene.add(sunlight);

      // map
      // https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*gA0NRbuOF5cAAAAAAAAAAAAAARQnAQ

      // height
      // https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*eYFaRYlnnOUAAAAAAAAAAAAAARQnAQ

      const image = new Image();
      image.crossOrigin = '';
      image.src =
        'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*eYFaRYlnnOUAAAAAAAAAAAAAARQnAQ';
      image.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = image.width;
        canvas.height = image.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(image, 0, 0, image.width, image.height);
        const heightData = ctx.getImageData(0, 0, image.width, image.height)
          .data;

        const s = 53000;

        const geometry = new THREE.PlaneGeometry(s, s, 255, 255);

        geometry.vertices.map((v, i) => {
          const r = heightData[i * 4];
          const g = heightData[i * 4 + 1];
          const b = heightData[i * 4 + 2];
          let h =
            -10000.0 +
            (r * 255.0 * 256.0 * 256.0 + g * 255.0 * 256.0 + b * 255.0) *
              0.1;
          h = h / 20 - 127600;
          h = Math.max(0, h);

          v.z = h;
          return '';
        });
        const material = new THREE.MeshPhongMaterial({
          transparent: true,
          // opacity: 0.6,
          map: new THREE.TextureLoader().load(
            'https://gw.alipayobjects.com/mdn/rms_23a451/afts/img/A*gA0NRbuOF5cAAAAAAAAAAAAAARQnAQ'
          ),
          side: THREE.DoubleSide
        });
        const plane = new THREE.Mesh(geometry, material);
        layer.setObjectLngLat(plane, [ 120.1008, 30.2573 ], 0);
        plane.position.z = 10;
        threeScene.add(plane);

        return '';
      };

      // 使用 Three.js glTFLoader 加载模型
      const loader = new GLTFLoader();
      loader.load(
        'https://gw.alipayobjects.com/os/bmw-prod/3ca0a546-92d8-4ba0-a89c-017c218d5bea.gltf',
        gltf => {
          const antModel = gltf.scene;
          setDouble(antModel);
          // antModel.children[0].material.side = THREE.DoubleSide
          layer.adjustMeshToMap(antModel);
          layer.setMeshScale(antModel, 20, 20, 20);
          layer.setObjectLngLat(
            antModel,
            [ center.lng - 0.002, center.lat ],
            0
          );

          const animations = gltf.animations;
          if (animations && animations.length) {
            const mixer = new THREE.AnimationMixer(antModel);
            const animation = animations[1];
            const action = mixer.clipAction(animation);
            action.play();
            layer.addAnimateMixer(mixer);
          }
          antModel.rotation.y = Math.PI;
          // 向场景中添加模型
          threeScene.add(antModel);
          // 重绘图层
          layer.render();
          return '';
        }
      );

      const v = `
      varying vec2 vUv;
      varying vec4 worldPosition;
      void main() {
          vUv = uv;
          worldPosition = modelMatrix * vec4(position, 1.0);
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }`;
      const f = `
      varying vec2 vUv;
      varying vec4 worldPosition;
      uniform vec3 color;
      void main() {
        gl_FragColor = vec4(color, fract(worldPosition.z / 50.0));
      }`;
      const shadermaterial = new THREE.ShaderMaterial({
        uniforms: {
          color: {
            value: new THREE.Vector3(0.21372549, 0.34705882, 0.56470588)
          }
        },
        vertexShader: v,
        fragmentShader: f,
        side: THREE.DoubleSide
      });

      const fbxLoaded = new FBXLoader();
      // load ZSpace
      fbxLoaded.load(
        'https://gw.alipayobjects.com/os/bmw-prod/af1652c9-3c4f-4e73-ac4c-1f78fefbaf6a.fbx',
        gltf => {
          zspace = gltf;
          layer.adjustMeshToMap(zspace);
          // @ts-ignore
          zspace.children[0].material = shadermaterial;
          layer.setMeshScale(zspace, 10, 10, 10);

          layer.setObjectLngLat(zspace, [ 120.1015, 30.2661 ], 0);
          zspace.rotation.x = Math.PI * 2;
          zspace.rotation.z = -Math.PI * (-2 / 15);
          threeScene.add(zspace);

          return '';
        }
      );

      fbxLoaded.load(
        'https://gw.alipayobjects.com/os/bmw-prod/11d6e4c1-bd5b-4dc1-bae5-ac51c14e9056.fbx',
        model => {
          aspace = model;
          layer.adjustMeshToMap(aspace);
          // @ts-ignore
          aspace.children[0].material = shadermaterial;

          layer.setMeshScale(aspace, 8, 8, 8);
          layer.setObjectLngLat(aspace, [ 120.099, 30.261 ], 0);
          aspace.rotation.x = Math.PI * 2;
          aspace.rotation.z = -Math.PI * (3 / 15);
          threeScene.add(aspace);

          return '';
        }
      );
    console.log(THREE.FontLoader)
      const textLoader = new THREE.FontLoader();
      textLoader.load(
        'https://gw.alipayobjects.com/os/bmw-prod/0a3f46eb-294e-4d95-87f2-052c26ad4bf1.json',
        font => {
          const fontOptions = {
            size: 360, // 字号大小，一般为大写字母的高度
            height: 50, // 文字的厚度
            font, // 字体，默认是'helvetiker'，需对应引用的字体文件
            bevelThickness: 10, // 倒角厚度
            bevelSize: 10, // 倒角宽度
            curveSegments: 30, // 弧线分段数，使得文字的曲线更加光滑
            bevelEnabled: true // 布尔值，是否使用倒角，意为在边缘处斜切
          };
          const aspaceGeo = new THREE.TextGeometry('ASpace', fontOptions);
          aspaceGeo.center();
          const zspaceGeo = new THREE.TextGeometry('ZSpace', fontOptions);
          zspaceGeo.center();

          const fontMat = new THREE.MeshPhongMaterial({
            color: 0xcccccc,
            shininess: 60,
            specular: 0xcccccc,
            side: THREE.DoubleSide
          });

          const testHeight = 900;

          ASpaceTextMesh = new THREE.Mesh(aspaceGeo, fontMat);
          ASpaceTextMesh.rotation.x = Math.PI / 2;
          ASpaceTextMesh.rotation.y = (-Math.PI * 3) / 4;
          layer.setObjectLngLat(
            ASpaceTextMesh,
            [ 120.099, 30.261 ],
            testHeight
          );
          threeScene.add(ASpaceTextMesh);

          ZSpaceTextMesh = new THREE.Mesh(zspaceGeo, fontMat);
          ZSpaceTextMesh.rotation.x = Math.PI / 2;
          ZSpaceTextMesh.rotation.y = (-Math.PI * 3) / 4;
          layer.setObjectLngLat(
            ZSpaceTextMesh,
            [ 120.103, 30.2661 ],
            testHeight
          );
          threeScene.add(ZSpaceTextMesh);

          getH(0, 200);
          function getH(h1, h2) {
            changeValue(
              h1,
              h2,
              1000,
              h => {
                ASpaceTextMesh.position.z = testHeight + h;
                ZSpaceTextMesh.position.z = testHeight + h;
                return '';
              },
              () => {
                setTimeout(() => getH(h2, h1), 10);
                return '';
              }
            );
          }

          return '';
        }
      );
    }
  })
    .animate(true);
  scene.addLayer(threeJSLayer);
  // @ts-ignore
  let currentCamera = threeJSLayer.threeRenderService?.getRenderCamera();
  const currentView = {
    lng: center.lng,
    lat: center.lat,
    pitch: 70,
    rotation: 220,
    zoom: 16
  };

  scene.on('zoom', () => {
    const cen = scene.getCenter();
    currentView.lng = cen.lng;
    currentView.lat = cen.lat;
    currentView.pitch = scene.getPitch();
    currentView.zoom = scene.getZoom();
    return '';
  });

  scene.map.on('mapchange', () => {
    // @ts-ignore
    currentCamera = threeJSLayer.getRenderCamera();
    currentView.pitch = scene.getPitch();
    return '';
  });

  const ASpaceView = {
    lng: 120.109509,
    lat: 30.251529,
    pitch: 83,
    rotation: 225,
    zoom: 15
  };
  const ZSpaceView = {
    lng: 120.112026,
    lat: 30.256881,
    pitch: 80,
    rotation: 220,
    zoom: 15
  };

  scene.on('click', ev => {
    // @ts-ignore
    const size = scene?.map?.getSize();
    mouse.x = (ev.pixel.x / size.width) * 2 - 1;
    mouse.y = -(ev.pixel.y / size.height) * 2 + 1;
    raycaster.setFromCamera(mouse, currentCamera);
    const intersects = raycaster.intersectObjects([ zspace, aspace ], true);
    if (intersects.length > 0) {
      const object = intersects[0].object;
      if (object.name === 'Z空间') {
        selectSpace(currentView, ZSpaceView, ZSpaceTextMesh);
      } else {
        selectSpace(currentView, ASpaceView, ASpaceTextMesh);
      }
    }
    return '';
  });

  function selectSpace(
    currentView,
    targetView,
    spaceText
  ) {
    if (spaceText) {
      changeValue(
        spaceText.rotation.y,
        spaceText.rotation.y + Math.PI * 2,
        500,
        r => {
          spaceText.rotation.y = r;
          return '';
        }
      );
    }

    changeValue(currentView, targetView, 500, view => {
      scene.setCenter([ view.lng, view.lat ]);
      scene.setPitch(view.pitch);
      scene.setRotation(view.rotation);
      scene.setZoom(view.zoom);

      currentView.lng = view.lng;
      currentView.lat = view.lat;
      currentView.pitch = view.pitch;
      currentView.rotation = view.rotation;
      currentView.zoom = view.zoom;

      return '';
    });
  }
  return '';
});

function setDouble(object) {
  if (object.children && object.children.length && object.children.length > 0) {
    object.children.map(child => setDouble(child));
  } else if (object.material) {
    object.material.side = THREE.DoubleSide;
  }
}

import { Scene } from '@antv/l7';
import { DrawEvent, DrawPolygon } from '@antv/l7-draw';
import { GaodeMap } from '@antv/l7-maps';
const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.211944, 30.288946],
    zoom: 7.05,
  }),
});
scene.on('loaded', () => {
  const drawPolygon = new DrawPolygon(scene, {
    areaOptions: {},
  });
  drawPolygon.enable();

  drawPolygon.on(DrawEvent.Change, (allFeatures) => {
    console.log(allFeatures);
  });
});
import { Scene } from '@antv/l7';
import { DrawEvent, DrawLine } from '@antv/l7-draw';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.211944, 30.288946],
    zoom: 7.05,
  }),
});
scene.on('loaded', () => {
  const drawLine = new DrawLine(scene, {
    distanceOptions: {},
  });
  drawLine.enable();

  drawLine.on(DrawEvent.Change, (allFeatures) => {
    console.log(allFeatures);
  });
});
import { Scene } from '@antv/l7';
import { DrawEvent, DrawPoint } from '@antv/l7-draw';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.211944, 30.288946],
    zoom: 7.05,
  }),
});
scene.on('loaded', () => {
  const drawPoint = new DrawPoint(scene, {});
  drawPoint.enable();

  drawPoint.on(DrawEvent.Change, (allFeatures) => {
    console.log(allFeatures);
  });

  setInterval(() => {
    console.log(scene.getZoom(), scene.getCenter());
  }, 2000);
});
import { Scene } from '@antv/l7';
import { DrawEvent, DrawRect } from '@antv/l7-draw';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.211944, 30.288946],
    zoom: 7.05,
  }),
});
scene.on('loaded', () => {
  const drawRect = new DrawRect(scene, {});
  drawRect.enable();

  drawRect.on(DrawEvent.Change, (allFeatures) => {
    console.log(allFeatures);
  });
});
import { Scene } from '@antv/l7';
import { DrawCircle, DrawEvent } from '@antv/l7-draw';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [120.211944, 30.288946],
    zoom: 7.05,
  }),
});
scene.on('loaded', () => {
  const drawCircle = new DrawCircle(scene, {});
  drawCircle.enable();

  drawCircle.on(DrawEvent.Change, (allFeatures) => {
    console.log(allFeatures);
  });
});
// https://gw.alipayobjects.com/zos/antvdemo/assets/2019_clip/ndvi_201905.tif
import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';
import { ControlEvent, DrawControl } from '@antv/l7-draw';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    style: 'light',
    center: [116.1608, 40.1119],
    zoom: 15,
  }),
});
scene.on('loaded', () => {
  const tileLayer = new AMap.TileLayer.Satellite();
  tileLayer.setMap(scene.map);

  const drawControl = new DrawControl(scene, {});
  scene.addControl(drawControl);
  drawControl.on(ControlEvent.DrawChange, (changeType) => {
    console.log(changeType);
  });
});
import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 105, 30 ],
    zoom: 2
  })
});


scene.on('loaded', () => {
  scene.map.add(new window.AMap.TileLayer.Satellite());
});
import { Scene, PointLayer, LineLayer } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 116.475, 39.985 ],
    zoom: 12.2,
    plugin: [ 'AMap.ToolBar', 'AMap.LineSearch' ]
  })
});

scene.addImage(
  'road',
  'https://gw.alipayobjects.com/zos/bmw-prod/ce83fc30-701f-415b-9750-4b146f4b3dd6.svg'
);
scene.addImage(
  'start',
  'https://gw.alipayobjects.com/zos/bmw-prod/1c301f25-9bb8-4e67-8d5c-41117c877caf.svg'
);
scene.addImage(
  'end',
  'https://gw.alipayobjects.com/zos/bmw-prod/f3db4998-e657-4c46-b5ab-205ddc12031f.svg'
);

scene.addImage(
  'busStop',
  'https://gw.alipayobjects.com/zos/bmw-prod/54345af2-1d01-43e1-9d11-cd9bb953202c.svg'
);

scene.on('loaded', () => {
  window.AMap.plugin([ 'AMap.ToolBar', 'AMap.LineSearch' ], () => {
    scene.map.addControl(new AMap.ToolBar());

    const linesearch = new AMap.LineSearch({
      pageIndex: 1, // 页码，默认值为1
      pageSize: 1, // 单页显示结果条数，默认值为20，最大值为50
      city: '北京', // 限定查询城市，可以是城市名（中文/中文全拼）、城市编码，默认值为『全国』
      extensions: 'all' // 是否返回公交线路详细信息，默认值为『base』
    });

    // 执行公交路线关键字查询
    linesearch.search('536', function(status, result) {
      // 打印状态信息status和结果信息result

      const { path, via_stops } = result.lineInfo[0];
      const startPoint = [ path[0] ];
      const endpoint = [ path[path.length - 1] ];
      const budStopsData = via_stops.map(stop => ({
        lng: stop.location.lng,
        lat: stop.location.lat,
        name: stop.name
      }));
      const data = [
        {
          id: '1',
          coord: path.map(p => [ p.lng, p.lat ])
        }
      ];

      const busLine = new LineLayer({ blend: 'normal' })
        .source(data, {
          parser: {
            type: 'json',
            coordinates: 'coord'
          }
        })
        .size(5)
        .shape('line')
        .color('rgb(99, 166, 242)')
        .texture('road')
        .animate({
          interval: 1, // 间隔
          duration: 1, // 持续时间，延时
          trailLength: 2 // 流线长度
        })
        .style({
          lineTexture: true,
          iconStep: 25
        });

      scene.addLayer(busLine);

      const startPointLayer = new PointLayer({ zIndex: 1 })
        .source(startPoint, {
          parser: {
            x: 'lng',
            y: 'lat',
            type: 'json'
          }
        })
        .shape('start')
        .size(20)
        .style({
          offsets: [ 0, 25 ]
        });
      scene.addLayer(startPointLayer);

      const endPointLayer = new PointLayer({ zIndex: 1 })
        .source(endpoint, {
          parser: {
            x: 'lng',
            y: 'lat',
            type: 'json'
          }
        })
        .shape('end')
        .size(25)
        .style({
          offsets: [ 0, 25 ]
        });
      scene.addLayer(endPointLayer);

      const busStops = new PointLayer()
        .source(budStopsData, {
          parser: {
            x: 'lng',
            y: 'lat',
            type: 'json'
          }
        })
        .shape('busStop')
        .size(13)
        .style({
          offsets: [ 20, 0 ]
        });
      scene.addLayer(busStops);

      const busStopsName = new PointLayer()
        .source(budStopsData, {
          parser: {
            x: 'lng',
            y: 'lat',
            type: 'json'
          }
        })
        .shape('name', 'text')
        .size(12)
        .color('#000')
        .style({
          textAnchor: 'left',
          textOffset: [ 80, 0 ],
          stroke: '#fff',
          strokeWidth: 1
        });
      scene.addLayer(busStopsName);
    });
  });
});
import { Scene } from '@antv/l7';
import { GaodeMap } from '@antv/l7-maps';

const scene = new Scene({
  id: 'map',
  map: new GaodeMap({
    center: [ 105, 30 ],
    zoom: 2
  })
});

scene.on('loaded', () => {
  const xyzTileLayer = new window.AMap.TileLayer({
    getTileUrl:
        'https://wprd0{1,2,3,4}.is.autonavi.com/appmaptile?x=[x]&y=[y]&z=[z]&size=1&scl=1&style=8&ltype=11',
    zIndex: 100
  });
  scene.map.add(xyzTileLayer);
});
